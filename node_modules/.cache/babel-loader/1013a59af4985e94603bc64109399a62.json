{"ast":null,"code":"/**\n * @file ctc_ridgewood.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the Ridgewood Junction Interlocking\n */\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n/**\n * Class is the Backend for the Ridgewood Junction Interlocking This class is what controlls the Ridgewood Junction Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, and the ReactJS Component \n * class gets information from this class to display the correct status of the interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * @member sw_5 -> Bool if Switch #5 is Reveresed or Not\n * @member sw_7 -> Bool if Switch #7 is Reveresed or Not\n * @member sw_9 -> Bool if Switch #9 is Reveresed or Not\n * \n * @member sig_2w_1 -> Bool if Signal #2w-1 is Lined or Not\n * @member sig_2w_2 -> Bool if Signal #2w-2 is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_6w -> Bool if Signal #6w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * @member sig_6e -> Bool if Signal #6e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_w_trk_3 = The west bound route for track #3\n * @member route_w_trk_4 = The west bound route for track #4\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * @member route_e_trk_3 = The east bound route for track #3\n * \n * @member routed_trk_1 = Bool if track #1 is routed or not\n * @member routed_trk_2 = Bool if track #2 is routed or not\n * @member routed_trk_3 = Bool if track #3 is routed or not\n * @member trk_1_time = The time track #1 was occupied, used to know when to clear the route\n * @member trk_2_time = The time track #2 was occupied, used to know when to clear the route\n * @member trk_3_time = The time track #3 was occupied, used to know when to clear the route\n * @member trk_1_occupied = Bool if track #1 is occupied or not\n * @member trk_2_occupied = Bool if track #2 is occupied or not\n * @member trk_3_occupied = Bool if track #3 is occupied or not\n */\n\nclass CTC_Ridgewood {\n  /**\n   * constructor()\n   * @summary The constructor for the CTC_Ridgewood class\n   * \n   * @description This will initialize all the member variables when the program is started\n   */\n  constructor() {\n    // Bools for the switches\n    this.sw_1 = false;\n    this.sw_3 = false;\n    this.sw_5 = false;\n    this.sw_7 = false;\n    this.sw_9 = false; // Bools for the signals\n\n    this.sig_2w_1 = false;\n    this.sig_2w_2 = false;\n    this.sig_4w = false;\n    this.sig_6w = false;\n    this.sig_2e = false;\n    this.sig_4e = false;\n    this.sig_6e = false; // Track routes\n\n    this.route_w_trk_3 = null;\n    this.route_w_trk_4 = null;\n    this.route_w_trk_1 = null;\n    this.route_w_trk_2 = null;\n    this.route_e_trk_3 = null;\n    this.route_e_trk_1 = null;\n    this.route_e_trk_2 = null; // Used for routing and occupying the tracks \n\n    this.routed_trk_1 = false;\n    this.routed_trk_2 = false;\n    this.routed_trk_3 = false;\n    this.occupied_trk_1 = false;\n    this.occupied_trk_2 = false;\n    this.occupied_trk_3 = false;\n    this.trk_1_time = null;\n    this.trk_2_time = null;\n    this.trk_3_time = null;\n  } // ---- END constructor() ----\n\n  /**\n   * get_train_route()\n   * @summary Returns the route for the train at a given track\n   * \n   * @param direction, The direction the train is moving\n   * @param track, The Track number of the train \n   */\n\n\n  get_train_route(direction, track) {\n    if (direction === \"WEST\") {\n      if (track === \"1\") {\n        return this.route_w_trk_1;\n      } else if (track === \"2\") {\n        return this.route_w_trk_2;\n      } else if (track === \"3\") {\n        return this.route_w_trk_3;\n      } else {\n        return this.route_w_trk_4;\n      }\n    } else {\n      if (track === \"1\") {\n        return this.route_e_trk_1;\n      } else if (track === \"2\") {\n        return this.route_e_trk_2;\n      } else {\n        return this.route_e_trk_3;\n      }\n    }\n  } // ---- END get_train_route() ----\n\n  /**\n   * click_sig_2w_1()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   */\n\n\n  click_sig_2w1(next_block_1, next_block_2, next_block_3) {\n    if (this.sw_3 || this.sw_7 || this.sw_9) {\n      return;\n    } else if (!this.sw_1 && !this.sw_5) {\n      if (this.sig_2w_1) {\n        this.route_w_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w_1 = false;\n        return;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_1_1__|__1_wc_ridgewood\";\n        this.routed_trk_1 = true;\n        this.sig_2w_1 = true;\n      }\n    } else if (this.sw_1 && !this.sw_5) {\n      if (this.sig_2w_1) {\n        this.route_w_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w_1 = false;\n        return;\n      } else {\n        if (next_block_3 === Occupied || next_block_3 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_1_3__|__3_wc_ridgewood\";\n        this.routed_trk_1 = true;\n        this.sig_2w_1 = true;\n      }\n    } else if (!this.sw_1 && this.sw_5) {\n      if (this.sig_2w_1) {\n        this.route_w_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w_1 = false;\n        return;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_1_2__|__2_wc_ridgewood\";\n        this.routed_trk_1 = true;\n        this.sig_2w_1 = true;\n      }\n    }\n  } // ---- END click_sig_2w_1() ----\n\n  /**\n   * click_sig_2w_2()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   */\n\n\n  click_sig_2w2(next_block_1, next_block_2, next_block_3) {\n    if (this.sw_3 || this.sw_7) {\n      return;\n    }\n\n    if (this.sw_9) {\n      if (!this.sw_1 && !this.sw_5) {\n        if (this.sig_2w_2) {\n          this.route_w_trk_4 = null;\n          this.routed_trk_1 = false;\n          this.sig_2w_2 = false;\n          return;\n        } else {\n          if (next_block_1 === Occupied || next_block_1 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_w_trk_4 = \"W_4_1__|__1_wc_ridgewood\";\n          this.routed_trk_1 = true;\n          this.sig_2w_2 = true;\n        }\n      } else if (this.sw_1 && !this.sw_5) {\n        if (this.sig_2w_2) {\n          this.route_w_trk_4 = null;\n          this.routed_trk_1 = false;\n          this.sig_2w_2 = false;\n          return;\n        } else {\n          if (next_block_3 === Occupied || next_block_3 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_w_trk_4 = \"W_4_3__|__3_wc_ridgewood\";\n          this.routed_trk_1 = true;\n          this.sig_2w_2 = true;\n        }\n      } else if (!this.sw_1 && this.sw_5) {\n        if (this.sig_2w_2) {\n          this.route_w_trk_4 = null;\n          this.routed_trk_1 = false;\n          this.sig_2w_2 = false;\n          return;\n        } else {\n          if (next_block_2 === Occupied || next_block_2 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_w_trk_4 = \"W_4_2__|__2_wc_ridgewood\";\n          this.routed_trk_1 = true;\n          this.sig_2w_2 = true;\n        }\n      }\n    }\n  } // ---- END click_sig_2w_2() ----\n\n  /**\n   * click_sig_4w()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   */\n\n\n  click_sig_4w(next_block_1, next_block_2, next_block_3) {\n    if (this.sw_5) {\n      return;\n    }\n\n    if (!this.sw_3) {\n      if (this.sig_4w) {\n        this.route_w_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4w = false;\n        return;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_2 = \"W_2_2__|__2_wc_ridgewood\";\n        this.routed_trk_2 = true;\n        this.sig_4w = true;\n      }\n    } else if (!this.sw_1 && this.sw_3) {\n      if (this.sig_4w) {\n        this.route_w_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4w = false;\n        return;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_2 = \"W_2_1__|__1_wc_ridgewood\";\n        this.routed_trk_2 = true;\n        this.sig_4w = true;\n      }\n    } else if (this.sw_1 && this.sw_3) {\n      if (this.sig_4w) {\n        this.route_w_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4w = false;\n        return;\n      } else {\n        if (next_block_3 === Occupied || next_block_3 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_2 = \"W_2_3__|__3_wc_ridgewood\";\n        this.routed_trk_2 = true;\n        this.sig_4w = true;\n      }\n    }\n  } // ---- END click_sig_4w() ----\n\n  /**\n   * click_sig_6w()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   */\n\n\n  click_sig_6w(next_block_1, next_block_2, next_block_3) {\n    if (this.sw_1) {\n      return;\n    } else if (!this.sw_7) {\n      if (this.sig_6w) {\n        this.route_w_trk_3 = null;\n        this.routed_trk_3 = false;\n        this.sig_6w = false;\n        return;\n      } else {\n        if (next_block_3 === Occupied || next_block_3 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_3 = \"W_3_3__|__3_wc_ridgewood\";\n        this.routed_trk_3 = true;\n        this.sig_6w = true;\n      }\n    } else if (this.sw_7 && !this.sw_5 && !this.sw_3) {\n      if (this.sig_6w) {\n        this.route_w_trk_3 = null;\n        this.routed_trk_3 = false;\n        this.sig_6w = false;\n        return;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_3 = \"W_3_1__|__1_wc_ridgewood\";\n        this.routed_trk_3 = true;\n        this.sig_6w = true;\n      }\n    } else if (this.sw_7 && this.sw_5 && !this.sw_3) {\n      if (this.sig_6w) {\n        this.route_w_trk_3 = null;\n        this.routed_trk_3 = false;\n        this.sig_6w = false;\n        return;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_3 = \"W_3_2__|__2_wc_ridgewood\";\n        this.routed_trk_3 = true;\n        this.sig_6w = true;\n      }\n    }\n  } // ---- END click_sig_6w() ----\n\n  /**\n   * click_sig_2e()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   * @param next_block_4, The next block on Track #4\n   */\n\n\n  click_sig_2e(next_block_1, next_block_2, next_block_3, next_block_4) {\n    if (this.sw_1 || this.sw_5) {\n      return;\n    } else if (!this.sw_3 && !this.sw_7 && !this.sw_9) {\n      if (this.sig_2e) {\n        this.route_e_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2e = false;\n        return;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_1__|__1_ridgewood_suscon\";\n        this.routed_trk_1 = true;\n        this.sig_2e = true;\n      }\n    } else if (this.sw_3 && !this.sw_7 && !this.sw_9) {\n      if (this.sig_2e) {\n        this.route_e_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2e = false;\n        return;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_2__|__2_ridgewood_suscon\";\n        this.routed_trk_1 = true;\n        this.sig_2e = true;\n      }\n    } else if (!this.sw_3 && this.sw_7 && !this.sw_9) {\n      if (this.sig_2e) {\n        this.route_e_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2e = false;\n        return;\n      } else {\n        if (next_block_3 === Occupied || next_block_3 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_3__|__1_ridgewood_bt\";\n        this.routed_trk_1 = true;\n        this.sig_2e = true;\n      }\n    } else if (!this.sw_3 && !this.sw_7 && this.sw_9) {\n      if (this.sig_2e) {\n        this.route_e_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2e = false;\n        return;\n      } else {\n        if (next_block_4 === Occupied || next_block_4 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_4__|__2_ridgewood_bt\";\n        this.routed_trk_1 = true;\n        this.sig_2e = true;\n      }\n    }\n  } // ---- END click_sig_2e() ----\n\n  /**\n   * click_sig_4e()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   * @param next_block_4, The next block on Track #4\n   */\n\n\n  click_sig_4e(next_block_1, next_block_2, next_block_3, next_block_4) {\n    if (this.sw_3) {\n      return;\n    } else if (!this.sw_5) {\n      if (this.sig_4e) {\n        this.route_e_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4e = false;\n        return;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_2__|__2_ridgewood_suscon\";\n        this.routed_trk_2 = true;\n        this.sig_4e = true;\n      }\n    } else if (this.sw_5 && !this.sw_7 && !this.sw_9) {\n      if (this.sig_4e) {\n        this.route_e_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4e = false;\n        return;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_1__|__1_ridgewood_suscon\";\n        this.routed_trk_2 = true;\n        this.sig_4e = true;\n      }\n    } else if (this.sw_5 && this.sw_7) {\n      if (this.sig_4e) {\n        this.route_e_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4e = false;\n        return;\n      } else {\n        if (next_block_3 === Occupied || next_block_3 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_3__|__1_ridgewood_bt\";\n        this.routed_trk_2 = true;\n        this.sig_4e = true;\n      }\n    } else if (this.sw_5 && !this.sw_7 && this.sw_9) {\n      if (this.sig_4e) {\n        this.route_e_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4e = false;\n        return;\n      } else {\n        if (next_block_4 === Occupied || next_block_4 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_4__|__2_ridgewood_bt\";\n        this.routed_trk_2 = true;\n        this.sig_4e = true;\n      }\n    }\n  } // ---- END click_sig_4e() ----\n\n  /**\n   * click_sig_6e()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   * @param next_block_4, The next block on Track #4\n   */\n\n\n  click_sig_6e(next_block_1, next_block_2, next_block_3, next_block_4) {\n    if (this.sw_7) {\n      return;\n    } else if (!this.sw_1) {\n      if (this.sig_6e) {\n        this.route_e_trk_3 = null;\n        this.routed_trk_3 = false;\n        this.sig_6e = false;\n        return;\n      } else {\n        if (next_block_3 === Occupied || next_block_3 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_3 = \"E_3_3__|__1_ridgewood_bt\";\n        this.routed_trk_3 = true;\n        this.sig_6e = true;\n      }\n    } else if (this.sw_1 && !this.sw_3 && !this.sw_5 && !this.sw_7 && !this.sw_9) {\n      if (this.sig_6e) {\n        this.route_e_trk_3 = null;\n        this.routed_trk_3 = false;\n        this.sig_6e = false;\n        return;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_3 = \"E_3_1__|__1_ridgewood_suscon\";\n        this.routed_trk_3 = true;\n        this.sig_6e = true;\n      }\n    } else if (this.sw_1 && !this.sw_3 && !this.sw_5 && !this.sw_7 && this.sw_9) {\n      if (this.sig_6e) {\n        this.route_e_trk_3 = null;\n        this.routed_trk_3 = false;\n        this.sig_6e = false;\n        return;\n      } else {\n        if (next_block_4 === Occupied || next_block_4 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_3 = \"E_3_4__|__2_ridgewood_bt\";\n        this.routed_trk_3 = true;\n        this.sig_6e = true;\n      }\n    } else if (this.sw_1 && this.sw_3 && !this.sw_5) {\n      if (this.sig_6e) {\n        this.route_e_trk_3 = null;\n        this.routed_trk_3 = false;\n        this.sig_6e = false;\n        return;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_3 = \"E_3_2__|__2_ridgewood_suscon\";\n        this.routed_trk_3 = true;\n        this.sig_6e = true;\n      }\n    }\n  } // ---- END click_sig_6e() ----\n\n  /**\n   * get_routes()\n   * @summary Gets all the routes from the interlocking\n   * \n   * @returns An Array holding every route variable from the interlocking\n   */\n\n\n  get_routes() {\n    let routes = [this.route_e_trk_2, this.route_e_trk_3, this.route_w_trk_2, this.route_w_trk_4, this.route_w_trk_3, this.route_e_trk_1, this.route_w_trk_1];\n    return routes;\n  } // ---- END get_routes() ----\n\n  /**\n   * set_trk_1_occupied()\n   * @summary Sets track #1 as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_trk_1_occupied(n_state) {\n    if (n_state === true) {\n      this.occupied_trk_1 = n_state;\n      this.routed_trk_1 = false;\n      this.trk_1_time = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_trk_1_occupied() ----\n\n  /**\n   * set_trk_2_occupied()\n   * @summary Sets track #2 as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_trk_2_occupied(n_state) {\n    if (n_state === true) {\n      this.occupied_trk_2 = n_state;\n      this.routed_trk_2 = false;\n      this.trk_2_time = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_trk_2_occupied() ----\n\n  /**\n   * set_trk_3_occupied()\n   * @summary Sets track #3 as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_trk_3_occupied(n_state) {\n    if (n_state === true) {\n      this.occupied_trk_3 = n_state;\n      this.routed_trk_3 = false;\n      this.trk_3_time = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_trk_3_occupied() ----\n\n  /**\n   * can_clear()\n   * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n   * \n   * @description Check both track if a train has been in the interlocking for more then 4 seconds, if so it\n   * clears that track\n   */\n\n\n  can_clear() {\n    // Get the current time\n    let current_time = new Date().getTime() / 1000; // Track #1\n\n    if (current_time - this.trk_1_time > 4 && current_time - this.trk_1_time < 100000) {\n      this.sig_2w_1 = false;\n      this.sig_2w_2 = false;\n      this.sig_2e = false;\n      this.route_w_trk_1 = null;\n      this.route_w_trk_4 = null;\n      this.route_e_trk_1 = null;\n      this.routed_trk_1 = false;\n      this.occupied_trk_1 = false;\n      this.trk_1_time = null;\n    } // Track #2\n\n\n    if (current_time - this.trk_2_time > 4 && current_time - this.trk_2_time < 100000) {\n      this.sig_4w = false;\n      this.sig_4e = false;\n      this.route_w_trk_2 = null;\n      this.route_e_trk_2 = null;\n      this.routed_trk_2 = false;\n      this.occupied_trk_2 = false;\n      this.trk_2_time = null;\n    } // Track #3\n\n\n    if (current_time - this.trk_3_time > 4 && current_time - this.trk_3_time < 100000) {\n      this.sig_6w = false;\n      this.sig_6e = false;\n      this.route_w_trk_3 = null;\n      this.route_e_trk_3 = null;\n      this.routed_trk_3 = false;\n      this.occupied_trk_3 = false;\n      this.trk_3_time = null;\n    }\n  } // ---- END can_clear() ----\n\n  /**\n   * @summary Function to throw switch #1 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_1() {\n    if (this.sw_1 === false) {\n      this.sw_1 = true;\n    } else {\n      this.sw_1 = false;\n    }\n  } // ---- END throw_sw_1() ----\n\n  /**\n   * @summary Funtion to throw switch #3 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_3() {\n    if (this.sw_3 === false) {\n      this.sw_3 = true;\n    } else {\n      this.sw_3 = false;\n    }\n  } // ---- END throw_sw_3() ----\n\n  /**\n   * @summary Funtion to throw switch #5 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_5() {\n    if (this.sw_5 === false) {\n      this.sw_5 = true;\n    } else {\n      this.sw_5 = false;\n    }\n  } // ---- END throw_sw_5() ----\n\n  /**\n   * @summary Funtion to throw switch #7 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_7() {\n    if (this.sw_7 === false) {\n      this.sw_7 = true;\n    } else {\n      this.sw_7 = false;\n    }\n  } // ---- END throw_sw_7() ----\n\n  /**\n   * @summary Funtion to throw switch #9 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_9() {\n    if (this.sw_9 === false) {\n      this.sw_9 = true;\n    } else {\n      this.sw_9 = false;\n    }\n  } // ---- END throw_sw_9() ----\n\n  /**\n   * get_interlocking_status()\n   * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n   * \n   * @description All the information that is returned here is what is needed by the ReactJS Component \n   * for the interlocking that is need to draw the interlocking to the screen\n   * \n   * @returns Object with the status of the interlocking\n   */\n\n\n  get_interlocking_status() {\n    var status = {\n      sw_1: this.sw_1,\n      sw_3: this.sw_3,\n      sw_5: this.sw_5,\n      sw_7: this.sw_7,\n      sw_9: this.sw_9,\n      routed_trk_1: this.routed_trk_1,\n      routed_trk_2: this.routed_trk_2,\n      routed_trk_3: this.routed_trk_3,\n      occupied_trk_1: this.occupied_trk_1,\n      occupied_trk_2: this.occupied_trk_2,\n      occupied_trk_3: this.occupied_trk_3,\n      routes: this.get_routes()\n    };\n    return status;\n  } // ---- END get_interlocking_status() ----\n\n\n} // This is required when using ReactJS\n\n\nexport default CTC_Ridgewood;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Interlockings/Main_Line/ctc_ridgewood.js"],"names":["Empty","Lined","Occupied","CTC_Ridgewood","constructor","sw_1","sw_3","sw_5","sw_7","sw_9","sig_2w_1","sig_2w_2","sig_4w","sig_6w","sig_2e","sig_4e","sig_6e","route_w_trk_3","route_w_trk_4","route_w_trk_1","route_w_trk_2","route_e_trk_3","route_e_trk_1","route_e_trk_2","routed_trk_1","routed_trk_2","routed_trk_3","occupied_trk_1","occupied_trk_2","occupied_trk_3","trk_1_time","trk_2_time","trk_3_time","get_train_route","direction","track","click_sig_2w1","next_block_1","next_block_2","next_block_3","alert","click_sig_2w2","click_sig_4w","click_sig_6w","click_sig_2e","next_block_4","click_sig_4e","click_sig_6e","get_routes","routes","set_trk_1_occupied","n_state","Date","getTime","console","log","set_trk_2_occupied","set_trk_3_occupied","can_clear","current_time","throw_sw_1","throw_sw_3","throw_sw_5","throw_sw_7","throw_sw_9","get_interlocking_status","status"],"mappings":"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","sourcesContent":["/**\n * @file ctc_ridgewood.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the Ridgewood Junction Interlocking\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n\n\n/**\n * Class is the Backend for the Ridgewood Junction Interlocking This class is what controlls the Ridgewood Junction Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, and the ReactJS Component \n * class gets information from this class to display the correct status of the interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * @member sw_5 -> Bool if Switch #5 is Reveresed or Not\n * @member sw_7 -> Bool if Switch #7 is Reveresed or Not\n * @member sw_9 -> Bool if Switch #9 is Reveresed or Not\n * \n * @member sig_2w_1 -> Bool if Signal #2w-1 is Lined or Not\n * @member sig_2w_2 -> Bool if Signal #2w-2 is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_6w -> Bool if Signal #6w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * @member sig_6e -> Bool if Signal #6e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_w_trk_3 = The west bound route for track #3\n * @member route_w_trk_4 = The west bound route for track #4\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * @member route_e_trk_3 = The east bound route for track #3\n * \n * @member routed_trk_1 = Bool if track #1 is routed or not\n * @member routed_trk_2 = Bool if track #2 is routed or not\n * @member routed_trk_3 = Bool if track #3 is routed or not\n * @member trk_1_time = The time track #1 was occupied, used to know when to clear the route\n * @member trk_2_time = The time track #2 was occupied, used to know when to clear the route\n * @member trk_3_time = The time track #3 was occupied, used to know when to clear the route\n * @member trk_1_occupied = Bool if track #1 is occupied or not\n * @member trk_2_occupied = Bool if track #2 is occupied or not\n * @member trk_3_occupied = Bool if track #3 is occupied or not\n */\nclass CTC_Ridgewood {\n    /**\n     * constructor()\n     * @summary The constructor for the CTC_Ridgewood class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */\n    constructor() { \n        // Bools for the switches\n        this.sw_1 = false;\n        this.sw_3 = false;\n        this.sw_5 = false;\n        this.sw_7 = false;\n        this.sw_9 = false;\n        // Bools for the signals\n        this.sig_2w_1 = false;\n        this.sig_2w_2 = false;\n        this.sig_4w = false;\n        this.sig_6w = false;\n        this.sig_2e = false;\n        this.sig_4e = false;\n        this.sig_6e = false;\n        // Track routes\n        this.route_w_trk_3 = null;\n        this.route_w_trk_4 = null;\n        this.route_w_trk_1 = null;\n        this.route_w_trk_2 = null;\n        this.route_e_trk_3 = null;\n        this.route_e_trk_1 = null;\n        this.route_e_trk_2 = null;\n        // Used for routing and occupying the tracks \n        this.routed_trk_1 = false;\n        this.routed_trk_2 = false;\n        this.routed_trk_3 = false;\n        this.occupied_trk_1 = false;\n        this.occupied_trk_2 = false;\n        this.occupied_trk_3 = false;\n        this.trk_1_time = null;\n        this.trk_2_time = null;\n        this.trk_3_time = null;\n    }\n    // ---- END constructor() ----\n\n    /**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */\n    get_train_route(direction, track) {\n        if (direction === \"WEST\") {\n            if (track === \"1\") {\n                return this.route_w_trk_1;\n            }\n            else if (track === \"2\") {\n                return this.route_w_trk_2;\n            }\n            else if (track === \"3\") {\n                return this.route_w_trk_3;\n            }\n            else {\n                return this.route_w_trk_4;\n            }\n        }\n        else {\n            if (track === \"1\") {\n                return this.route_e_trk_1;\n            }\n            else if (track === \"2\") {\n                return this.route_e_trk_2;\n            }\n            else {\n                return this.route_e_trk_3;\n            }\n        }\n    }\n    // ---- END get_train_route() ----\n\n    /**\n     * click_sig_2w_1()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     */\n    click_sig_2w1(next_block_1, next_block_2, next_block_3) {\n        if (this.sw_3 || this.sw_7 || this.sw_9) {\n            return;\n        }\n        else if (!this.sw_1 && !this.sw_5) {\n            if (this.sig_2w_1) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w_1 = false;\n                return;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_1__|__1_wc_ridgewood\";\n                this.routed_trk_1 = true;\n                this.sig_2w_1 = true;\n            }\n        }\n        else if (this.sw_1 && !this.sw_5) {\n            if (this.sig_2w_1) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w_1 = false;\n                return;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_3__|__3_wc_ridgewood\";\n                this.routed_trk_1 = true;\n                this.sig_2w_1 = true;\n            }\n        }\n        else if (!this.sw_1 && this.sw_5) {\n            if (this.sig_2w_1) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w_1 = false;\n                return;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_2__|__2_wc_ridgewood\";\n                this.routed_trk_1 = true;\n                this.sig_2w_1 = true;\n            }\n        }\n    }\n    // ---- END click_sig_2w_1() ----\n\n    /**\n     * click_sig_2w_2()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     */\n    click_sig_2w2(next_block_1, next_block_2, next_block_3) {\n        if (this.sw_3 || this.sw_7) {\n            return;\n        }\n        if (this.sw_9) {\n            if (!this.sw_1 && !this.sw_5) {\n                if (this.sig_2w_2) {\n                    this.route_w_trk_4 = null;\n                    this.routed_trk_1 = false;\n                    this.sig_2w_2 = false;\n                    return;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_4 = \"W_4_1__|__1_wc_ridgewood\";\n                    this.routed_trk_1 = true;\n                    this.sig_2w_2 = true;\n                }\n            }\n            else if (this.sw_1 && !this.sw_5) {\n                if (this.sig_2w_2) {\n                    this.route_w_trk_4 = null;\n                    this.routed_trk_1 = false;\n                    this.sig_2w_2 = false;\n                    return;\n                }\n                else {\n                    if (next_block_3 === Occupied || next_block_3 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_4 = \"W_4_3__|__3_wc_ridgewood\";\n                    this.routed_trk_1 = true;\n                    this.sig_2w_2 = true;\n                }\n            }\n            else if (!this.sw_1 && this.sw_5) {\n                if (this.sig_2w_2) {\n                    this.route_w_trk_4 = null;\n                    this.routed_trk_1 = false;\n                    this.sig_2w_2 = false;\n                    return;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_4 = \"W_4_2__|__2_wc_ridgewood\";\n                    this.routed_trk_1 = true;\n                    this.sig_2w_2 = true;\n                }\n            }\n        }\n    }\n    // ---- END click_sig_2w_2() ----\n\n    /**\n     * click_sig_4w()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     */\n    click_sig_4w(next_block_1, next_block_2, next_block_3) {\n        if (this.sw_5) {\n            return;\n        }\n        if (!this.sw_3) {\n            if (this.sig_4w) {\n                this.route_w_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4w = false;\n                return;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_2 = \"W_2_2__|__2_wc_ridgewood\";\n                this.routed_trk_2 = true;\n                this.sig_4w = true;\n            }\n        }\n        else if (!this.sw_1 && this.sw_3) {\n            if (this.sig_4w) {\n                this.route_w_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4w = false;\n                return;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_2 = \"W_2_1__|__1_wc_ridgewood\";\n                this.routed_trk_2 = true;\n                this.sig_4w = true;\n            }\n        }\n        else if (this.sw_1 && this.sw_3) {\n            if (this.sig_4w) {\n                this.route_w_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4w = false;\n                return;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_2 = \"W_2_3__|__3_wc_ridgewood\";\n                this.routed_trk_2 = true;\n                this.sig_4w = true;\n            }\n        }\n    }\n    // ---- END click_sig_4w() ----\n\n    /**\n     * click_sig_6w()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     */\n    click_sig_6w(next_block_1, next_block_2, next_block_3) {\n        if (this.sw_1) {\n            return;\n        }\n        else if (!this.sw_7) {\n            if (this.sig_6w) {\n                this.route_w_trk_3 = null;\n                this.routed_trk_3 = false;\n                this.sig_6w = false;\n                return;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_3 = \"W_3_3__|__3_wc_ridgewood\";\n                this.routed_trk_3 = true;\n                this.sig_6w = true;\n            }\n        }\n        else if (this.sw_7 && !this.sw_5 && !this.sw_3) {\n            if (this.sig_6w) {\n                this.route_w_trk_3 = null;\n                this.routed_trk_3 = false;\n                this.sig_6w = false;\n                return;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_3 = \"W_3_1__|__1_wc_ridgewood\";\n                this.routed_trk_3 = true;\n                this.sig_6w = true;\n            }\n        }\n        else if (this.sw_7 && this.sw_5 && !this.sw_3) {\n            if (this.sig_6w) {\n                this.route_w_trk_3 = null;\n                this.routed_trk_3 = false;\n                this.sig_6w = false;\n                return;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_3 = \"W_3_2__|__2_wc_ridgewood\";\n                this.routed_trk_3 = true;\n                this.sig_6w = true;\n            }\n        }\n    }\n    // ---- END click_sig_6w() ----\n\n    /**\n     * click_sig_2e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     * @param next_block_4, The next block on Track #4\n     */\n    click_sig_2e(next_block_1, next_block_2, next_block_3, next_block_4) {\n        if (this.sw_1 || this.sw_5) {\n            return;\n        }\n        else if (!this.sw_3 && !this.sw_7 && !this.sw_9) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2e = false;\n                return;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_1__|__1_ridgewood_suscon\";\n                this.routed_trk_1 = true;\n                this.sig_2e = true;\n            }\n        }\n        else if (this.sw_3 && !this.sw_7 && !this.sw_9) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2e = false;\n                return;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_2__|__2_ridgewood_suscon\";\n                this.routed_trk_1 = true;\n                this.sig_2e = true;\n            }\n        }\n        else if (!this.sw_3 && this.sw_7 && !this.sw_9) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2e = false;\n                return;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_3__|__1_ridgewood_bt\";\n                this.routed_trk_1 = true;\n                this.sig_2e = true;\n            }\n        }\n        else if (!this.sw_3 && !this.sw_7 && this.sw_9) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2e = false;\n                return;\n            }\n            else {\n                if (next_block_4 === Occupied || next_block_4 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_4__|__2_ridgewood_bt\";\n                this.routed_trk_1 = true;\n                this.sig_2e = true;\n            }\n        }\n    }\n    // ---- END click_sig_2e() ----\n\n    /**\n     * click_sig_4e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     * @param next_block_4, The next block on Track #4\n     */\n    click_sig_4e(next_block_1, next_block_2, next_block_3, next_block_4) {\n        if (this.sw_3) {\n            return;\n        }\n        else if (!this.sw_5) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n                return;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_2__|__2_ridgewood_suscon\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n        else if (this.sw_5 && !this.sw_7 && !this.sw_9) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n                return;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_1__|__1_ridgewood_suscon\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n        else if (this.sw_5 && this.sw_7) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n                return;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_3__|__1_ridgewood_bt\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n        else if (this.sw_5 && !this.sw_7 && this.sw_9) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n                return;\n            }\n            else {\n                if (next_block_4 === Occupied || next_block_4 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_4__|__2_ridgewood_bt\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n    }\n    // ---- END click_sig_4e() ----\n\n    /**\n     * click_sig_6e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     * @param next_block_4, The next block on Track #4\n     */\n    click_sig_6e(next_block_1, next_block_2, next_block_3, next_block_4) {\n        if (this.sw_7) {\n            return;\n        }\n        else if (!this.sw_1) {\n            if (this.sig_6e) {\n                this.route_e_trk_3 = null;\n                this.routed_trk_3 = false;\n                this.sig_6e = false;\n                return;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_3 = \"E_3_3__|__1_ridgewood_bt\";\n                this.routed_trk_3 = true;\n                this.sig_6e = true;\n            }\n        }\n        else if (this.sw_1 && !this.sw_3 && !this.sw_5 && !this.sw_7 && !this.sw_9) {\n            if (this.sig_6e) {\n                this.route_e_trk_3 = null;\n                this.routed_trk_3 = false;\n                this.sig_6e = false;\n                return;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_3 = \"E_3_1__|__1_ridgewood_suscon\";\n                this.routed_trk_3 = true;\n                this.sig_6e = true;\n            }\n        }\n        else if (this.sw_1 && !this.sw_3 && !this.sw_5 && !this.sw_7 && this.sw_9) {\n            if (this.sig_6e) {\n                this.route_e_trk_3 = null;\n                this.routed_trk_3 = false;\n                this.sig_6e = false;\n                return;\n            }\n            else {\n                if (next_block_4 === Occupied || next_block_4 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_3 = \"E_3_4__|__2_ridgewood_bt\";\n                this.routed_trk_3 = true;\n                this.sig_6e = true;\n            }\n        }\n        else if (this.sw_1 && this.sw_3 && !this.sw_5) {\n            if (this.sig_6e) {\n                this.route_e_trk_3 = null;\n                this.routed_trk_3 = false;\n                this.sig_6e = false;\n                return;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_3 = \"E_3_2__|__2_ridgewood_suscon\";\n                this.routed_trk_3 = true;\n                this.sig_6e = true;\n            }\n        }\n    }\n    // ---- END click_sig_6e() ----\n\n    /**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */\n    get_routes() {\n        let routes = [ \n            this.route_e_trk_2, this.route_e_trk_3,\n            this.route_w_trk_2, this.route_w_trk_4, this.route_w_trk_3, \n            this.route_e_trk_1, this.route_w_trk_1\n        ];\n\n        return routes;\n    }\n    // ---- END get_routes() ----\n\n    /**\n     * set_trk_1_occupied()\n     * @summary Sets track #1 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_trk_1_occupied(n_state) {\n        if (n_state === true) {\n            this.occupied_trk_1 = n_state;\n            this.routed_trk_1 = false;\n            this.trk_1_time = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_trk_1_occupied() ----\n\n    /**\n     * set_trk_2_occupied()\n     * @summary Sets track #2 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_trk_2_occupied(n_state) {\n        if (n_state === true) {\n            this.occupied_trk_2 = n_state;\n            this.routed_trk_2 = false;\n            this.trk_2_time = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_trk_2_occupied() ----\n\n    /**\n     * set_trk_3_occupied()\n     * @summary Sets track #3 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_trk_3_occupied(n_state) {\n        if (n_state === true) {\n            this.occupied_trk_3 = n_state;\n            this.routed_trk_3 = false;\n            this.trk_3_time = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_trk_3_occupied() ----\n\n    /**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check both track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */\n    can_clear() {\n        // Get the current time\n        let current_time = new Date().getTime() / 1000;\n        // Track #1\n        if (current_time - this.trk_1_time > 4 && current_time - this.trk_1_time< 100000) {\n            this.sig_2w_1 = false;\n            this.sig_2w_2 = false;\n            this.sig_2e = false;\n\n            this.route_w_trk_1 = null;\n            this.route_w_trk_4 = null;\n            this.route_e_trk_1 = null;\n            this.routed_trk_1 = false;\n\n            this.occupied_trk_1 = false;\n            this.trk_1_time = null;\n        }\n        // Track #2\n        if (current_time - this.trk_2_time > 4 && current_time - this.trk_2_time< 100000) {\n            this.sig_4w = false;\n            this.sig_4e = false;\n\n            this.route_w_trk_2 = null;\n            this.route_e_trk_2 = null;\n            this.routed_trk_2 = false;\n\n            this.occupied_trk_2 = false;\n            this.trk_2_time = null;\n        }\n        // Track #3\n        if (current_time - this.trk_3_time > 4 && current_time - this.trk_3_time< 100000) {\n            this.sig_6w = false;\n            this.sig_6e = false;\n\n            this.route_w_trk_3 = null;\n            this.route_e_trk_3 = null;\n            this.routed_trk_3 = false;\n\n            this.occupied_trk_3 = false;\n            this.trk_3_time = null;\n        }\n    }\n    // ---- END can_clear() ----\n\n    /**\n     * @summary Function to throw switch #1 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_1() {\n        if (this.sw_1 === false) {\n            this.sw_1 = true;\n        }\n        else {\n            this.sw_1 = false;\n        }\n    }\n    // ---- END throw_sw_1() ----\n\n    /**\n     * @summary Funtion to throw switch #3 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_3() {\n        if (this.sw_3 === false) {\n            this.sw_3 = true;\n        }\n        else {\n            this.sw_3 = false;\n        }\n    }\n    // ---- END throw_sw_3() ----\n\n    /**\n     * @summary Funtion to throw switch #5 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_5() {\n        if (this.sw_5 === false) {\n            this.sw_5 = true;\n        }\n        else {\n            this.sw_5 = false;\n        }\n    }\n    // ---- END throw_sw_5() ----\n\n    /**\n     * @summary Funtion to throw switch #7 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_7() {\n        if (this.sw_7 === false) {\n            this.sw_7 = true;\n        }\n        else {\n            this.sw_7 = false;\n        }\n    }\n    // ---- END throw_sw_7() ----\n\n    /**\n     * @summary Funtion to throw switch #9 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_9() {\n        if (this.sw_9 === false) {\n            this.sw_9 = true;\n        }\n        else {\n            this.sw_9 = false;\n        }\n    }\n    // ---- END throw_sw_9() ----\n\n    /**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */\n    get_interlocking_status() {\n        var status = {\n            sw_1: this.sw_1,\n            sw_3: this.sw_3,\n            sw_5: this.sw_5,\n            sw_7: this.sw_7,\n            sw_9: this.sw_9,\n            routed_trk_1: this.routed_trk_1,\n            routed_trk_2: this.routed_trk_2,\n            routed_trk_3: this.routed_trk_3,\n            occupied_trk_1: this.occupied_trk_1,\n            occupied_trk_2: this.occupied_trk_2,\n            occupied_trk_3: this.occupied_trk_3,\n            routes: this.get_routes()\n        };\n\n        return status;\n    }\n    // ---- END get_interlocking_status() ----\n}\n\n// This is required when using ReactJS\nexport default CTC_Ridgewood;"]},"metadata":{},"sourceType":"module"}