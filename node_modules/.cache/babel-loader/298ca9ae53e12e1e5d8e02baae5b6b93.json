{"ast":null,"code":"/**\n * @file ctc_harriman.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the CP Harriman Interlocking\n */\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupy = '#eb3323';\n/**\n * Class is the Backend for the CP Harriman Interlocking This class is what controlls the CP Harriman Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of \n * the interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_21 -> Bool if Switch #21 is Reveresed or Not\n * @member sw_32 -> Bool if Switch #32 is Reveresed or Not\n * \n * @member sig_1w -> Bool if Signal #1w is Lined or Not\n * @member sig_1e -> Bool if Signal #1e is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_3e -> Bool if Signal #3e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * @member route_e_trk_3 = The east bound route for track #3\n * \n * @member time_occupied = The time the track was occupied, used to know when to clear the route\n * @member int_occupied = Bool if the track is occupied or not\n */\n\nclass CTC_Harriman {\n  /**\n   * constructor()\n   * @summary The constructor for the CTC_Harriman class\n   * \n   * @description This will initialize all the member variables when the program is started\n   */\n  constructor() {\n    // Bools for the switches\n    this.sw_21 = false;\n    this.sw_32 = false; // Bools for the signals\n\n    this.sig_1w = false;\n    this.sig_1e = false;\n    this.sig_2e = false;\n    this.sig_3e = false; // Track routes\n\n    this.route_w_trk_1 = null;\n    this.route_e_trk_1 = null;\n    this.route_e_trk_2 = null;\n    this.route_e_trk_3 = null; // Used for routing and occupying the tracks \n\n    this.int_occupied = false;\n    this.time_occupied = null;\n  } // ---- END constructor() ----\n\n  /**\n   * get_train_route()\n   * @summary Returns the route for the train at a given track\n   * \n   * @param direction, The direction the train is moving\n   * @param track, The Track number of the train \n   */\n\n\n  get_train_route(direction, track) {\n    if (direction === \"WEST\") {\n      return this.route_w_trk_1;\n    } else {\n      if (track === \"1\") {\n        return this.route_e_trk_1;\n      } else if (track === \"2\") {\n        return this.route_e_trk_2;\n      } else {\n        return this.route_e_trk_3;\n      }\n    }\n  } // ---- END get_train_route() ----\n\n  /**\n   * click_sig_2w()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   */\n\n\n  click_sig_1w(next_block_1, next_block_2, next_block_3) {\n    if (!this.sw_32 && !this.sw_21) {\n      if (this.sig_1w) {\n        this.route_w_trk_1 = null;\n        this.sig_1w = false;\n      } else {\n        if (next_block_1 === Occupy || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_1_1__|__1_valley_harriman\";\n        this.sig_1w = true;\n      }\n    } else if (this.sw_32) {\n      if (this.sig_1w) {\n        this.route_w_trk_1 = null;\n        this.sig_1w = false;\n      } else {\n        if (next_block_3 === Occupy || next_block_3 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_1_3__|__3_industrial_harriman\";\n        this.sig_1w = true;\n      }\n    } else if (!this.sw_32 && this.sw_21) {\n      if (this.sig_1w) {\n        this.route_w_trk_1 = null;\n        this.sig_1w = false;\n      } else {\n        if (next_block_2 === Occupy || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_1_2__|__2_valley_harriman\";\n        this.sig_1w = true;\n      }\n    }\n  } // ---- END click_sig_1w() ----\n\n  /**\n   * click_sig_1e()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   */\n\n\n  click_sig_1e(next_block_1) {\n    if (this.sw_21 || this.sw_32) {\n      return;\n    } else {\n      if (this.sig_1e) {\n        this.route_e_trk_1 = null;\n        this.sig_1e = false;\n      } else {\n        if (next_block_1 === Occupy || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_1__|__1_harriman_sterling\";\n        this.sig_1e = true;\n      }\n    }\n  } // ---- END click_sig_1e() ----\n\n  /**\n   * click_sig_2e()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   */\n\n\n  click_sig_2e(next_block_1) {\n    if (!this.sw_21) {\n      return;\n    } else {\n      if (this.sig_2e) {\n        this.route_e_trk_2 = null;\n        this.sig_2e = false;\n      } else {\n        if (next_block_1 === Occupy || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_1__|__1_harriman_sterling\";\n        this.sig_2e = true;\n      }\n    }\n  } // ---- END click_sig_2e() ----\n\n  /**\n   * click_sig_3e()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   */\n\n\n  click_sig_3e(next_block_1) {\n    if (!this.sw_32) {\n      return;\n    } else {\n      if (this.sig_3e) {\n        this.route_e_trk_3 = null;\n        this.sig_3e = false;\n      } else {\n        if (next_block_1 === Occupy || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_3 = \"E_3_1__|__1_harriman_sterling\";\n        this.sig_3e = true;\n      }\n    }\n  } // ---- END click_sig_3e() ----\n\n  /**\n   * set_occupied()\n   * @summary Sets the track as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_occupied(n_state) {\n    if (n_state === true || n_state === false) {\n      this.int_occupied = n_state;\n      this.time_occupied = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_occupied() ----\n\n  /**\n   * can_clear()\n   * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n   * \n   * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n   * clears that track\n   */\n\n\n  can_clear() {\n    // Get current time\n    let current_time = new Date().getTime() / 1000;\n\n    if (current_time - this.time_occupied > 4 && current_time - this.time_occupied < 100000) {\n      this.sig_1w = false;\n      this.sig_1e = false;\n      this.sig_2e = false;\n      this.sig_3e = false;\n      this.route_w_trk_1 = null;\n      this.route_e_trk_1 = null;\n      this.route_e_trk_2 = null;\n      this.route_e_trk_3 = null;\n      this.int_occupied = false;\n      this.time_occupied = null;\n    }\n  }\n  /**\n      * @summary Funtion to throw switch #21 in the interlocking\n      * \n      * The function sets the status of the switch, whether it is is the normal possition\n      * of reversed, (True = Reversed / False = Normal)\n      */\n\n\n  throw_sw_21() {\n    if (this.sw_21 === false) {\n      this.sw_21 = true;\n    } else {\n      this.sw_21 = false;\n    }\n  } // ---- END throw_sw_21() ----\n\n  /**\n   * @summary Funtion to throw switch #32 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_32() {\n    if (this.sw_32 === false) {\n      this.sw_32 = true;\n    } else {\n      this.sw_32 = false;\n    }\n  } // ---- END throw_sw_32() ----\n\n  /**\n   * get_routes()\n   * @summary Gets all the routes from the interlocking\n   * \n   * @returns An Array holding every route variable from the interlocking\n   */\n\n\n  get_routes() {\n    let routes = [this.route_w_trk_1, this.route_e_trk_1, this.route_e_trk_2, this.route_e_trk_3];\n    return routes;\n  } // ---- END get_routes() ----\n\n  /**\n   * get_interlocking_status()\n   * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n   * \n   * @description All the information that is returned here is what is needed by the ReactJS Component \n   * for the interlocking that is need to draw the interlocking to the screen\n   * \n   * @returns Object with the status of the interlocking\n   */\n\n\n  get_interlocking_status() {\n    let status = {\n      sw_21: this.sw_21,\n      sw_32: this.sw_32,\n      occupied: this.int_occupied,\n      routes: this.get_routes()\n    };\n    return status;\n  } // ---- END get_interlocking_status() ----\n\n\n} // This is required when using ReactJS\n\n\nexport default CTC_Harriman;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Interlockings/Southern_Tier/ctc_harriman.js"],"names":["Empty","Lined","Occupy","CTC_Harriman","constructor","sw_21","sw_32","sig_1w","sig_1e","sig_2e","sig_3e","route_w_trk_1","route_e_trk_1","route_e_trk_2","route_e_trk_3","int_occupied","time_occupied","get_train_route","direction","track","click_sig_1w","next_block_1","next_block_2","next_block_3","alert","click_sig_1e","click_sig_2e","click_sig_3e","set_occupied","n_state","Date","getTime","console","log","can_clear","current_time","throw_sw_21","throw_sw_32","get_routes","routes","get_interlocking_status","status","occupied"],"mappings":"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","sourcesContent":["/**\n * @file ctc_harriman.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the CP Harriman Interlocking\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupy = '#eb3323';\n\n\n/**\n * Class is the Backend for the CP Harriman Interlocking This class is what controlls the CP Harriman Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of \n * the interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_21 -> Bool if Switch #21 is Reveresed or Not\n * @member sw_32 -> Bool if Switch #32 is Reveresed or Not\n * \n * @member sig_1w -> Bool if Signal #1w is Lined or Not\n * @member sig_1e -> Bool if Signal #1e is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_3e -> Bool if Signal #3e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * @member route_e_trk_3 = The east bound route for track #3\n * \n * @member time_occupied = The time the track was occupied, used to know when to clear the route\n * @member int_occupied = Bool if the track is occupied or not\n */\nclass CTC_Harriman {\n    /**\n     * constructor()\n     * @summary The constructor for the CTC_Harriman class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */\n\tconstructor() {\n        // Bools for the switches\n\t\tthis.sw_21 = false;\n\t\tthis.sw_32 = false;\n        // Bools for the signals\n\t\tthis.sig_1w = false;\n\t\tthis.sig_1e = false;\n\t\tthis.sig_2e = false;\n\t\tthis.sig_3e = false;\n        // Track routes\n\t\tthis.route_w_trk_1 = null;\n\t\tthis.route_e_trk_1 = null;\n\t\tthis.route_e_trk_2 = null;\n\t\tthis.route_e_trk_3 = null;\n        // Used for routing and occupying the tracks \n\t\tthis.int_occupied = false;\n        this.time_occupied = null;\n\t}\n    // ---- END constructor() ----\n\n    /**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */\n    get_train_route(direction, track) {\n        if (direction === \"WEST\") {\n               return this.route_w_trk_1;\n        }\n        else {\n        \tif (track === \"1\") {\n            \treturn this.route_e_trk_1;\n        \t}   \n        \telse if (track === \"2\") {\n        \t\treturn this.route_e_trk_2;\n        \t}\n        \telse {\n        \t\treturn this.route_e_trk_3;\n        \t}\n        }\n    }\n    // ---- END get_train_route() ----\n\n    /**\n     * click_sig_2w()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     */\n\tclick_sig_1w(next_block_1, next_block_2, next_block_3) {\n\t\tif (!this.sw_32 && !this.sw_21) {\n\t\t\tif (this.sig_1w) {\n\t\t\t\tthis.route_w_trk_1 = null;\n\t\t\t\tthis.sig_1w = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (next_block_1 === Occupy || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_1__|__1_valley_harriman\";\n                this.sig_1w = true;\n\t\t\t}\n\t\t}\n\t\telse if (this.sw_32) {\n\t\t\tif (this.sig_1w) {\n\t\t\t\tthis.route_w_trk_1 = null;\n\t\t\t\tthis.sig_1w = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (next_block_3 === Occupy || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_3__|__3_industrial_harriman\";\n                this.sig_1w = true;\n\t\t\t}\n\t\t}\n\t\telse if (!this.sw_32 && this.sw_21) {\n\t\t\tif (this.sig_1w) {\n\t\t\t\tthis.route_w_trk_1 = null;\n\t\t\t\tthis.sig_1w = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (next_block_2 === Occupy || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_2__|__2_valley_harriman\";\n                this.sig_1w = true;\n\t\t\t}\n\t\t}\n\t}\n    // ---- END click_sig_1w() ----\n\n    /**\n     * click_sig_1e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     */\n\tclick_sig_1e(next_block_1) {\n\t\tif (this.sw_21 || this.sw_32) {\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tif (this.sig_1e) {\n\t\t\t\tthis.route_e_trk_1 = null;\n\t\t\t\tthis.sig_1e = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (next_block_1 === Occupy || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_1__|__1_harriman_sterling\";\n                this.sig_1e = true;\n\t\t\t}\n\t\t}\n\t}\n    // ---- END click_sig_1e() ----\n\n    /**\n     * click_sig_2e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     */\n\tclick_sig_2e(next_block_1) {\n\t\tif (!this.sw_21) {\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tif (this.sig_2e) {\n\t\t\t\tthis.route_e_trk_2 = null;\n\t\t\t\tthis.sig_2e = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (next_block_1 === Occupy || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_1__|__1_harriman_sterling\";\n                this.sig_2e = true;\n\t\t\t}\n\t\t}\n\t}\n    // ---- END click_sig_2e() ----\n\n    /**\n     * click_sig_3e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     */\n\tclick_sig_3e(next_block_1) {\n\t\tif (!this.sw_32) {\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tif (this.sig_3e) {\n\t\t\t\tthis.route_e_trk_3 = null;\n\t\t\t\tthis.sig_3e = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (next_block_1 === Occupy || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_3 = \"E_3_1__|__1_harriman_sterling\";\n                this.sig_3e = true;\n\t\t\t}\n\t\t}\n\t}\n    // ---- END click_sig_3e() ----\n\n    /**\n     * set_occupied()\n     * @summary Sets the track as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_occupied(n_state) {\n        if (n_state === true || n_state === false) {\n            this.int_occupied = n_state;\n            this.time_occupied = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_occupied() ----\n\n    /**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */\n    can_clear() {\n        // Get current time\n        let current_time = new Date().getTime() / 1000;\n\n        if (current_time - this.time_occupied > 4 && current_time - this.time_occupied < 100000) {\n            this.sig_1w = false;\n\t\t\tthis.sig_1e = false;\n\t\t\tthis.sig_2e = false;\n\t\t\tthis.sig_3e = false;\n\n\t\t\tthis.route_w_trk_1 = null;\n\t\t\tthis.route_e_trk_1 = null;\n\t\t\tthis.route_e_trk_2 = null;\n\t\t\tthis.route_e_trk_3 = null;\n\n\t\t\tthis.int_occupied = false;\n\t\t\tthis.time_occupied = null;\n        }\n    }\n\n\t/**\n     * @summary Funtion to throw switch #21 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_21() {\n        if (this.sw_21 === false) {\n            this.sw_21 = true;\n        }\n        else {\n            this.sw_21 = false;\n        }\n    }\n    // ---- END throw_sw_21() ----\n\n    /**\n     * @summary Funtion to throw switch #32 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_32() {\n        if (this.sw_32 === false) {\n            this.sw_32 = true;\n        }\n        else {\n            this.sw_32 = false;\n        }\n    }\n    // ---- END throw_sw_32() ----\n    \n    /**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */\n    get_routes() {\n        let routes = [\n            this.route_w_trk_1,\n            this.route_e_trk_1, this.route_e_trk_2, this.route_e_trk_3\n        ];\n\n        return routes;\n    }\n    // ---- END get_routes() ----\n\n    /**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */\n    get_interlocking_status() {\n        let status = {\n            sw_21: this.sw_21,\n\t\t\tsw_32: this.sw_32,\n\t\t\toccupied: this.int_occupied,\n\t\t\troutes: this.get_routes()\n        }\n\n        return status;\n    }\n    // ---- END get_interlocking_status() ----\n}\n\n// This is required when using ReactJS\nexport default CTC_Harriman;"]},"metadata":{},"sourceType":"module"}