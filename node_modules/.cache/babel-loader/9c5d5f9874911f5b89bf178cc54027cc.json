{"ast":null,"code":"import _classCallCheck from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/createClass\";/**\n * @file ctc_sparrow.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the CP Sparrow Interlocking\n */ // Color Constants For Drawing Routes\nvar Empty='#999999';var Lined='#75fa4c';var Occupied='#eb3323';/**\n * Class is the Backend for the CP Sparrow Interlocking This class is what controlls the CP Sparrow Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * \n * @member sig_2w -> Bool if Signal #2w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member time_occupied = The time the track was occupied, used to know when to clear the route\n * @member int_occupied = Bool if the track is occupied or not\n */var CTC_Sparrow=/*#__PURE__*/function(){/**\n     * constructor()\n     * @summary The constructor for the CTC_Sparrow class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */function CTC_Sparrow(){_classCallCheck(this,CTC_Sparrow);// Bools for the switches\nthis.sw_1=false;this.sw_3=false;// Bools for the signals\nthis.sig_2w_1=false;this.sig_2w_2=false;this.sig_2w_3=false;this.sig_2e=false;// Track routes\nthis.route_w_trk_1=null;this.route_w_trk_2=null;this.route_w_trk_3=null;this.route_e_trk_1=null;// Used for routing and occupying the tracks \nthis.int_occupied=false;this.time_occupied=null;}// ---- END constructor() ----\n/**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */_createClass(CTC_Sparrow,[{key:\"get_train_route\",value:function get_train_route(direction,track){if(direction===\"WEST\"){if(track===\"1\"){return this.route_w_trk_1;}else if(track===\"2\"){return this.route_w_trk_2;}else{return this.route_w_trk_3;}}else{return this.route_e_trk_1;}}// ---- END get_train_route() ----\n/**\n     * click_sig_2w_1()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     */},{key:\"click_sig_2w_1\",value:function click_sig_2w_1(next_block_1){if(this.sw_3||this.sw_1){return;}else{if(this.sig_2w_1){this.route_w_trk_1=null;this.sig_2w_1=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_w_trk_1=\"W_1_1__|__1_bingo_sparrow\";this.sig_2w_1=true;}}}// ---- END click_sig_2w_1() ----\n/**\n     * click_sig_2w_2()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     */},{key:\"click_sig_2w_2\",value:function click_sig_2w_2(next_block_1){if(!this.sw_1){return;}else if(!this.sw_3){if(this.sig_2w_2){this.route_w_trk_3=null;this.sig_2w_2=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_w_trk_3=\"W_3_1__|__1_bingo_sparrow\";this.sig_2w_2=true;}}}// ---- END click_sig_2w_2() ----\n/**\n     * click_sig_2w_3()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     */},{key:\"click_sig_2w_3\",value:function click_sig_2w_3(next_block_1){if(!this.sw_3){return;}else{if(this.sig_2w_3){this.route_w_trk_2=null;this.sig_2w_3=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_w_trk_2=\"W_2_1__|__1_bingo_sparrow\";this.sig_2w_3=true;}}}// ---- END click_sig_2w_3() ----\n/**\n     * click_sig_2e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     */},{key:\"click_sig_2e\",value:function click_sig_2e(next_block_1,next_block_2,next_block_3){if(!this.sw_3&&!this.sw_1){if(this.sig_2e){this.route_e_trk_1=null;this.sig_2e=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_1=\"E_1_1__|__1_sparrow_pa\";this.sig_2e=true;}}else if(this.sw_3){if(this.sig_2e){this.route_e_trk_1=null;this.sig_2e=false;}else{if(next_block_2===Occupied||next_block_2===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_1=\"E_1_2__|__2_sparrow_pa\";this.sig_2e=true;}}if(!this.sw_3&&this.sw_1){if(this.sig_2e){this.route_e_trk_1=null;this.sig_2e=false;}else{if(next_block_3===Occupied||next_block_3===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_1=\"E_1_3__|__0_sparrow_cripple\";this.sig_2e=true;}}}// ---- END click_sig_2e() ----\n/**\n     * set_occupied()\n     * @summary Sets the track as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */},{key:\"set_occupied\",value:function set_occupied(n_state){if(n_state===true){this.int_occupied=n_state;this.time_occupied=new Date().getTime()/1000;}else{console.log(\"ERROR\");}}// ---- END set_occupied() ----\n/**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */},{key:\"can_clear\",value:function can_clear(){// The Current Time\nvar current_time=new Date().getTime()/1000;if(current_time-this.time_occupied>4&&current_time-this.time_occupied<100000){this.sig_2w_1=false;this.sig_2w_2=false;this.sig_2w_3=false;this.sig_2e=false;this.route_w_trk_1=null;this.route_w_trk_2=null;this.route_w_trk_3=null;this.route_e_trk_1=null;this.int_occupied=false;this.time_occupied=null;}}// ---- END can_clear() ----\n/**\n     * @summary Funtion to throw switch #1 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */},{key:\"throw_sw_1\",value:function throw_sw_1(){if(this.sw_1===false){this.sw_1=true;}else{this.sw_1=false;}}// ---- END throw_sw_1() ----\n/**\n     * @summary Funtion to throw switch #3 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */},{key:\"throw_sw_3\",value:function throw_sw_3(){if(this.sw_3===false){this.sw_3=true;}else{this.sw_3=false;}}// ---- END throw_sw_3() ----\n/**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */},{key:\"get_routes\",value:function get_routes(){var routes=[this.route_w_trk_1,this.route_w_trk_2,this.route_w_trk_3,this.route_e_trk_1];return routes;}// ---- END get_routes() ----\n/**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */},{key:\"get_interlocking_status\",value:function get_interlocking_status(){var status={sw_1:this.sw_1,sw_3:this.sw_3,occupied:this.int_occupied,routes:this.get_routes()};return status;}// ---- END get_interlocking_status() ----\n}]);return CTC_Sparrow;}();// This is required when using ReactJS\nexport default CTC_Sparrow;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Interlockings/Southern_Tier/ctc_sparrow.js"],"names":["Empty","Lined","Occupied","CTC_Sparrow","sw_1","sw_3","sig_2w_1","sig_2w_2","sig_2w_3","sig_2e","route_w_trk_1","route_w_trk_2","route_w_trk_3","route_e_trk_1","int_occupied","time_occupied","direction","track","next_block_1","alert","next_block_2","next_block_3","n_state","Date","getTime","console","log","current_time","routes","status","occupied","get_routes"],"mappings":"0QAAA;;;;;IAOA;AACA,GAAMA,CAAAA,KAAK,CAAG,SAAd,CACA,GAAMC,CAAAA,KAAK,CAAG,SAAd,CACA,GAAMC,CAAAA,QAAQ,CAAG,SAAjB,CAGA;;;;;;;;;;;;;;;;;;;MAoBMC,CAAAA,W,yBACF;;;;;OAMA,sBAAc,mCACV;AACA,KAAKC,IAAL,CAAY,KAAZ,CACA,KAAKC,IAAL,CAAY,KAAZ,CACA;AACA,KAAKC,QAAL,CAAgB,KAAhB,CACA,KAAKC,QAAL,CAAgB,KAAhB,CACA,KAAKC,QAAL,CAAgB,KAAhB,CACA,KAAKC,MAAL,CAAc,KAAd,CACA;AACA,KAAKC,aAAL,CAAqB,IAArB,CACA,KAAKC,aAAL,CAAqB,IAArB,CACA,KAAKC,aAAL,CAAqB,IAArB,CACA,KAAKC,aAAL,CAAqB,IAArB,CACA;AACA,KAAKC,YAAL,CAAoB,KAApB,CACA,KAAKC,aAAL,CAAqB,IAArB,CACH,CACD;AAEA;;;;;;uFAOgBC,S,CAAWC,K,CAAO,CAC9B,GAAID,SAAS,GAAK,MAAlB,CAA0B,CACtB,GAAIC,KAAK,GAAK,GAAd,CAAmB,CAClB,MAAO,MAAKP,aAAZ,CACH,CAFE,IAGE,IAAIO,KAAK,GAAK,GAAd,CAAmB,CACvB,MAAO,MAAKN,aAAZ,CACG,CAFC,IAGG,CACP,MAAO,MAAKC,aAAZ,CACG,CACJ,CAVD,IAWK,CACD,MAAO,MAAKC,aAAZ,CACH,CACJ,CACD;AAEA;;;;;;;;6DASeK,Y,CAAc,CACzB,GAAI,KAAKb,IAAL,EAAa,KAAKD,IAAtB,CAA4B,CACxB,OACH,CAFD,IAGK,CACD,GAAI,KAAKE,QAAT,CAAmB,CACf,KAAKI,aAAL,CAAqB,IAArB,CACA,KAAKJ,QAAL,CAAgB,KAAhB,CACH,CAHD,IAIK,CACD,GAAIY,YAAY,GAAKhB,QAAjB,EAA6BgB,YAAY,GAAKjB,KAAlD,CAAyD,CACrDkB,KAAK,CAAC,oDAAD,CAAL,CACA,OACH,CACD,KAAKT,aAAL,CAAqB,2BAArB,CACA,KAAKJ,QAAL,CAAgB,IAAhB,CACH,CACJ,CACJ,CACD;AAEA;;;;;;;;6DASeY,Y,CAAc,CACzB,GAAI,CAAC,KAAKd,IAAV,CAAgB,CACZ,OACH,CAFD,IAGK,IAAI,CAAC,KAAKC,IAAV,CAAgB,CACjB,GAAI,KAAKE,QAAT,CAAmB,CACf,KAAKK,aAAL,CAAqB,IAArB,CACA,KAAKL,QAAL,CAAgB,KAAhB,CACH,CAHD,IAIK,CACD,GAAIW,YAAY,GAAKhB,QAAjB,EAA6BgB,YAAY,GAAKjB,KAAlD,CAAyD,CACrDkB,KAAK,CAAC,oDAAD,CAAL,CACA,OACH,CACD,KAAKP,aAAL,CAAqB,2BAArB,CACA,KAAKL,QAAL,CAAgB,IAAhB,CACH,CACJ,CACJ,CACD;AAEA;;;;;;;;6DASeW,Y,CAAc,CACzB,GAAI,CAAC,KAAKb,IAAV,CAAgB,CACZ,OACH,CAFD,IAGK,CACD,GAAI,KAAKG,QAAT,CAAmB,CACf,KAAKG,aAAL,CAAqB,IAArB,CACA,KAAKH,QAAL,CAAgB,KAAhB,CACH,CAHD,IAIK,CACD,GAAIU,YAAY,GAAKhB,QAAjB,EAA6BgB,YAAY,GAAKjB,KAAlD,CAAyD,CACrDkB,KAAK,CAAC,oDAAD,CAAL,CACA,OACH,CACD,KAAKR,aAAL,CAAqB,2BAArB,CACA,KAAKH,QAAL,CAAgB,IAAhB,CACH,CACJ,CACJ,CACD;AAEA;;;;;;;;;;yDAWaU,Y,CAAcE,Y,CAAcC,Y,CAAc,CACnD,GAAI,CAAC,KAAKhB,IAAN,EAAc,CAAC,KAAKD,IAAxB,CAA8B,CAC1B,GAAI,KAAKK,MAAT,CAAiB,CACb,KAAKI,aAAL,CAAqB,IAArB,CACA,KAAKJ,MAAL,CAAc,KAAd,CACH,CAHD,IAIK,CACD,GAAIS,YAAY,GAAKhB,QAAjB,EAA6BgB,YAAY,GAAKjB,KAAlD,CAAyD,CACrDkB,KAAK,CAAC,oDAAD,CAAL,CACA,OACH,CACD,KAAKN,aAAL,CAAqB,wBAArB,CACA,KAAKJ,MAAL,CAAc,IAAd,CACH,CACJ,CAbD,IAcK,IAAI,KAAKJ,IAAT,CAAe,CAChB,GAAI,KAAKI,MAAT,CAAiB,CACb,KAAKI,aAAL,CAAqB,IAArB,CACA,KAAKJ,MAAL,CAAc,KAAd,CACH,CAHD,IAIK,CACD,GAAIW,YAAY,GAAKlB,QAAjB,EAA6BkB,YAAY,GAAKnB,KAAlD,CAAyD,CACrDkB,KAAK,CAAC,oDAAD,CAAL,CACA,OACH,CACD,KAAKN,aAAL,CAAqB,wBAArB,CACA,KAAKJ,MAAL,CAAc,IAAd,CACH,CACJ,CACD,GAAI,CAAC,KAAKJ,IAAN,EAAc,KAAKD,IAAvB,CAA6B,CACzB,GAAI,KAAKK,MAAT,CAAiB,CACb,KAAKI,aAAL,CAAqB,IAArB,CACA,KAAKJ,MAAL,CAAc,KAAd,CACH,CAHD,IAIK,CACD,GAAIY,YAAY,GAAKnB,QAAjB,EAA6BmB,YAAY,GAAKpB,KAAlD,CAAyD,CACrDkB,KAAK,CAAC,oDAAD,CAAL,CACA,OACH,CACD,KAAKN,aAAL,CAAqB,6BAArB,CACA,KAAKJ,MAAL,CAAc,IAAd,CACH,CACJ,CACJ,CACD;AAEA;;;;;;yDAOaa,O,CAAS,CAClB,GAAIA,OAAO,GAAK,IAAhB,CAAsB,CAClB,KAAKR,YAAL,CAAoBQ,OAApB,CACA,KAAKP,aAAL,CAAqB,GAAIQ,CAAAA,IAAJ,GAAWC,OAAX,GAAuB,IAA5C,CACH,CAHD,IAIK,CACDC,OAAO,CAACC,GAAR,CAAY,OAAZ,EACH,CACJ,CACD;AAEA;;;;;;oDAOY,CACR;AACA,GAAIC,CAAAA,YAAY,CAAG,GAAIJ,CAAAA,IAAJ,GAAWC,OAAX,GAAuB,IAA1C,CACA,GAAIG,YAAY,CAAG,KAAKZ,aAApB,CAAoC,CAApC,EAAyCY,YAAY,CAAG,KAAKZ,aAApB,CAAoC,MAAjF,CAAyF,CACrF,KAAKT,QAAL,CAAgB,KAAhB,CACA,KAAKC,QAAL,CAAgB,KAAhB,CACA,KAAKC,QAAL,CAAgB,KAAhB,CACA,KAAKC,MAAL,CAAc,KAAd,CAEA,KAAKC,aAAL,CAAqB,IAArB,CACA,KAAKC,aAAL,CAAqB,IAArB,CACA,KAAKC,aAAL,CAAqB,IAArB,CACA,KAAKC,aAAL,CAAqB,IAArB,CAEA,KAAKC,YAAL,CAAoB,KAApB,CACA,KAAKC,aAAL,CAAqB,IAArB,CACH,CACJ,CACD;AAEA;;;;;sDAMa,CACT,GAAI,KAAKX,IAAL,GAAc,KAAlB,CAAyB,CACrB,KAAKA,IAAL,CAAY,IAAZ,CACH,CAFD,IAGK,CACD,KAAKA,IAAL,CAAY,KAAZ,CACH,CACJ,CACD;AAEA;;;;;sDAMa,CACT,GAAI,KAAKC,IAAL,GAAc,KAAlB,CAAyB,CACrB,KAAKA,IAAL,CAAY,IAAZ,CACH,CAFD,IAGK,CACD,KAAKA,IAAL,CAAY,KAAZ,CACH,CACJ,CACD;AAEA;;;;;sDAMa,CACT,GAAIuB,CAAAA,MAAM,CAAG,CACT,KAAKlB,aADI,CACW,KAAKC,aADhB,CAC+B,KAAKC,aADpC,CAET,KAAKC,aAFI,CAAb,CAKA,MAAOe,CAAAA,MAAP,CACH,CACD;AAEA;;;;;;;;gFAS0B,CACtB,GAAIC,CAAAA,MAAM,CAAG,CACTzB,IAAI,CAAE,KAAKA,IADF,CAETC,IAAI,CAAE,KAAKA,IAFF,CAGTyB,QAAQ,CAAE,KAAKhB,YAHN,CAITc,MAAM,CAAE,KAAKG,UAAL,EAJC,CAAb,CAOA,MAAOF,CAAAA,MAAP,CACH,CACD;2BAGJ;AACA,cAAe1B,CAAAA,WAAf","sourcesContent":["/**\n * @file ctc_sparrow.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the CP Sparrow Interlocking\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n\n\n/**\n * Class is the Backend for the CP Sparrow Interlocking This class is what controlls the CP Sparrow Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * \n * @member sig_2w -> Bool if Signal #2w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member time_occupied = The time the track was occupied, used to know when to clear the route\n * @member int_occupied = Bool if the track is occupied or not\n */\nclass CTC_Sparrow {\n    /**\n     * constructor()\n     * @summary The constructor for the CTC_Sparrow class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */\n    constructor() {\n        // Bools for the switches\n        this.sw_1 = false;\n        this.sw_3 = false;\n        // Bools for the signals\n        this.sig_2w_1 = false;\n        this.sig_2w_2 = false;\n        this.sig_2w_3 = false;\n        this.sig_2e = false;\n        // Track routes\n        this.route_w_trk_1 = null;\n        this.route_w_trk_2 = null;\n        this.route_w_trk_3 = null;\n        this.route_e_trk_1 = null;\n        // Used for routing and occupying the tracks \n        this.int_occupied = false;\n        this.time_occupied = null;\n    }\n    // ---- END constructor() ----\n\n    /**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */\n    get_train_route(direction, track) {\n        if (direction === \"WEST\") {\n            if (track === \"1\") {\n            \treturn this.route_w_trk_1;\n        \t}   \n        \telse if (track === \"2\") {\n        \t\treturn this.route_w_trk_2;\n            }\n            else {\n        \t\treturn this.route_w_trk_3;\n            }\n        }\n        else {\n            return this.route_e_trk_1;\n        }\n    }\n    // ---- END get_train_route() ----\n\n    /**\n     * click_sig_2w_1()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     */\n    click_sig_2w_1(next_block_1) {\n        if (this.sw_3 || this.sw_1) {\n            return;\n        }\n        else {\n            if (this.sig_2w_1) {\n                this.route_w_trk_1 = null;\n                this.sig_2w_1 = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_1__|__1_bingo_sparrow\"\n                this.sig_2w_1 = true;\n            }\n        }\n    }\n    // ---- END click_sig_2w_1() ----\n\n    /**\n     * click_sig_2w_2()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     */\n    click_sig_2w_2(next_block_1) {\n        if (!this.sw_1) {\n            return;\n        }\n        else if (!this.sw_3) {\n            if (this.sig_2w_2) {\n                this.route_w_trk_3 = null;\n                this.sig_2w_2 = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_3 = \"W_3_1__|__1_bingo_sparrow\"\n                this.sig_2w_2 = true;\n            }\n        }\n    }\n    // ---- END click_sig_2w_2() ----\n\n    /**\n     * click_sig_2w_3()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     */\n    click_sig_2w_3(next_block_1) {\n        if (!this.sw_3) {\n            return;\n        }\n        else {\n            if (this.sig_2w_3) {\n                this.route_w_trk_2 = null;\n                this.sig_2w_3 = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_2 = \"W_2_1__|__1_bingo_sparrow\"\n                this.sig_2w_3 = true;\n            }\n        }\n    }\n    // ---- END click_sig_2w_3() ----\n\n    /**\n     * click_sig_2e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     */\n    click_sig_2e(next_block_1, next_block_2, next_block_3) {\n        if (!this.sw_3 && !this.sw_1) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_1__|__1_sparrow_pa\"\n                this.sig_2e = true;\n            }\n        }\n        else if (this.sw_3) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_2__|__2_sparrow_pa\"\n                this.sig_2e = true;\n            }\n        }\n        if (!this.sw_3 && this.sw_1) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_3__|__0_sparrow_cripple\"\n                this.sig_2e = true;\n            }\n        }\n    }\n    // ---- END click_sig_2e() ----\n\n    /**\n     * set_occupied()\n     * @summary Sets the track as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_occupied(n_state) {\n        if (n_state === true) {\n            this.int_occupied = n_state;\n            this.time_occupied = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_occupied() ----\n\n    /**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */\n    can_clear() {\n        // The Current Time\n        let current_time = new Date().getTime() / 1000;\n        if (current_time - this.time_occupied > 4 && current_time - this.time_occupied < 100000) {\n            this.sig_2w_1 = false;\n            this.sig_2w_2 = false;\n            this.sig_2w_3 = false;\n            this.sig_2e = false;\n\n            this.route_w_trk_1 = null;\n            this.route_w_trk_2 = null;\n            this.route_w_trk_3 = null;\n            this.route_e_trk_1 = null;\n\n            this.int_occupied = false;\n            this.time_occupied = null;\n        }\n    }\n    // ---- END can_clear() ----\n\n    /**\n     * @summary Funtion to throw switch #1 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_1() {\n        if (this.sw_1 === false) {\n            this.sw_1 = true;\n        }\n        else {\n            this.sw_1 = false;\n        }\n    }\n    // ---- END throw_sw_1() ----\n\n    /**\n     * @summary Funtion to throw switch #3 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_3() {\n        if (this.sw_3 === false) {\n            this.sw_3 = true;\n        }\n        else {\n            this.sw_3 = false;\n        }\n    }\n    // ---- END throw_sw_3() ----\n    \n    /**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */\n    get_routes() {\n        let routes = [\n            this.route_w_trk_1, this.route_w_trk_2, this.route_w_trk_3,\n            this.route_e_trk_1\n        ];\n\n        return routes;\n    }\n    // ---- END get_routes() ----\n\n    /**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */\n    get_interlocking_status() {\n        let status = {\n            sw_1: this.sw_1,\n            sw_3: this.sw_3,\n            occupied: this.int_occupied,\n            routes: this.get_routes()\n        }\n\n        return status;\n    }\n    // ---- END get_interlocking_status() ----\n}\n\n// This is required when using ReactJS\nexport default CTC_Sparrow;"]},"metadata":{},"sourceType":"module"}