{"ast":null,"code":"/**\n * @file ctc_train.js\n * @author Joey Damico\n * @date September 25, 2019\n * @brief CTC Controller Class for a Clock for the trains\n */\n// Import the Custom Clock Class\nimport Clock from '../Trains/clock.js';\n/**\n * CLASS Train\n * @brief Class that keeps track of the time since the start of the application\n * \n * @details This class is used to keep track and calculate how much time has passed since the launch\n * of the program, it is used to keep the trains moving at the correct times\n * \n * MEMBER VARIABLES\n * start_time -> The the games was started\n */\n\nclass Train {\n  /**\n   * constructor()\n   * @brief The constructor for the Train class\n   * \n   * @details This will initialize all the member variables when the program is started\n   * \n   * @param p_symbol -> The Train's Symbol\n   * @param p_location -> The Trains Inital Location\n   * @param p_direction -> The Direction the train is traveling\n   * @param p_block_size -> The size of the trains inital block\n   */\n  constructor(p_symbol, p_location, p_direction, p_block_size) {\n    this.clock = new Clock();\n    this.clock.startClock();\n    this.symbol = p_symbol;\n    this.current_location = p_location;\n    this.direction = p_direction;\n    this.block_size = p_block_size;\n    this.block_start = this.clock.getTimeFromStart();\n    this.route = true;\n  } // ---- END constructor() ----\n\n  /**\n   * get_symbol()\n   * @brief Getter for the trains symbol\n   * \n   * @returns The train symbol\n   */\n\n\n  get_symbol() {\n    return this.symbol;\n  } // ---- END get_symbol() ----\n\n  /**\n   * update_location()\n   * @brief Take in a new location and sets it for the train \n   */\n\n\n  update_location(new_next_location) {\n    this.current_location = new_next_location;\n    this.block_start = this.clock.getTimeFromStart();\n  } // ---- END update_location() ----\n\n  /**\n   * can_update_location()\n   * @brief Determines if the train can move to the next location\n   */\n\n\n  can_update_location() {\n    // If The train has a route\n    if (this.route) {\n      // Check if the train has spent enough time in the curent block\n      if (this.clock.getTimeFromStart() - this.block_start > this.block_size) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  } // ---- END can_update_location() ----\n\n  /**\n   * get_location()\n   * @brief Getter for the current_location variable\n   */\n\n\n  get_location() {\n    return this.current_location;\n  } // ---- END get_location() ----\n\n  /**\n   * get_block_size()\n   * @brief Getter for the block_size variable\n   */\n\n\n  get_block_size() {\n    return this.block_size;\n  } // ---- END get_block_size() ----\n\n  /**\n   * set_block_size()\n   * @brief Takes in the new block size, and sets the member variable\n   * @param n_size, the new size of the next block\n   */\n\n\n  set_block_size(n_size) {\n    this.block_size = n_size;\n  } // ---- END set_block_size() ----\n\n  /**\n   * get_direction()\n   * @brief Getter for the direction member variable\n   */\n\n\n  get_direction() {\n    return this.direction;\n  } // ---- END get_direction() ----\n\n  /**\n   * get_route()\n   * @brief Getter for the route member variable\n   */\n\n\n  get_route() {\n    return this.route;\n  } // ---- END get_route() ----\n\n  /**\n   * set_route()\n   * @brief Takes in the next route and sets the member variable\n   * @param n_route, the trains new route\n   */\n\n\n  set_route(n_route) {\n    this.route = n_route;\n  } // ---- END set_route() ----\n\n\n} // Export the panel to be drawn on the screen\n\n\nexport default Train;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Trains/train.js"],"names":["Clock","Train","constructor","p_symbol","p_location","p_direction","p_block_size","clock","startClock","symbol","current_location","direction","block_size","block_start","getTimeFromStart","route","get_symbol","update_location","new_next_location","can_update_location","get_location","get_block_size","set_block_size","n_size","get_direction","get_route","set_route","n_route"],"mappings":"AAAA;;;;;;AAOA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA;;;;;;;;;;;AAUA,MAAMC,KAAN,CAAY;AACR;;;;;;;;;;;AAWAC,EAAAA,WAAW,CAACC,QAAD,EAAWC,UAAX,EAAuBC,WAAvB,EAAoCC,YAApC,EAAkD;AACzD,SAAKC,KAAL,GAAa,IAAIP,KAAJ,EAAb;AACA,SAAKO,KAAL,CAAWC,UAAX;AAEA,SAAKC,MAAL,GAAcN,QAAd;AACA,SAAKO,gBAAL,GAAwBN,UAAxB;AACA,SAAKO,SAAL,GAAiBN,WAAjB;AACA,SAAKO,UAAL,GAAkBN,YAAlB;AACA,SAAKO,WAAL,GAAmB,KAAKN,KAAL,CAAWO,gBAAX,EAAnB;AAEA,SAAKC,KAAL,GAAa,IAAb;AACH,GAvBO,CAwBR;;AAEA;;;;;;;;AAMAC,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKP,MAAZ;AACH,GAlCO,CAmCR;;AAEA;;;;;;AAIAQ,EAAAA,eAAe,CAACC,iBAAD,EAAoB;AAC/B,SAAKR,gBAAL,GAAwBQ,iBAAxB;AACA,SAAKL,WAAL,GAAmB,KAAKN,KAAL,CAAWO,gBAAX,EAAnB;AACH,GA5CO,CA6CR;;AAEA;;;;;;AAIAK,EAAAA,mBAAmB,GAAG;AAClB;AACA,QAAI,KAAKJ,KAAT,EAAgB;AACZ;AACA,UAAI,KAAKR,KAAL,CAAWO,gBAAX,KAAgC,KAAKD,WAArC,GAAmD,KAAKD,UAA5D,EAAwE;AACpE,eAAO,IAAP;AACH,OAFD,MAGK;AACD,eAAO,KAAP;AACH;AACJ;AACJ,GA9DO,CA+DR;;AAEA;;;;;;AAIAQ,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKV,gBAAZ;AACH,GAvEO,CAwER;;AAEA;;;;;;AAIAW,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKT,UAAZ;AACH,GAhFO,CAiFR;;AAEA;;;;;;;AAKAU,EAAAA,cAAc,CAACC,MAAD,EAAS;AACnB,SAAKX,UAAL,GAAkBW,MAAlB;AACH,GA1FO,CA2FR;;AAEA;;;;;;AAIAC,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKb,SAAZ;AACH,GAnGO,CAoGR;;AAEA;;;;;;AAIAc,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKV,KAAZ;AACH,GA5GO,CA6GR;;AAEA;;;;;;;AAKAW,EAAAA,SAAS,CAACC,OAAD,EAAU;AACf,SAAKZ,KAAL,GAAaY,OAAb;AACH,GAtHO,CAuHR;;;AAvHQ,C,CA0HZ;;;AACA,eAAe1B,KAAf","sourcesContent":["/**\n * @file ctc_train.js\n * @author Joey Damico\n * @date September 25, 2019\n * @brief CTC Controller Class for a Clock for the trains\n */\n\n// Import the Custom Clock Class\nimport Clock from '../Trains/clock.js';\n\n/**\n * CLASS Train\n * @brief Class that keeps track of the time since the start of the application\n * \n * @details This class is used to keep track and calculate how much time has passed since the launch\n * of the program, it is used to keep the trains moving at the correct times\n * \n * MEMBER VARIABLES\n * start_time -> The the games was started\n */\nclass Train {\n    /**\n     * constructor()\n     * @brief The constructor for the Train class\n     * \n     * @details This will initialize all the member variables when the program is started\n     * \n     * @param p_symbol -> The Train's Symbol\n     * @param p_location -> The Trains Inital Location\n     * @param p_direction -> The Direction the train is traveling\n     * @param p_block_size -> The size of the trains inital block\n     */\n    constructor(p_symbol, p_location, p_direction, p_block_size) {\n        this.clock = new Clock();\n        this.clock.startClock();\n\n        this.symbol = p_symbol;\n        this.current_location = p_location;\n        this.direction = p_direction;\n        this.block_size = p_block_size;\n        this.block_start = this.clock.getTimeFromStart();\n\n        this.route = true;\n    }\n    // ---- END constructor() ----\n \n    /**\n     * get_symbol()\n     * @brief Getter for the trains symbol\n     * \n     * @returns The train symbol\n     */\n    get_symbol() {\n        return this.symbol;\n    }\n    // ---- END get_symbol() ----\n\n    /**\n     * update_location()\n     * @brief Take in a new location and sets it for the train \n     */\n    update_location(new_next_location) {\n        this.current_location = new_next_location;\n        this.block_start = this.clock.getTimeFromStart();\n    }\n    // ---- END update_location() ----\n\n    /**\n     * can_update_location()\n     * @brief Determines if the train can move to the next location\n     */\n    can_update_location() {\n        // If The train has a route\n        if (this.route) {\n            // Check if the train has spent enough time in the curent block\n            if (this.clock.getTimeFromStart() - this.block_start > this.block_size) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    // ---- END can_update_location() ----\n\n    /**\n     * get_location()\n     * @brief Getter for the current_location variable\n     */\n    get_location() {\n        return this.current_location;\n    }\n    // ---- END get_location() ----\n\n    /**\n     * get_block_size()\n     * @brief Getter for the block_size variable\n     */\n    get_block_size() {\n        return this.block_size;\n    }\n    // ---- END get_block_size() ----\n\n    /**\n     * set_block_size()\n     * @brief Takes in the new block size, and sets the member variable\n     * @param n_size, the new size of the next block\n     */\n    set_block_size(n_size) {\n        this.block_size = n_size;\n    }\n    // ---- END set_block_size() ----\n\n    /**\n     * get_direction()\n     * @brief Getter for the direction member variable\n     */\n    get_direction() {\n        return this.direction;\n    }\n    // ---- END get_direction() ----\n\n    /**\n     * get_route()\n     * @brief Getter for the route member variable\n     */\n    get_route() {\n        return this.route;\n    }\n    // ---- END get_route() ----\n\n    /**\n     * set_route()\n     * @brief Takes in the next route and sets the member variable\n     * @param n_route, the trains new route\n     */\n    set_route(n_route) {\n        this.route = n_route;\n    }\n    // ---- END set_route() ----\n}\n\n// Export the panel to be drawn on the screen\nexport default Train;"]},"metadata":{},"sourceType":"module"}