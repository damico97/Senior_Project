{"ast":null,"code":"/**\n * @file ctc_ov.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the CP OV Interlocking\n */\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n/**\n * Class is the Backend for the CP OV Interlocking This class is what controlls the CP OV Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * \n * @member sig_2w -> Bool if Signal #2w is Lined or Not\n * @member sig_2ws -> Bool if Signal #2ws is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The east bound route for track #2\n * @member route_e_trk_1 = The east bound route for track #1\n * \n * @member time_occupied = The time the track was occupied, used to know when to clear the route\n * @member int_occupied = Bool if the track is occupied or not\n */\n\nclass CTC_OV {\n  /**\n   * constructor()\n   * @summary The constructor for the CTC_OV class\n   * \n   * @description This will initialize all the member variables when the program is started\n   */\n  constructor() {\n    // Bools for the switches\n    this.sw_1 = false; // Bools for the signals\n\n    this.sig_2w = false;\n    this.sig_2ws = false;\n    this.sig_2e = false; // Track routes\n\n    this.route_w_trk_1 = null;\n    this.route_w_trk_2 = null;\n    this.route_e_trk_1 = null; // Used for routing and occupying the tracks \n\n    this.int_occupied = false;\n    this.time_occupied = null;\n  } // ---- END constructor() ----\n\n  /**\n   * get_train_route()\n   * @summary Returns the route for the train at a given track\n   * \n   * @param direction, The direction the train is moving\n   * @param track, The Track number of the train \n   */\n\n\n  get_train_route(direction, track) {\n    if (direction === \"WEST\") {\n      if (track === \"1\") {\n        return this.route_w_trk_1;\n      } else {\n        return this.route_w_trk_2;\n      }\n    } else {\n      return this.route_e_trk_1;\n    }\n  } // ---- END get_train_route() ----\n\n  /**\n   * click_sig_2w()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   */\n\n\n  click_sig_2w(next_block_1) {\n    if (this.sw_1) {\n      return;\n    } else {\n      if (this.sig_2w) {\n        this.route_w_trk_1 = null;\n        this.sig_2w = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_1_1__|__1_bc_ov\";\n        this.sig_2w = true;\n      }\n    }\n  } // ---- END click_sig_2w() ----\n\n  /**\n   * click_sig_2ws()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   */\n\n\n  click_sig_2ws(next_block_1) {\n    if (!this.sw_1) {\n      return;\n    } else {\n      if (this.sig_2ws) {\n        this.route_w_trk_2 = null;\n        this.sig_2ws = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_2 = \"W_2_1__|__1_bc_ov\";\n        this.sig_2ws = true;\n      }\n    }\n  } // ---- END click_sig_2ws() ----\n\n  /**\n   * click_sig_2e()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   */\n\n\n  click_sig_2e(next_block_1, next_block_2) {\n    if (this.sw_1) {\n      if (this.sig_2e) {\n        this.route_e_trk_1 = null;\n        this.sig_2e = false;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_2__|__2_ov_howells\";\n        this.sig_2e = true;\n      }\n    } else {\n      if (this.sig_2e) {\n        this.route_e_trk_1 = null;\n        this.sig_2e = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_1__|__1_ov_howells\";\n        this.sig_2e = true;\n      }\n    }\n  } // ---- END click_sig_2e() ----\n\n  /**\n   * set_occupied()\n   * @summary Sets the track as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_occupied(n_state) {\n    if (n_state === true) {\n      this.int_occupied = n_state;\n      this.time_occupied = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_occupied() ----\n\n  /**\n   * can_clear()\n   * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n   * \n   * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n   * clears that track\n   */\n\n\n  can_clear() {\n    //console.log(new Date().getTime() / 1000 - this.time_occupied)\n    let current_time = new Date().getTime() / 1000;\n\n    if (current_time - this.time_occupied > 4 && current_time - this.time_occupied < 100000) {\n      this.sig_2w = false;\n      this.sig_2ws = false;\n      this.sig_2e = false;\n      this.route_w_trk_1 = null;\n      this.route_w_trk_2 = null;\n      this.route_e_trk_1 = null;\n      this.int_occupied = false;\n      this.time_occupied = null;\n    }\n  } // ---- END can_clear() ----\n\n  /**\n   * throw_sw_1()\n   * @summary Funtion to throw switch #1 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_1() {\n    if (this.sw_1 === false) {\n      this.sw_1 = true;\n    } else {\n      this.sw_1 = false;\n    }\n  } // ---- END throw_sw_1() ----\n\n  /**\n   * get_routes()\n   * @summary Gets all the routes from the interlocking\n   * \n   * @returns An Array holding every route variable from the interlocking\n   */\n\n\n  get_routes() {\n    let routes = [this.route_w_trk_1, this.route_w_trk_2, this.route_e_trk_1];\n    return routes;\n  } // ---- END get_routes() ----\n\n  /**\n   * get_interlocking_status()\n   * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n   * \n   * @description All the information that is returned here is what is needed by the ReactJS Component \n   * for the interlocking that is need to draw the interlocking to the screen\n   * \n   * @returns Object with the status of the interlocking\n   */\n\n\n  get_interlocking_status() {\n    let status = {\n      sw_1: this.sw_1,\n      occupied: this.int_occupied,\n      routes: this.get_routes()\n    };\n    return status;\n  } // ---- END get_interlocking_status() ----\n\n\n} // This is required when using ReactJS\n\n\nexport default CTC_OV;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Interlockings/Southern_Tier/ctc_ov.js"],"names":["Empty","Lined","Occupied","CTC_OV","constructor","sw_1","sig_2w","sig_2ws","sig_2e","route_w_trk_1","route_w_trk_2","route_e_trk_1","int_occupied","time_occupied","get_train_route","direction","track","click_sig_2w","next_block_1","alert","click_sig_2ws","click_sig_2e","next_block_2","set_occupied","n_state","Date","getTime","console","log","can_clear","current_time","throw_sw_1","get_routes","routes","get_interlocking_status","status","occupied"],"mappings":"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","sourcesContent":["/**\n * @file ctc_ov.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the CP OV Interlocking\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n\n\n/**\n * Class is the Backend for the CP OV Interlocking This class is what controlls the CP OV Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * \n * @member sig_2w -> Bool if Signal #2w is Lined or Not\n * @member sig_2ws -> Bool if Signal #2ws is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The east bound route for track #2\n * @member route_e_trk_1 = The east bound route for track #1\n * \n * @member time_occupied = The time the track was occupied, used to know when to clear the route\n * @member int_occupied = Bool if the track is occupied or not\n */\nclass CTC_OV {\n    /**\n     * constructor()\n     * @summary The constructor for the CTC_OV class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */\n    constructor() {\n        // Bools for the switches\n        this.sw_1 = false;\n        // Bools for the signals\n        this.sig_2w = false;\n        this.sig_2ws = false;\n        this.sig_2e = false;\n        // Track routes\n        this.route_w_trk_1 = null;\n\t\tthis.route_w_trk_2 = null;\n        this.route_e_trk_1 = null;\n        // Used for routing and occupying the tracks \n        this.int_occupied = false;\n        this.time_occupied = null;\n    }\n    // ---- END constructor() ----\n\n    /**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */\n    get_train_route(direction, track) {\n        if (direction === \"WEST\") {\n            if (track === \"1\") {\n            \treturn this.route_w_trk_1;\n        \t}   \n        \telse {\n        \t\treturn this.route_w_trk_2;\n        \t}\n        }\n        else {\n        \treturn this.route_e_trk_1;\n        }\n    }\n    // ---- END get_train_route() ----\n\n    /**\n     * click_sig_2w()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     */\n    click_sig_2w(next_block_1) {\n        if (this.sw_1) {\n            return;\n        }\n        else {\n            if (this.sig_2w) {\n                this.route_w_trk_1 = null;\n                this.sig_2w = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_1__|__1_bc_ov\";\n                this.sig_2w = true;\n            }\n        }\n    }\n    // ---- END click_sig_2w() ----\n\n    /**\n     * click_sig_2ws()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     */\n    click_sig_2ws(next_block_1) {\n        if (!this.sw_1) {\n            return;\n        }\n        else {\n            if (this.sig_2ws) {\n                this.route_w_trk_2 = null;\n                this.sig_2ws = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_2 = \"W_2_1__|__1_bc_ov\";\n                this.sig_2ws = true;\n            }\n        }\n    }\n    // ---- END click_sig_2ws() ----\n\n    /**\n     * click_sig_2e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig_2e(next_block_1, next_block_2) {\n        if (this.sw_1) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_2__|__2_ov_howells\";\n                this.sig_2e = true;\n            }\n        }\n        else {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_1__|__1_ov_howells\";\n                this.sig_2e = true;\n            }\n        }\n    }\n    // ---- END click_sig_2e() ----\n\n    /**\n     * set_occupied()\n     * @summary Sets the track as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_occupied(n_state) {\n        if (n_state === true) {\n            this.int_occupied = n_state;\n            this.time_occupied = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_occupied() ----\n\n    /**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */\n    can_clear() {\n        //console.log(new Date().getTime() / 1000 - this.time_occupied)\n        let current_time = new Date().getTime() / 1000;\n        if (current_time - this.time_occupied > 4 && current_time - this.time_occupied < 100000) {\n            this.sig_2w = false;\n            this.sig_2ws = false;\n            this.sig_2e = false;\n\n            this.route_w_trk_1 = null;\n            this.route_w_trk_2 = null;\n            this.route_e_trk_1 = null;\n            \n            this.int_occupied = false;\n            this.time_occupied = null;\n        }\n    }\n    // ---- END can_clear() ----\n\n    /**\n     * throw_sw_1()\n     * @summary Funtion to throw switch #1 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_1() {\n        if (this.sw_1 === false) {\n            this.sw_1 = true;\n        }\n        else {\n            this.sw_1 = false;\n        }\n    }\n    // ---- END throw_sw_1() ----\n    \n    /**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */\n    get_routes() {\n        let routes = [\n            this.route_w_trk_1, this.route_w_trk_2,\n            this.route_e_trk_1\n        ];\n\n        return routes;\n    }\n    // ---- END get_routes() ----\n\n    /**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */\n    get_interlocking_status() {\n        let status = {\n            sw_1: this.sw_1,\n            occupied: this.int_occupied,\n            routes: this.get_routes()\n        }\n\n        return status;\n    }\n    // ---- END get_interlocking_status() ----\n}\n\n// This is required when using ReactJS\nexport default CTC_OV;"]},"metadata":{},"sourceType":"module"}