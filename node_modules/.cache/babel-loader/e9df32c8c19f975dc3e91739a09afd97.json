{"ast":null,"code":"/**\n * @file ctc_hx.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the HX Interlocking\n */\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n/**\n * Class is the Backend for the HX Interlocking This class is what controlls the HX Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * @member sw_5 -> Bool if Switch #5 is Reveresed or Not\n * \n * @member sig_2w1 -> Bool if Signal #2w-1 is Lined or Not\n * @member sig_2w2 -> Bool if Signal #2w-2 is Lined or Not\n * @member sig_2w3 -> Bool if Signal #2w-3 is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member routed_trk_1 = Bool if track #1 is routed or not\n * @member routed_trk_2 = Bool if track #2 is routed or not\n * @member trk_1_time = The time track #1 was occupied, used to know when to clear the route\n * @member trk_2_time = The time track #2 was occupied, used to know when to clear the route\n * @member trk_1_occupied = Bool if track #1 is occupied or not\n * @member trk_2_occupied = Bool if track #2 is occupied or not\n */\n\nclass CTC_HX {\n  /**\n   * constructor()\n   * @summary The constructor for the CTC_BT class\n   * \n   * @discription This will initialize all the member variables when the program is started\n   */\n  constructor() {\n    // Bools for the switches\n    this.sw_1 = false;\n    this.sw_3 = false;\n    this.sw_5 = false; // Bools for the signals\n\n    this.sig_2w1 = false;\n    this.sig_2w2 = false;\n    this.sig_2w3 = false;\n    this.sig_4w = false;\n    this.sig_2e = false;\n    this.sig_4e = false; // Track routes\n\n    this.route_w_trk_1 = null;\n    this.route_w_trk_2 = null;\n    this.route_e_trk_1 = null;\n    this.route_e_trk_2 = null; // Used for routing and occupying the tracks \n\n    this.routed_trk_1 = false;\n    this.routed_trk_2 = false;\n    this.trk_1_time = null;\n    this.trk_2_time = null;\n    this.trk_1_occupied = false;\n    this.trk_2_occupied = false;\n  } // ---- END constructor() ----\n\n  /**\n   * get_train_route()\n   * @summary Returns the route for the train at a given track\n   * \n   * @param direction, The direction the train is moving\n   * @param track, The Track number of the train \n   */\n\n\n  get_train_route(direction, track) {\n    if (direction === \"WEST\") {\n      if (track === \"2\") {\n        return this.route_w_trk_2;\n      } else {\n        return this.route_w_trk_1;\n      }\n    } else {\n      if (track === \"1\") {\n        return this.route_e_trk_1;\n      } else {\n        return this.route_e_trk_2;\n      }\n    }\n  } // ---- END get_train_route() ----\n\n  /**\n   * click_sig_2w1()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @discription When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   */\n\n\n  click_sig_2w1(next_block_1, next_block_2) {\n    if (this.sw_3) {\n      return;\n    } else if (!this.sw_1) {\n      if (this.sig_2w1) {\n        this.route_w_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w1 = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_1_1__|__1_pascack_hx\";\n        this.routed_trk_1 = true;\n        this.sig_2w1 = true;\n      }\n    } else {\n      if (this.sig_2w1) {\n        this.route_w_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w1 = false;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_1_2__|__2_pascack_hx\";\n        this.routed_trk_1 = true;\n        this.sig_2w1 = true;\n      }\n    }\n  } // ---- END click_sig_2w1() ----\n\n  /**\n   * click_sig_2w2()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @discription When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   */\n\n\n  click_sig_2w2(next_block_1, next_block_2) {\n    if (!this.sw_3 || this.sw_5) {\n      return;\n    } else if (!this.sw_1) {\n      if (this.sig_2w2) {\n        this.route_w_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w2 = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_3_1__|__1_pascack_hx\";\n        this.routed_trk_1 = true;\n        this.sig_2w2 = true;\n      }\n    } else {\n      if (this.sig_2w2) {\n        this.route_w_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w2 = false;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_3_2__|__2_pascack_hx\";\n        this.routed_trk_1 = true;\n        this.sig_2w2 = true;\n      }\n    }\n  } // ---- END click_sig_2w2() ----\n\n  /**\n   * click_sig_2w3()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @discription When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   */\n\n\n  click_sig_2w3(next_block_1, next_block_2) {\n    if (!this.sw_3 || !this.sw_5) {\n      return;\n    } else if (!this.sw_1) {\n      if (this.sig_2w3) {\n        this.route_w_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w3 = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_4_1__|__1_pascack_hx\";\n        this.routed_trk_1 = true;\n        this.sig_2w3 = true;\n      }\n    } else {\n      if (this.sig_2w3) {\n        this.route_w_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w3 = false;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_4_2__|__2_pascack_hx\";\n        this.routed_trk_1 = SVGComponentTransferFunctionElement;\n        this.sig_2w3 = true;\n      }\n    }\n  } // ---- END click_sig_2w3() ----\n\n  /**\n   * click_sig_4w()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @discription When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_2, The next block on Track #2\n   */\n\n\n  click_sig_4w(next_block_2) {\n    if (this.sw_1) {\n      return;\n    } else {\n      if (this.sig_4w) {\n        this.route_w_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4w = false;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_2 = \"W_2_2__|__2_pascack_hx\";\n        this.routed_trk_2 = true;\n        this.sig_4w = true;\n      }\n    }\n  } // ---- END click_sig_4w() ----\n\n  /**\n   * click_sig_2e()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @discription When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   * @param next_block_4, The next block on Track #4\n   */\n\n\n  click_sig_2e(next_block_1, next_block_3, next_block_4) {\n    if (this.sw_1) {\n      return;\n    } else if (!this.sw_3) {\n      if (this.sig_2e) {\n        this.route_e_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2e = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_1__|__3_hx_laurel\";\n        this.routed_trk_1 = true;\n        this.sig_2e = true;\n      }\n    } else if (this.sw_3 && !this.sw_5) {\n      if (this.sig_2e) {\n        this.route_e_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2e = false;\n      } else {\n        if (next_block_3 === Occupied || next_block_3 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_3__|__3_hx_croxton\";\n        this.routed_trk_1 = true;\n        this.sig_2e = true;\n      }\n    } else if (this.sw_3 && this.sw_5) {\n      if (this.sig_2e) {\n        this.route_e_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2e = false;\n      } else {\n        if (next_block_4 === Occupied || next_block_4 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_4__|__4_hx_croxton\";\n        this.routed_trk_1 = true;\n        this.sig_2e = true;\n      }\n    }\n  } // ---- END click_sig_2e() ----\n\n  /**\n   * click_sig_4e()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @discription When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   * @param next_block_4, The next block on Track #4\n   */\n\n\n  click_sig_4e(next_block_1, next_block_2, next_block_3, next_block_4) {\n    if (!this.sw_1) {\n      if (this.sig_4e) {\n        this.route_e_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4e = false;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_2__|__1_hx_laurel\";\n        this.routed_trk_2 = true;\n        this.sig_4e = true;\n      }\n    } else if (this.sw_1 && !this.sw_3) {\n      if (this.sig_4e) {\n        this.route_e_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4e = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_1__|__3_hx_laurel\";\n        this.routed_trk_2 = true;\n        this.sig_4e = true;\n      }\n    } else if (this.sw_1 && this.sw_3 && !this.sw_5) {\n      if (this.sig_4e) {\n        this.route_e_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4e = false;\n      } else {\n        if (next_block_3 === Occupied || next_block_3 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_3__|__3_hx_croxton\";\n        this.routed_trk_2 = true;\n        this.sig_4e = true;\n      }\n    } else if (this.sw_1 && this.sw_3 && this.sw_5) {\n      if (this.sig_4e) {\n        this.route_e_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4e = false;\n      } else {\n        if (next_block_4 === Occupied || next_block_4 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_4__|__4_hx_croxton\";\n        this.routed_trk_2 = true;\n        this.sig_4e = true;\n      }\n    }\n  } // ---- END click_sig_4e() ----\n\n  /**\n   * set_trk_1_occupied()\n   * @summary Sets track #1 as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_trk_1_occupied(n_state) {\n    if (n_state === true) {\n      this.trk_1_occupied = n_state;\n      this.routed_trk_1 = false;\n      this.trk_1_time = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_trk_1_occupied() ----\n\n  /**\n   * set_trk_2_occupied()\n   * @summary Sets track #1 as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_trk_2_occupied(n_state) {\n    if (n_state === true) {\n      this.trk_2_occupied = n_state;\n      this.routed_trk_2 = false;\n      this.trk_2_time = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_trk_2_occupied() ----\n\n  /**\n   * can_clear()\n   * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n   * \n   * @discription Check both track if a train has been in the interlocking for more then 4 seconds, if so it\n   * clears that track\n   */\n\n\n  can_clear() {\n    // Get the current time\n    let current_time = new Date().getTime() / 1000; // Track #1\n\n    if (current_time - this.trk_1_time > 4 && current_time - this.trk_1_time < 100000) {\n      this.sig_2w1 = false;\n      this.sig_2w2 = false;\n      this.sig_2e = false;\n      this.route_w_trk_1 = null;\n      this.route_e_trk_1 = null;\n      this.routed_trk_1 = false;\n      this.trk_1_occupied = false;\n      this.trk_1_time = null;\n    } // Track #2\n\n\n    if (current_time - this.trk_2_time > 4 && current_time - this.trk_2_time < 100000) {\n      this.sig_4w = false;\n      this.sig_4e = false;\n      this.route_w_trk_2 = null;\n      this.route_e_trk_2 = null;\n      this.routed_trk_2 = false;\n      this.trk_2_occupied = false;\n      this.trk_2_time = null;\n    }\n  } // ---- END can_clear() ----\n\n  /**\n   * throw_sw_1()\n   * @summary Changes the current state of switch #1, used when user clicks the switch\n   */\n\n\n  throw_sw_1() {\n    if (this.sw_1 === false) {\n      this.sw_1 = true;\n    } else {\n      this.sw_1 = false;\n    }\n  } // ---- END throw_sw_1() ----\n\n  /**\n   * throw_sw_3()\n   * @summary Changes the current state of switch #3, used when user clicks the switch\n   */\n\n\n  throw_sw_3() {\n    if (this.sw_3 === false) {\n      this.sw_3 = true;\n    } else {\n      this.sw_3 = false;\n    }\n  } // ---- END throw_sw_3() ----\n\n  /**\n   * throw_sw_5()\n   * @summary Changes the current state of switch #5, used when user clicks the switch\n   */\n\n\n  throw_sw_5() {\n    if (this.sw_5 === false) {\n      this.sw_5 = true;\n    } else {\n      this.sw_5 = false;\n    }\n  } // ---- END throw_sw_5() ----\n\n  /**\n   * get_routes()\n   * @summary Gets all the routes from the interlocking\n   * \n   * @returns An Array holding every route variable from the interlocking\n   */\n\n\n  get_routes() {\n    let routes = [this.route_w_trk_1, this.route_w_trk_2, this.route_e_trk_1, this.route_e_trk_2];\n    return routes;\n  } // ---- END get_routes() ----\n\n  /**\n   * get_interlocking_status()\n   * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n   * \n   * @discription All the information that is returned here is what is needed by the ReactJS Component \n   * for the interlocking that is need to draw the interlocking to the screen\n   * \n   * @returns Object with the status of the interlocking\n   */\n\n\n  get_interlocking_status() {\n    var status = {\n      sw_1: this.sw_1,\n      sw_3: this.sw_3,\n      sw_5: this.sw_5,\n      occupied_trk_1: this.trk_1_occupied,\n      occupied_trk_2: this.trk_2_occupied,\n      routed_1: this.routed_trk_1,\n      routed_2: this.routed_trk_2,\n      routes: this.get_routes()\n    };\n    return status;\n  } // ---- END get_interlocking_status() ----\n\n\n} // This is required when using ReactJS\n\n\nexport default CTC_HX;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Interlockings/Bergen_Line/ctc_hx.js"],"names":["Empty","Lined","Occupied","CTC_HX","constructor","sw_1","sw_3","sw_5","sig_2w1","sig_2w2","sig_2w3","sig_4w","sig_2e","sig_4e","route_w_trk_1","route_w_trk_2","route_e_trk_1","route_e_trk_2","routed_trk_1","routed_trk_2","trk_1_time","trk_2_time","trk_1_occupied","trk_2_occupied","get_train_route","direction","track","click_sig_2w1","next_block_1","next_block_2","alert","click_sig_2w2","click_sig_2w3","SVGComponentTransferFunctionElement","click_sig_4w","click_sig_2e","next_block_3","next_block_4","click_sig_4e","set_trk_1_occupied","n_state","Date","getTime","console","log","set_trk_2_occupied","can_clear","current_time","throw_sw_1","throw_sw_3","throw_sw_5","get_routes","routes","get_interlocking_status","status","occupied_trk_1","occupied_trk_2","routed_1","routed_2"],"mappings":"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","sourcesContent":["/**\n * @file ctc_hx.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the HX Interlocking\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n\n\n/**\n * Class is the Backend for the HX Interlocking This class is what controlls the HX Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * @member sw_5 -> Bool if Switch #5 is Reveresed or Not\n * \n * @member sig_2w1 -> Bool if Signal #2w-1 is Lined or Not\n * @member sig_2w2 -> Bool if Signal #2w-2 is Lined or Not\n * @member sig_2w3 -> Bool if Signal #2w-3 is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member routed_trk_1 = Bool if track #1 is routed or not\n * @member routed_trk_2 = Bool if track #2 is routed or not\n * @member trk_1_time = The time track #1 was occupied, used to know when to clear the route\n * @member trk_2_time = The time track #2 was occupied, used to know when to clear the route\n * @member trk_1_occupied = Bool if track #1 is occupied or not\n * @member trk_2_occupied = Bool if track #2 is occupied or not\n */\nclass CTC_HX {\n    /**\n     * constructor()\n     * @summary The constructor for the CTC_BT class\n     * \n     * @discription This will initialize all the member variables when the program is started\n     */\n    constructor() {\n        // Bools for the switches\n        this.sw_1 = false;\n        this.sw_3 = false;\n        this.sw_5 = false;\n        // Bools for the signals\n        this.sig_2w1 = false;\n        this.sig_2w2 = false;\n        this.sig_2w3 = false;\n        this.sig_4w = false;\n        this.sig_2e = false;\n        this.sig_4e = false;    \n        // Track routes\n        this.route_w_trk_1 = null;\n        this.route_w_trk_2 = null;\n        this.route_e_trk_1 = null;\n        this.route_e_trk_2 = null;\n        // Used for routing and occupying the tracks \n        this.routed_trk_1 = false;\n        this.routed_trk_2 = false;\n        this.trk_1_time = null;\n        this.trk_2_time = null;\n        this.trk_1_occupied = false;\n        this.trk_2_occupied = false;\n    }\n    // ---- END constructor() ----\n\n    /**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */\n    get_train_route(direction, track) {\n        if (direction === \"WEST\") {\n            if (track === \"2\") {\n                return this.route_w_trk_2;\n            }\n            else {\n                return this.route_w_trk_1;\n            }\n        }\n        else {\n            if (track === \"1\") {\n                return this.route_e_trk_1;\n            }\n            else {\n                return this.route_e_trk_2;\n            }\n        }\n    }\n    // ---- END get_train_route() ----\n\n    /**\n     * click_sig_2w1()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @discription When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig_2w1(next_block_1, next_block_2) {\n        if (this.sw_3) {\n            return;\n        }\n        else if (!this.sw_1) {\n            if (this.sig_2w1) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w1 = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_1__|__1_pascack_hx\";\n                this.routed_trk_1 = true;\n                this.sig_2w1 = true;\n            }\n        }\n        else {\n            if (this.sig_2w1) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w1 = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_2__|__2_pascack_hx\";\n                this.routed_trk_1 = true;\n                this.sig_2w1 = true;\n            }\n        }\n    }\n    // ---- END click_sig_2w1() ----\n\n    /**\n     * click_sig_2w2()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @discription When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig_2w2(next_block_1, next_block_2) {\n        if (!this.sw_3 || this.sw_5) {\n            return;\n        }\n        else if (!this.sw_1) {\n            if (this.sig_2w2) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w2 = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_3_1__|__1_pascack_hx\";\n                this.routed_trk_1 = true;\n                this.sig_2w2 = true;\n            }\n        }\n        else {\n            if (this.sig_2w2) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w2 = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_3_2__|__2_pascack_hx\";\n                this.routed_trk_1 = true;\n                this.sig_2w2 = true;\n            }\n        }\n    }\n    // ---- END click_sig_2w2() ----\n\n    /**\n     * click_sig_2w3()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @discription When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig_2w3(next_block_1, next_block_2) {\n        if (!this.sw_3 || !this.sw_5) {\n            return;\n        }\n        else if (!this.sw_1) {\n            if (this.sig_2w3) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w3 = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_4_1__|__1_pascack_hx\";\n                this.routed_trk_1 = true;\n                this.sig_2w3 = true;\n            }\n        }\n        else {\n            if (this.sig_2w3) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w3 = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_4_2__|__2_pascack_hx\";\n                this.routed_trk_1 = SVGComponentTransferFunctionElement;\n                this.sig_2w3 = true;\n            }\n        }\n    }   \n    // ---- END click_sig_2w3() ----\n\n    /**\n     * click_sig_4w()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @discription When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig_4w(next_block_2) {\n        if (this.sw_1) {\n            return;\n        }\n        else {\n            if (this.sig_4w) {\n                this.route_w_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4w = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_2 = \"W_2_2__|__2_pascack_hx\";\n                this.routed_trk_2 = true;\n                this.sig_4w = true;\n            }\n        }\n    }\n    // ---- END click_sig_4w() ----\n\n    /**\n     * click_sig_2e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @discription When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     * @param next_block_4, The next block on Track #4\n     */\n    click_sig_2e(next_block_1, next_block_3, next_block_4) {\n        if (this.sw_1) {\n            return;\n        }\n        else if (!this.sw_3) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_1__|__3_hx_laurel\";\n                this.routed_trk_1 = true;\n                this.sig_2e = true;\n            }\n        }\n        else if (this.sw_3 && !this.sw_5) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_3__|__3_hx_croxton\";\n                this.routed_trk_1 = true;\n                this.sig_2e = true;\n            }\n        }\n        else if (this.sw_3 && this.sw_5) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_4 === Occupied || next_block_4 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_4__|__4_hx_croxton\";\n                this.routed_trk_1 = true;\n                this.sig_2e = true;\n            }\n        }\n    }\n    // ---- END click_sig_2e() ----\n\n    /**\n     * click_sig_4e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @discription When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     * @param next_block_4, The next block on Track #4\n     */\n    click_sig_4e(next_block_1, next_block_2, next_block_3, next_block_4) {\n        if (!this.sw_1) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_2__|__1_hx_laurel\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n        else if (this.sw_1 && !this.sw_3) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_1__|__3_hx_laurel\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n        else if (this.sw_1 && this.sw_3 && !this.sw_5) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_3__|__3_hx_croxton\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n        else if (this.sw_1 && this.sw_3 && this.sw_5) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n            }\n            else {\n                if (next_block_4 === Occupied || next_block_4 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_4__|__4_hx_croxton\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n    }\n    // ---- END click_sig_4e() ----\n\n    /**\n     * set_trk_1_occupied()\n     * @summary Sets track #1 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_trk_1_occupied(n_state) {\n        if (n_state === true) {\n            this.trk_1_occupied = n_state;\n            this.routed_trk_1 = false;\n            this.trk_1_time = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_trk_1_occupied() ----\n\n    /**\n     * set_trk_2_occupied()\n     * @summary Sets track #1 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_trk_2_occupied(n_state) {\n        if (n_state === true) {\n            this.trk_2_occupied = n_state;\n            this.routed_trk_2 = false;\n            this.trk_2_time = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_trk_2_occupied() ----\n\n    /**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @discription Check both track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */\n    can_clear() {\n        // Get the current time\n        let current_time = new Date().getTime() / 1000;\n\n        // Track #1\n        if (current_time - this.trk_1_time > 4 && current_time - this.trk_1_time< 100000) {\n            this.sig_2w1 = false;\n            this.sig_2w2 = false;\n            this.sig_2e = false;\n\n            this.route_w_trk_1 = null;\n            this.route_e_trk_1 = null;\n            this.routed_trk_1 = false;\n\n            this.trk_1_occupied = false;\n            this.trk_1_time = null;\n        }\n        // Track #2\n        if (current_time - this.trk_2_time > 4 && current_time - this.trk_2_time< 100000) {\n            this.sig_4w = false;\n            this.sig_4e = false;\n\n            this.route_w_trk_2 = null;\n            this.route_e_trk_2 = null;\n            this.routed_trk_2 = false;\n\n            this.trk_2_occupied = false;\n            this.trk_2_time = null;\n        }\n    }\n    // ---- END can_clear() ----\n\n    /**\n     * throw_sw_1()\n     * @summary Changes the current state of switch #1, used when user clicks the switch\n     */\n    throw_sw_1() {\n        if (this.sw_1 === false) {\n            this.sw_1 = true;\n        }\n        else {\n            this.sw_1 = false;\n        }\n    }\n    // ---- END throw_sw_1() ----\n\n    /**\n     * throw_sw_3()\n     * @summary Changes the current state of switch #3, used when user clicks the switch\n     */\n    throw_sw_3() {\n        if (this.sw_3 === false) {\n            this.sw_3 = true;\n        }\n        else {\n            this.sw_3 = false;\n        }\n    }\n    // ---- END throw_sw_3() ----\n\n    /**\n     * throw_sw_5()\n     * @summary Changes the current state of switch #5, used when user clicks the switch\n     */\n    throw_sw_5() {\n        if (this.sw_5 === false) {\n            this.sw_5 = true;\n        }\n        else {\n            this.sw_5 = false;\n        }\n    }\n    // ---- END throw_sw_5() ----\n    \n    /**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */\n    get_routes() {\n        let routes = [\n            this.route_w_trk_1, this.route_w_trk_2,\n            this.route_e_trk_1, this.route_e_trk_2\n        ];\n\n        return routes;\n    }\n    // ---- END get_routes() ----\n\n    /**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @discription All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */\n    get_interlocking_status() {\n        var status = {\n            sw_1: this.sw_1,\n            sw_3: this.sw_3,\n            sw_5: this.sw_5,\n\n            occupied_trk_1: this.trk_1_occupied,\n            occupied_trk_2: this.trk_2_occupied,\n            routed_1: this.routed_trk_1,\n            routed_2: this.routed_trk_2,\n            routes: this.get_routes()\n        };\n\n        return status;\n    }\n    // ---- END get_interlocking_status() ----\n}\n\n// This is required when using ReactJS\nexport default CTC_HX;"]},"metadata":{},"sourceType":"module"}