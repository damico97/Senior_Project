{"ast":null,"code":"/**\n * @file ctc_pa.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the CP PA Interlocking\n */\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n/**\n * Class is the Backend for the CP PA Interlocking This class is what controlls the CP PA Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * \n * @member sig_2w1 -> Bool if Signal #2w-1 is Lined or Not\n * @member sig_2w2 -> Bool if Signal #2w-2 is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_w_trk_3 = The west bound route for track #3\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member routed_trk_1 = Bool if track #1 is routed or not\n * @member routed_trk_2 = Bool if track #2 is routed or not\n * @member trk_1_time = The time track #1 was occupied, used to know when to clear the route\n * @member trk_2_time = The time track #2 was occupied, used to know when to clear the route\n * @member trk_1_occupied = Bool if track #1 is occupied or not\n * @member trk_2_occupied = Bool if track #2 is occupied or not\n */\n\nclass CTC_PA {\n  /**\n   * constructor()\n   * @summary The constructor for the CTC_PA class\n   * \n   * @description This will initialize all the member variables when the program is started\n   */\n  constructor() {\n    // Bools for the switches\n    this.sw_1 = false;\n    this.sw_3 = false; // Bools for the signals\n\n    this.sig_2w_1 = false;\n    this.sig_2w_2 = false;\n    this.sig_4w = false;\n    this.sig_2e = false;\n    this.sig_4e = false; // Track routes\n\n    this.route_w_trk_1 = null;\n    this.route_w_trk_2 = null;\n    this.route_w_trk_3 = null;\n    this.route_e_trk_1 = null;\n    this.route_e_trk_2 = null; // Used for routing and occupying the tracks \n\n    this.routed_trk_1 = null;\n    this.routed_trk_2 = null;\n    this.trk_1_time = null;\n    this.trk_2_time = null;\n  } // ---- END constructor() ----\n\n  /**\n   * get_train_route()\n   * @summary Returns the route for the train at a given track\n   * \n   * @param direction, The direction the train is moving\n   * @param track, The Track number of the train \n   */\n\n\n  get_train_route(direction, track) {\n    if (direction === \"WEST\") {\n      if (track === \"1\") {\n        return this.route_w_trk_1;\n      } else if (track === \"2\") {\n        return this.route_w_trk_2;\n      } else if (track === \"3\") {\n        return this.route_w_trk_3;\n      } else {\n        return this.route_w_trk_4;\n      }\n    } else {\n      if (track === \"1\") {\n        return this.route_e_trk_1;\n      } else if (track === \"2\") {\n        return this.route_e_trk_2;\n      } else {\n        return this.route_e_trk_3;\n      }\n    }\n  } // ---- END get_train_route() ----\n\n  /**\n   * click_sig_2w1()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   */\n\n\n  click_sig_2w_1(next_block_1, next_block_2, next_block_4) {\n    if (this.sw_1) {\n      return;\n    } else if (!this.sw_3) {\n      if (this.sig_2w_1) {\n        this.route_w_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w_1 = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_1_1__|__1_sparrow_pa\";\n        this.routed_trk_1 = true;\n        this.sig_2w_1 = true;\n      }\n    } else if (this.sw_3) {\n      if (this.sig_2w_1) {\n        this.route_w_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w_1 = false;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_1 = \"W_1_2__|__2_sparrow_pa\";\n        this.routed_trk_1 = true;\n        this.sig_2w_1 = true;\n      }\n    }\n  } // ---- END click_sig_2w1() ----\n\n  /**\n   * click_sig_2w2()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   */\n\n\n  click_sig_2w_2(next_block_1, next_block_2, next_block_4) {\n    if (!this.sw_1) {\n      return;\n    } else if (!this.sw_3) {\n      if (this.sig_2w_2) {\n        this.route_w_trk_3 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w_2 = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_3 = \"W_3_1__|__1_sparrow_pa\";\n        this.routed_trk_1 = true;\n        this.sig_2w_2 = true;\n      }\n    } else if (this.sw_3) {\n      if (this.sig_2w_2) {\n        this.route_w_trk_3 = null;\n        this.routed_trk_1 = false;\n        this.sig_2w_2 = false;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_3 = \"W_3_2__|__2_sparrow_pa\";\n        this.routed_trk_1 = true;\n        this.sig_2w_2 = true;\n      }\n    }\n  } // ---- END click_sig_2w2() ----\n\n  /**\n   * click_sig_4w()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   */\n\n\n  click_sig_4w(next_block_2, next_block_4) {\n    if (this.sw_3) {\n      return;\n    } else {\n      if (this.sig_4w) {\n        this.route_w_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4w = false;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_w_trk_2 = \"W_2_2__|__2_sparrow_pa\";\n        this.routed_trk_2 = true;\n        this.sig_4w = true;\n      }\n    }\n  } // ---- END click_sig_4w() ----\n\n  /**\n   * click_sig_2e()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_3, The next block on Track #3\n   */\n\n\n  click_sig_2e(next_block_1, next_block_3) {\n    if (this.sw_3) {\n      return;\n    } else if (!this.sw_1) {\n      if (this.sig_2e) {\n        this.route_e_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2e = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_1__|__1_pa_port\";\n        this.routed_trk_1 = true;\n        this.sig_2e = true;\n      }\n    } else {\n      if (this.sig_2e) {\n        this.route_e_trk_1 = null;\n        this.routed_trk_1 = false;\n        this.sig_2e = false;\n      } else {\n        if (next_block_3 === Occupied || next_block_3 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_1 = \"E_1_3__|__0_portYard_west\";\n        this.routed_trk_1 = true;\n        this.sig_2e = true;\n      }\n    }\n  } // ---- END click_sig_2e() ----\n\n  /**\n   * click_sig_4e()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   */\n\n\n  click_sig_4e(next_block_1, next_block_2, next_block_3) {\n    if (!this.sw_3) {\n      if (this.sig_4e) {\n        this.route_e_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4e = false;\n      } else {\n        if (next_block_2 === Occupied || next_block_2 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_2__|__2_pa_bc\";\n        this.routed_trk_2 = true;\n        this.sig_4e = true;\n      }\n    } else if (this.sw_3 && !this.sw_1) {\n      if (this.sig_4e) {\n        this.route_e_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4e = false;\n      } else {\n        if (next_block_1 === Occupied || next_block_1 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_1__|__1_pa_port\";\n        this.routed_trk_2 = true;\n        this.sig_4e = true;\n      }\n    } else if (this.sw_3 && this.sw_1) {\n      if (this.sig_4e) {\n        this.route_e_trk_2 = null;\n        this.routed_trk_2 = false;\n        this.sig_4e = false;\n      } else {\n        if (next_block_3 === Occupied || next_block_3 === Lined) {\n          alert(\"Cannot Line Route Because Conflict With Next Block\");\n          return;\n        }\n\n        this.route_e_trk_2 = \"E_2_3__|__0_portYard_west\";\n        this.routed_trk_2 = true;\n        this.sig_4e = true;\n      }\n    }\n  } // ---- END click_sig_4e() ----\n\n  /**\n   * set_trk_1_occupied()\n   * @summary Sets track #1 as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_trk_1_occupied(n_state) {\n    if (n_state === true) {\n      this.trk_1_occupied = n_state;\n      this.routed_trk_1 = false;\n      this.trk_1_time = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_trk_1_occupied() ----\n\n  /**\n   * set_trk_2_occupied()\n   * @summary Sets track #2 as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_trk_2_occupied(n_state) {\n    if (n_state === true) {\n      this.trk_2_occupied = n_state;\n      this.routed_trk_2 = false;\n      this.trk_2_time = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_trk_2_occupied() ----\n\n  /**\n   * can_clear()\n   * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n   * \n   * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n   * clears that track\n   */\n\n\n  can_clear() {\n    // Get Current Time\n    let current_time = new Date().getTime() / 1000; // Track #1\n\n    if (current_time - this.trk_1_time > 4 && current_time - this.trk_1_time < 100000) {\n      this.sig_2w = false;\n      this.sig_2e = false;\n      this.route_w_trk_1 = null;\n      this.route_e_trk_1 = null;\n      this.routed_trk_1 = false;\n      this.trk_1_occupied = false;\n      this.trk_1_time = null;\n    } // Track #2\n\n\n    if (current_time - this.trk_2_time > 4 && current_time - this.trk_2_time < 100000) {\n      this.sig_4w = false;\n      this.sig_4e = false;\n      this.route_w_trk_2 = null;\n      this.route_e_trk_2 = null;\n      this.routed_trk_2 = false;\n      this.trk_2_occupied = false;\n      this.trk_2_time = null;\n    }\n  } // ---- END can_clear() ----\n\n  /**\n   * throw_sw_1()\n   * @summary Funtion to throw switch #1 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_1() {\n    if (this.sw_1 === false) {\n      this.sw_1 = true;\n    } else {\n      this.sw_1 = false;\n    }\n  } // ---- END throw_sw_1() ----\n\n  /**\n   * throw_sw_3()\n   * @summary Funtion to throw switch #3 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_3() {\n    if (this.sw_3 === false) {\n      this.sw_3 = true;\n    } else {\n      this.sw_3 = false;\n    }\n  } // ---- END throw_sw_3() ----\n\n  /**\n   * throw_sw_5()\n   * @summary Funtion to throw switch #5 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_5() {\n    if (this.sw_5 === false) {\n      this.sw_5 = true;\n    } else {\n      this.sw_5 = false;\n    }\n  } // ---- END throw_sw_5() ----\n\n  /**\n   * get_routes()\n   * @summary Gets all the routes from the interlocking\n   * \n   * @returns An Array holding every route variable from the interlocking\n   */\n\n\n  get_routes() {\n    let routes = [this.route_w_trk_1, this.route_w_trk_2, this.route_w_trk_3, this.route_e_trk_1, this.route_e_trk_2];\n    return routes;\n  } // ---- END get_routes() ----\n\n  /**\n   * get_interlocking_status()\n   * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n   * \n   * @description All the information that is returned here is what is needed by the ReactJS Component \n   * for the interlocking that is need to draw the interlocking to the screen\n   * \n   * @returns Object with the status of the interlocking\n   */\n\n\n  get_interlocking_status() {\n    let status = {\n      sw_1: this.sw_1,\n      sw_3: this.sw_3,\n      sw_5: this.sw_5,\n      routes: this.get_routes(),\n      routed_trk_1: this.routed_trk_1,\n      routed_trk_2: this.routed_trk_2,\n      occupied_trk_1: this.trk_1_occupied,\n      occupied_trk_2: this.trk_2_occupied\n    };\n    return status;\n  } // ---- END get_interlocking_status() ----\n\n\n} // This is required when using ReactJS\n\n\nexport default CTC_PA;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Interlockings/Southern_Tier/ctc_pa.js"],"names":["Empty","Lined","Occupied","CTC_PA","constructor","sw_1","sw_3","sig_2w_1","sig_2w_2","sig_4w","sig_2e","sig_4e","route_w_trk_1","route_w_trk_2","route_w_trk_3","route_e_trk_1","route_e_trk_2","routed_trk_1","routed_trk_2","trk_1_time","trk_2_time","get_train_route","direction","track","route_w_trk_4","route_e_trk_3","click_sig_2w_1","next_block_1","next_block_2","next_block_4","alert","click_sig_2w_2","click_sig_4w","click_sig_2e","next_block_3","click_sig_4e","set_trk_1_occupied","n_state","trk_1_occupied","Date","getTime","console","log","set_trk_2_occupied","trk_2_occupied","can_clear","current_time","sig_2w","throw_sw_1","throw_sw_3","throw_sw_5","sw_5","get_routes","routes","get_interlocking_status","status","occupied_trk_1","occupied_trk_2"],"mappings":"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","sourcesContent":["/**\n * @file ctc_pa.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the CP PA Interlocking\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n\n\n/**\n * Class is the Backend for the CP PA Interlocking This class is what controlls the CP PA Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * \n * @member sig_2w1 -> Bool if Signal #2w-1 is Lined or Not\n * @member sig_2w2 -> Bool if Signal #2w-2 is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_w_trk_3 = The west bound route for track #3\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member routed_trk_1 = Bool if track #1 is routed or not\n * @member routed_trk_2 = Bool if track #2 is routed or not\n * @member trk_1_time = The time track #1 was occupied, used to know when to clear the route\n * @member trk_2_time = The time track #2 was occupied, used to know when to clear the route\n * @member trk_1_occupied = Bool if track #1 is occupied or not\n * @member trk_2_occupied = Bool if track #2 is occupied or not\n */\nclass CTC_PA {\n    /**\n     * constructor()\n     * @summary The constructor for the CTC_PA class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */\n    constructor() {\n        // Bools for the switches\n        this.sw_1 = false;\n        this.sw_3 = false;\n        // Bools for the signals\n        this.sig_2w_1 = false;\n        this.sig_2w_2 = false;\n        this.sig_4w = false;\n        this.sig_2e = false;\n        this.sig_4e = false;\n        // Track routes\n        this.route_w_trk_1 = null;\n        this.route_w_trk_2 = null;\n        this.route_w_trk_3 = null;\n        this.route_e_trk_1 = null;\n        this.route_e_trk_2 = null;\n        // Used for routing and occupying the tracks \n        this.routed_trk_1 = null;\n        this.routed_trk_2 = null;\n        this.trk_1_time = null;\n        this.trk_2_time = null;\n    }\n    // ---- END constructor() ----\n\n    /**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */\n    get_train_route(direction, track) {\n        if (direction === \"WEST\") {\n            if (track === \"1\") {\n            \treturn this.route_w_trk_1;\n        \t}   \n        \telse if (track === \"2\") {\n        \t\treturn this.route_w_trk_2;\n            }\n            else if (track === \"3\") {\n        \t\treturn this.route_w_trk_3;\n            }\n            else {\n        \t\treturn this.route_w_trk_4;\n        \t}\n        }\n        else {\n        \tif (track === \"1\") {\n            \treturn this.route_e_trk_1;\n            }   \n            else if (track === \"2\") {\n        \t\treturn this.route_e_trk_2;\n            }\n        \telse {\n        \t\treturn this.route_e_trk_3;\n        \t}\n        }\n    }\n    // ---- END get_train_route() ----\n\n    /**\n     * click_sig_2w1()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig_2w_1(next_block_1, next_block_2, next_block_4) {\n        if (this.sw_1) {\n            return;\n        }\n        else if (!this.sw_3) {\n            if (this.sig_2w_1) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w_1 = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_1__|__1_sparrow_pa\";\n                this.routed_trk_1 = true;\n                this.sig_2w_1 = true;\n            }\n        }\n        else if (this.sw_3) {\n            if (this.sig_2w_1) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w_1 = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_2__|__2_sparrow_pa\";\n                this.routed_trk_1 = true;\n                this.sig_2w_1 = true;\n            }\n        }\n    }\n    // ---- END click_sig_2w1() ----\n\n    /**\n     * click_sig_2w2()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig_2w_2(next_block_1, next_block_2, next_block_4) {\n        if (!this.sw_1) {\n            return;\n        }\n        else if (!this.sw_3) {\n            if (this.sig_2w_2) {\n                this.route_w_trk_3 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w_2 = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_3 = \"W_3_1__|__1_sparrow_pa\";\n                this.routed_trk_1 = true;\n                this.sig_2w_2 = true;\n            }\n        }\n        else if (this.sw_3) {\n            if (this.sig_2w_2) {\n                this.route_w_trk_3 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w_2 = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_3 = \"W_3_2__|__2_sparrow_pa\";\n                this.routed_trk_1 = true;\n                this.sig_2w_2 = true;\n            }\n        }\n    }\n    // ---- END click_sig_2w2() ----\n\n    /**\n     * click_sig_4w()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig_4w(next_block_2, next_block_4) {\n        if (this.sw_3) {\n            return;\n        }\n        else {\n            if (this.sig_4w) {\n                this.route_w_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4w = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_2 = \"W_2_2__|__2_sparrow_pa\";\n                this.routed_trk_2 = true;\n                this.sig_4w = true;\n            }\n        }\n    }\n    // ---- END click_sig_4w() ----\n\n    /**\n     * click_sig_2e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_3, The next block on Track #3\n     */\n    click_sig_2e(next_block_1, next_block_3) {\n        if (this.sw_3) {\n            return;\n        }\n        else if (!this.sw_1) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_1__|__1_pa_port\";\n                this.routed_trk_1 = true;\n                this.sig_2e = true;\n            }\n        }\n        else {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_3__|__0_portYard_west\";\n                this.routed_trk_1 = true;\n                this.sig_2e = true;\n            }\n        }\n    }\n    // ---- END click_sig_2e() ----\n\n    /**\n     * click_sig_4e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     */\n    click_sig_4e(next_block_1, next_block_2, next_block_3) {\n        if (!this.sw_3) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_2__|__2_pa_bc\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n        else if (this.sw_3 && !this.sw_1) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_1__|__1_pa_port\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n        else if (this.sw_3 && this.sw_1) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_3__|__0_portYard_west\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n    }\n    // ---- END click_sig_4e() ----\n\n    /**\n     * set_trk_1_occupied()\n     * @summary Sets track #1 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_trk_1_occupied(n_state) {\n        if (n_state === true) {\n            this.trk_1_occupied = n_state;\n            this.routed_trk_1 = false;\n            this.trk_1_time = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_trk_1_occupied() ----\n\n    /**\n     * set_trk_2_occupied()\n     * @summary Sets track #2 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_trk_2_occupied(n_state) {\n        if (n_state === true) {\n            this.trk_2_occupied = n_state;\n            this.routed_trk_2 = false;\n            this.trk_2_time = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_trk_2_occupied() ----\n\n    /**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */\n    can_clear() {\n        // Get Current Time\n        let current_time = new Date().getTime() / 1000;\n\n        // Track #1\n        if (current_time - this.trk_1_time > 4 && current_time - this.trk_1_time< 100000) {\n            this.sig_2w = false;\n            this.sig_2e = false;\n\n            this.route_w_trk_1 = null;\n            this.route_e_trk_1 = null;\n            this.routed_trk_1 = false;\n\n            this.trk_1_occupied = false;\n            this.trk_1_time = null;\n        }\n        // Track #2\n        if (current_time - this.trk_2_time > 4 && current_time - this.trk_2_time< 100000) {\n            this.sig_4w = false;\n            this.sig_4e = false;\n\n            this.route_w_trk_2 = null;\n            this.route_e_trk_2 = null;\n            this.routed_trk_2 = false;\n\n            this.trk_2_occupied = false;\n            this.trk_2_time = null;\n        }\n    }\n    // ---- END can_clear() ----\n\n    /**\n     * throw_sw_1()\n     * @summary Funtion to throw switch #1 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_1() {\n        if (this.sw_1 === false) {\n            this.sw_1 = true;\n        }\n        else {\n            this.sw_1 = false;\n        }\n    }\n    // ---- END throw_sw_1() ----\n\n    /**\n     * throw_sw_3()\n     * @summary Funtion to throw switch #3 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_3() {\n        if (this.sw_3 === false) {\n            this.sw_3 = true;\n        }\n        else {\n            this.sw_3 = false;\n        }\n    }\n    // ---- END throw_sw_3() ----\n\n    /**\n     * throw_sw_5()\n     * @summary Funtion to throw switch #5 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_5() {\n        if (this.sw_5 === false) {\n            this.sw_5 = true;\n        }\n        else {\n            this.sw_5 = false;\n        }\n    }\n    // ---- END throw_sw_5() ----\n    \n    /**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */\n    get_routes() {\n        let routes = [\n            this.route_w_trk_1, this.route_w_trk_2, this.route_w_trk_3,\n            this.route_e_trk_1, this.route_e_trk_2\n        ];\n\n        return routes;\n    }\n    // ---- END get_routes() ----\n\n    /**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */\n    get_interlocking_status() {\n        let status = {\n            sw_1: this.sw_1,\n            sw_3: this.sw_3,\n            sw_5: this.sw_5,\n            routes: this.get_routes(),\n            routed_trk_1: this.routed_trk_1,\n            routed_trk_2: this.routed_trk_2,\n            occupied_trk_1: this.trk_1_occupied,\n            occupied_trk_2: this.trk_2_occupied\n        }\n\n        return status;\n    }\n    // ---- END get_interlocking_status() ----\n}\n\n// This is required when using ReactJS\nexport default CTC_PA;"]},"metadata":{},"sourceType":"module"}