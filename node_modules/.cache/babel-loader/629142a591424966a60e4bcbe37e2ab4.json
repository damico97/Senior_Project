{"ast":null,"code":"import _classCallCheck from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/inherits\";/**\n * @file Howells.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for Howells Interlocking\n *\n * Extends the React Component Class and is the UI part of the Howells Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */ // Import React Component\nimport React,{Component}from'react';// Import CSS style sheet\nimport'../../../css/Southern_Tier_Line/howells.css';// Import Images\n// Switch Images\nimport SW_U_W from'../../../images/SW_U_W.png';import SW_U_W_Lined from'../../../images/SW_U_W_Lined.png';import SW_U_W_Occupied from'../../../images/SW_U_W_Occupied.png';import SW_U_W_R from'../../../images/SW_U_W_R.png';import SW_U_W_R_Lined from'../../../images/SW_U_W_R_Lined.png';import SW_U_W_R_Occupied from'../../../images/SW_U_W_R_Occupied.png';// Signal Images\nimport SIG_W from'../../../images/SIG_W.png';import SIG_W_Clear from'../../../images/SIG_W_Clear.png';import SIG_W_Stop from'../../../images/SIG_W_Stop.png';import SIG_E from'../../../images/SIG_E.png';import SIG_E_Clear from'../../../images/SIG_E_Clear.png';import SIG_E_Stop from'../../../images/SIG_E_Stop.png';// Color Constants For Drawing Routes\nvar Empty='#999999';var Green='#75fa4c';var Red='#eb3323';/**\n * The React JSX Component Class for the Howells Interlocking\n * \n * This class is a JSX React Component for the Howells Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */var Howells=/*#__PURE__*/function(_Component){_inherits(Howells,_Component);function Howells(){var _getPrototypeOf2;var _this;_classCallCheck(this,Howells);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(Howells)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={// Switch Status\nsw_3:_this.props.status.sw_3,// Image File for the switch - Will change depending on route\nsw_3_src:SW_U_W,// Colors for tail tracks - Will change depending on route\ntail_1_w:Empty,tail_2_w:Empty,tail_e:Empty,// Image File for the signals - Will change depending on route\nsig_2w_src:SIG_W,sig_2e_src:SIG_E,sig_2es_src:SIG_E,// Information For Interlocking Routes\noccupied:_this.props.status.occupied,routes:_this.props.status.routes};return _this;}_createClass(Howells,[{key:\"componentWillReceiveProps\",/**\n     * componentWillReceiveProps()\n     * @summary Function that updates the state of the component\n     * \n     * The data that is being changed is passed down from the CTC classes in the simulation backend\n     * \n     * @param nextProps, the new data to set the component state too\n     */value:function componentWillReceiveProps(nextProps){this.setState({sw_3:nextProps.status.sw_3,occupied:nextProps.status.occupied,routes:nextProps.status.routes});}// ---- END componentWillReceiveProps() ----\n/**\n     * render()\n     * @summary standard React function that draws the interlocking to the screen\n     */},{key:\"render\",value:function render(){// Clear all the drawings from the interlocking so if a train clears the route is gone\nthis.reset_drawings();// Set the switch images based off the state of each crossover\nthis.set_switch_img();// Draw all the current routes in the interlocking\nthis.set_route_drawings();// Returns the HTML to draw the interlocking and it's current state to the screen\nreturn React.createElement(\"div\",null,React.createElement(\"div\",{className:\"howells_title\"},\"CP HOWELLS\"),React.createElement(\"div\",{className:\"howells_milepost\"},\"MP 69.1SR\"),React.createElement(\"div\",{className:\"howells_2_west\",style:{background:this.state.tail_2_w}}),React.createElement(\"div\",{className:\"howells_1_west\",style:{background:this.state.tail_1_w}}),React.createElement(\"div\",{className:\"howells_SW_3\",onClick:this.props.throw_sw_3},React.createElement(\"img\",{src:this.state.sw_3_src})),React.createElement(\"div\",{className:\"howells_east\",style:{background:this.state.tail_e}}),React.createElement(\"div\",{className:\"howells_sig_2es\",onClick:this.props.click_sig_2es},React.createElement(\"img\",{src:this.state.sig_2es_src})),React.createElement(\"div\",{className:\"howells_sig_2e\",onClick:this.props.click_sig_2e},React.createElement(\"img\",{src:this.state.sig_2e_src})),React.createElement(\"div\",{className:\"howells_sig_2w\",onClick:this.props.click_sig_2w},React.createElement(\"img\",{src:this.state.sig_2w_src})));}// ---- END render() ----\n/**\n     * @summary Sets the drawing for the route through the interlocking\n     * \n     * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n     * will change depending on if the interlocking is occupied or not\n     */},{key:\"set_route_drawings\",value:function set_route_drawings(){// Setting the color of the tracks depending on if the interlocking in occupied or not\nvar color=null;if(this.state.occupied){color=Red;}else{color=Green;}// Loop through all the routes\nfor(var i=0;i<this.state.routes.length;i++){if(this.state.routes[i]===\"W_1_1__|__1_ov_howells\"||this.state.routes[i]===\"E_1_1__|__1_howells_hall\"){// Tail Tracks\nthis.state.tail_e=color;this.state.tail_1_w=color;// The Route Is Occupied\nif(this.state.occupied){// Switches\nthis.state.sw_3_src=SW_U_W_Occupied;// Signals\nthis.state.sig_2w_src=SIG_W_Stop;this.state.sig_2e_src=SIG_E_Stop;}// The Route Is NOT Occupied\nelse{// Switches\nthis.state.sw_3_src=SW_U_W_Lined;// Signals\n// West Bound Signals\nif(this.state.routes[i]===\"W_1_1__|__1_ov_howells\"){this.state.sig_2w_src=SIG_W_Clear;this.state.sig_2e_src=SIG_E_Stop;this.state.sig_2es_src=SIG_E_Stop;}// East Bound Signals\nelse{this.state.sig_2w_src=SIG_W_Stop;this.state.sig_2e_src=SIG_E_Clear;this.state.sig_2es_src=SIG_E_Stop;}}}else if(this.state.routes[i]===\"W_1_2__|__2_ov_howells\"||this.state.routes[i]===\"E_2_1__|__1_howells_hall\"){// Tail Tracks\nthis.state.tail_e=color;this.state.tail_2_w=color;// The Route Is Occupied\nif(this.state.occupied){// Switches\nthis.state.sw_3_src=SW_U_W_R_Occupied;// Signals\nthis.state.sig_2w_src=SIG_W_Stop;this.state.sig_2e_src=SIG_E_Stop;this.state.sig_2es_src=SIG_E_Stop;}// The Route Is NOT Occupied\nelse{// Switches\nthis.state.sw_3_src=SW_U_W_R_Lined;// Signals\n// West Bound Signals\nif(this.state.routes[i]===\"W_1_2__|__2_ov_howells\"){this.state.sig_2w_src=SIG_W_Clear;this.state.sig_2e_src=SIG_E_Stop;this.state.sig_2es_src=SIG_E_Stop;}// East Bound Signals\nelse{this.state.sig_2w_src=SIG_W_Stop;this.state.sig_2e_src=SIG_E_Stop;this.state.sig_2es_src=SIG_E_Clear;}}}}}// ---- END set_route_drawings() ----\n/**\n     * set_switch_img()\n     * @summary Changes image sources for the switches, depending on switch status\n     * \n     * This function uses the data passed in through status from the CTC classes and \n     * shows if the switches are reversed or not on the screen, by changing the image\n     * source files, to the correct .png file respectivly\n     */},{key:\"set_switch_img\",value:function set_switch_img(){// Set SW #3\n// SW #3 Reversed\nif(this.state.sw_3){this.state.sw_3_src=SW_U_W_R;}// SW #3 Normal\nelse{this.state.sw_3_src=SW_U_W;}}// ---- END set_switch_img() ----\n/**\n     * @summary Function to reset the signal images and track colors\n     * \n     * This function is need, because if the player was to remove a route,\n     * or when the train clears the interlocking nothing will clear the route\n     * the is displaying on the screen, even if it's gone in the backend\n     */},{key:\"reset_drawings\",value:function reset_drawings(){this.state.tail_1_w=Empty;this.state.tail_2_w=Empty;this.state.tail_e=Empty;this.state.sig_2w_src=SIG_W;this.state.sig_2e_src=SIG_E;this.state.sig_2es_src=SIG_E;}//---- END reset_drawings() ----\n}]);return Howells;}(Component);// Export the interlocking to be drawn on the screen\nexport default Howells;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Southern_Tier_Line/Howells.jsx"],"names":["React","Component","SW_U_W","SW_U_W_Lined","SW_U_W_Occupied","SW_U_W_R","SW_U_W_R_Lined","SW_U_W_R_Occupied","SIG_W","SIG_W_Clear","SIG_W_Stop","SIG_E","SIG_E_Clear","SIG_E_Stop","Empty","Green","Red","Howells","state","sw_3","props","status","sw_3_src","tail_1_w","tail_2_w","tail_e","sig_2w_src","sig_2e_src","sig_2es_src","occupied","routes","nextProps","setState","reset_drawings","set_switch_img","set_route_drawings","background","throw_sw_3","click_sig_2es","click_sig_2e","click_sig_2w","color","i","length"],"mappings":"4qBAAA;;;;;;;;;IAWA;AACA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA;AACA,MAAO,6CAAP,CAEA;AACA;AACA,MAAOC,CAAAA,MAAP,KAAmB,4BAAnB,CACA,MAAOC,CAAAA,YAAP,KAAyB,kCAAzB,CACA,MAAOC,CAAAA,eAAP,KAA4B,qCAA5B,CACA,MAAOC,CAAAA,QAAP,KAAqB,8BAArB,CACA,MAAOC,CAAAA,cAAP,KAA2B,oCAA3B,CACA,MAAOC,CAAAA,iBAAP,KAA8B,uCAA9B,CAEA;AACA,MAAOC,CAAAA,KAAP,KAAkB,2BAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,iCAAxB,CACA,MAAOC,CAAAA,UAAP,KAAuB,gCAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,2BAAlB,CACA,MAAOC,CAAAA,WAAP,KAAwB,iCAAxB,CACA,MAAOC,CAAAA,UAAP,KAAuB,gCAAvB,CAEA;AACA,GAAMC,CAAAA,KAAK,CAAG,SAAd,CACA,GAAMC,CAAAA,KAAK,CAAG,SAAd,CACA,GAAMC,CAAAA,GAAG,CAAG,SAAZ,CAGA;;;;;;MAOMC,CAAAA,O,mYAUFC,K,CAAQ,CACJ;AACAC,IAAI,CAAE,MAAKC,KAAL,CAAWC,MAAX,CAAkBF,IAFpB,CAGJ;AACAG,QAAQ,CAAEpB,MAJN,CAKJ;AACAqB,QAAQ,CAAET,KANN,CAOJU,QAAQ,CAAEV,KAPN,CAQJW,MAAM,CAAEX,KARJ,CASJ;AACAY,UAAU,CAAElB,KAVR,CAWJmB,UAAU,CAAEhB,KAXR,CAYJiB,WAAW,CAAEjB,KAZT,CAaJ;AACAkB,QAAQ,CAAE,MAAKT,KAAL,CAAWC,MAAX,CAAkBQ,QAdxB,CAeJC,MAAM,CAAE,MAAKV,KAAL,CAAWC,MAAX,CAAkBS,MAftB,C,sEAkBR;;;;;;;gDAQ0BC,S,CAAU,CAChC,KAAKC,QAAL,CAAc,CACVb,IAAI,CAAEY,SAAS,CAACV,MAAV,CAAiBF,IADb,CAEVU,QAAQ,CAAEE,SAAS,CAACV,MAAV,CAAiBQ,QAFjB,CAGVC,MAAM,CAAEC,SAAS,CAACV,MAAV,CAAiBS,MAHf,CAAd,EAKH,CACD;AAEA;;;8CAIS,CACL;AACA,KAAKG,cAAL,GACA;AACA,KAAKC,cAAL,GACA;AACA,KAAKC,kBAAL,GAEA;AACA,MACI,gCAEI,2BAAK,SAAS,CAAC,eAAf,eAFJ,CAGI,2BAAK,SAAS,CAAC,kBAAf,cAHJ,CAKI,2BAAK,SAAS,CAAC,gBAAf,CAAgC,KAAK,CAAE,CAACC,UAAU,CAAE,KAAKlB,KAAL,CAAWM,QAAxB,CAAvC,EALJ,CAMI,2BAAK,SAAS,CAAC,gBAAf,CAAgC,KAAK,CAAE,CAACY,UAAU,CAAE,KAAKlB,KAAL,CAAWK,QAAxB,CAAvC,EANJ,CAQI,2BAAK,SAAS,CAAC,cAAf,CAA8B,OAAO,CAAE,KAAKH,KAAL,CAAWiB,UAAlD,EAA8D,2BAAK,GAAG,CAAE,KAAKnB,KAAL,CAAWI,QAArB,EAA9D,CARJ,CAUI,2BAAK,SAAS,CAAC,cAAf,CAA8B,KAAK,CAAE,CAACc,UAAU,CAAE,KAAKlB,KAAL,CAAWO,MAAxB,CAArC,EAVJ,CAYI,2BAAK,SAAS,CAAC,iBAAf,CAAiC,OAAO,CAAE,KAAKL,KAAL,CAAWkB,aAArD,EAAoE,2BAAK,GAAG,CAAE,KAAKpB,KAAL,CAAWU,WAArB,EAApE,CAZJ,CAaI,2BAAK,SAAS,CAAC,gBAAf,CAAgC,OAAO,CAAE,KAAKR,KAAL,CAAWmB,YAApD,EAAkE,2BAAK,GAAG,CAAE,KAAKrB,KAAL,CAAWS,UAArB,EAAlE,CAbJ,CAcI,2BAAK,SAAS,CAAC,gBAAf,CAAgC,OAAO,CAAE,KAAKP,KAAL,CAAWoB,YAApD,EAAkE,2BAAK,GAAG,CAAE,KAAKtB,KAAL,CAAWQ,UAArB,EAAlE,CAdJ,CADJ,CAkBH,CACD;AAEA;;;;;sEAMqB,CACjB;AACA,GAAIe,CAAAA,KAAK,CAAG,IAAZ,CACA,GAAI,KAAKvB,KAAL,CAAWW,QAAf,CAAyB,CACrBY,KAAK,CAAGzB,GAAR,CACH,CAFD,IAGK,CACDyB,KAAK,CAAG1B,KAAR,CACH,CAED;AACA,IAAK,GAAI2B,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,KAAKxB,KAAL,CAAWY,MAAX,CAAkBa,MAAtC,CAA8CD,CAAC,EAA/C,CAAmD,CAC/C,GAAI,KAAKxB,KAAL,CAAWY,MAAX,CAAkBY,CAAlB,IAAyB,wBAAzB,EAAqD,KAAKxB,KAAL,CAAWY,MAAX,CAAkBY,CAAlB,IAAyB,0BAAlF,CAA8G,CAC1G;AACA,KAAKxB,KAAL,CAAWO,MAAX,CAAoBgB,KAApB,CACA,KAAKvB,KAAL,CAAWK,QAAX,CAAsBkB,KAAtB,CAEA;AACA,GAAI,KAAKvB,KAAL,CAAWW,QAAf,CAAyB,CACrB;AACA,KAAKX,KAAL,CAAWI,QAAX,CAAsBlB,eAAtB,CAEA;AACA,KAAKc,KAAL,CAAWQ,UAAX,CAAwBhB,UAAxB,CACA,KAAKQ,KAAL,CAAWS,UAAX,CAAwBd,UAAxB,CACH,CACD;AARA,IASK,CACD;AACA,KAAKK,KAAL,CAAWI,QAAX,CAAsBnB,YAAtB,CAEA;AACA;AACA,GAAI,KAAKe,KAAL,CAAWY,MAAX,CAAkBY,CAAlB,IAAyB,wBAA7B,CAAuD,CACnD,KAAKxB,KAAL,CAAWQ,UAAX,CAAwBjB,WAAxB,CACA,KAAKS,KAAL,CAAWS,UAAX,CAAwBd,UAAxB,CACA,KAAKK,KAAL,CAAWU,WAAX,CAAyBf,UAAzB,CACH,CACD;AALA,IAMK,CACD,KAAKK,KAAL,CAAWQ,UAAX,CAAwBhB,UAAxB,CACA,KAAKQ,KAAL,CAAWS,UAAX,CAAwBf,WAAxB,CACA,KAAKM,KAAL,CAAWU,WAAX,CAAyBf,UAAzB,CACH,CACJ,CACJ,CAjCD,IAkCK,IAAI,KAAKK,KAAL,CAAWY,MAAX,CAAkBY,CAAlB,IAAyB,wBAAzB,EAAqD,KAAKxB,KAAL,CAAWY,MAAX,CAAkBY,CAAlB,IAAyB,0BAAlF,CAA8G,CAC/G;AACA,KAAKxB,KAAL,CAAWO,MAAX,CAAoBgB,KAApB,CACA,KAAKvB,KAAL,CAAWM,QAAX,CAAsBiB,KAAtB,CAEA;AACA,GAAI,KAAKvB,KAAL,CAAWW,QAAf,CAAyB,CACrB;AACA,KAAKX,KAAL,CAAWI,QAAX,CAAsBf,iBAAtB,CAEA;AACA,KAAKW,KAAL,CAAWQ,UAAX,CAAwBhB,UAAxB,CACA,KAAKQ,KAAL,CAAWS,UAAX,CAAwBd,UAAxB,CACA,KAAKK,KAAL,CAAWU,WAAX,CAAyBf,UAAzB,CACH,CACD;AATA,IAUK,CACD;AACA,KAAKK,KAAL,CAAWI,QAAX,CAAsBhB,cAAtB,CAEA;AACA;AACA,GAAI,KAAKY,KAAL,CAAWY,MAAX,CAAkBY,CAAlB,IAAyB,wBAA7B,CAAuD,CACnD,KAAKxB,KAAL,CAAWQ,UAAX,CAAwBjB,WAAxB,CACA,KAAKS,KAAL,CAAWS,UAAX,CAAwBd,UAAxB,CACA,KAAKK,KAAL,CAAWU,WAAX,CAAyBf,UAAzB,CACH,CACD;AALA,IAMK,CACD,KAAKK,KAAL,CAAWQ,UAAX,CAAwBhB,UAAxB,CACA,KAAKQ,KAAL,CAAWS,UAAX,CAAwBd,UAAxB,CACA,KAAKK,KAAL,CAAWU,WAAX,CAAyBhB,WAAzB,CACH,CACJ,CACJ,CACJ,CACJ,CACD;AAEA;;;;;;;8DAQiB,CACb;AACA;AACA,GAAI,KAAKM,KAAL,CAAWC,IAAf,CAAqB,CACjB,KAAKD,KAAL,CAAWI,QAAX,CAAsBjB,QAAtB,CACH,CACD;AAHA,IAIK,CACD,KAAKa,KAAL,CAAWI,QAAX,CAAsBpB,MAAtB,CACH,CACJ,CACD;AAEA;;;;;;8DAOiB,CACb,KAAKgB,KAAL,CAAWK,QAAX,CAAsBT,KAAtB,CACA,KAAKI,KAAL,CAAWM,QAAX,CAAsBV,KAAtB,CACA,KAAKI,KAAL,CAAWO,MAAX,CAAoBX,KAApB,CAEA,KAAKI,KAAL,CAAWQ,UAAX,CAAwBlB,KAAxB,CACA,KAAKU,KAAL,CAAWS,UAAX,CAAwBhB,KAAxB,CACA,KAAKO,KAAL,CAAWU,WAAX,CAAyBjB,KAAzB,CACH,CACD;qBA/MkBV,S,EAkNtB;AACA,cAAegB,CAAAA,OAAf","sourcesContent":["/**\n * @file Howells.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for Howells Interlocking\n *\n * Extends the React Component Class and is the UI part of the Howells Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\n\n// Import React Component\nimport React, { Component } from 'react';\n// Import CSS style sheet\nimport '../../../css/Southern_Tier_Line/howells.css';\n \n// Import Images\n// Switch Images\nimport SW_U_W from '../../../images/SW_U_W.png';\nimport SW_U_W_Lined from '../../../images/SW_U_W_Lined.png';\nimport SW_U_W_Occupied from '../../../images/SW_U_W_Occupied.png';\nimport SW_U_W_R from '../../../images/SW_U_W_R.png';\nimport SW_U_W_R_Lined from '../../../images/SW_U_W_R_Lined.png';\nimport SW_U_W_R_Occupied from '../../../images/SW_U_W_R_Occupied.png';\n\n// Signal Images\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png';\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n\n\n/**\n * The React JSX Component Class for the Howells Interlocking\n * \n * This class is a JSX React Component for the Howells Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\nclass Howells extends Component {\n    /**\n     * State\n     * @summary Object that holds the state or status information for the component\n     * \n     * This object holds all the information for the interlocking that is required to display the routes \n     * correctly\n     * \n     * Anything that has \"this.props.\" is passed down from the CTC interlocking class\n     */\n    state = {  \n        // Switch Status\n        sw_3: this.props.status.sw_3,\n        // Image File for the switch - Will change depending on route\n        sw_3_src: SW_U_W,\n        // Colors for tail tracks - Will change depending on route\n        tail_1_w: Empty,\n        tail_2_w: Empty,\n        tail_e: Empty,\n        // Image File for the signals - Will change depending on route\n        sig_2w_src: SIG_W,\n        sig_2e_src: SIG_E,\n        sig_2es_src: SIG_E,\n        // Information For Interlocking Routes\n        occupied: this.props.status.occupied,\n        routes: this.props.status.routes\n    };\n\n    /**\n     * componentWillReceiveProps()\n     * @summary Function that updates the state of the component\n     * \n     * The data that is being changed is passed down from the CTC classes in the simulation backend\n     * \n     * @param nextProps, the new data to set the component state too\n     */\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            sw_3: nextProps.status.sw_3,\n            occupied: nextProps.status.occupied,\n            routes: nextProps.status.routes\n        });\n    }\n    // ---- END componentWillReceiveProps() ----\n\n    /**\n     * render()\n     * @summary standard React function that draws the interlocking to the screen\n     */\n    render() { \n        // Clear all the drawings from the interlocking so if a train clears the route is gone\n        this.reset_drawings(); \n        // Set the switch images based off the state of each crossover\n        this.set_switch_img();\n        // Draw all the current routes in the interlocking\n        this.set_route_drawings();\n\n        // Returns the HTML to draw the interlocking and it's current state to the screen\n        return (  \n            <div>\n                {/* Tags */}\n                <div className=\"howells_title\">CP HOWELLS</div>\n                <div className=\"howells_milepost\">MP 69.1SR</div>\n                {/* West Side Tail Tracks */}\n                <div className=\"howells_2_west\" style={{background: this.state.tail_2_w}}></div>\n                <div className=\"howells_1_west\" style={{background: this.state.tail_1_w}}></div>\n                {/* Switches */}\n                <div className=\"howells_SW_3\" onClick={this.props.throw_sw_3}><img src={this.state.sw_3_src}/></div>\n                {/* East Side Tail Tracks */}\n                <div className=\"howells_east\" style={{background: this.state.tail_e}}></div>\n                {/* Signals */}\n                <div className=\"howells_sig_2es\" onClick={this.props.click_sig_2es}><img src={this.state.sig_2es_src}/></div>\n                <div className=\"howells_sig_2e\" onClick={this.props.click_sig_2e}><img src={this.state.sig_2e_src}/></div>\n                <div className=\"howells_sig_2w\" onClick={this.props.click_sig_2w}><img src={this.state.sig_2w_src}/></div>\n            </div>\n        );\n    }\n    // ---- END render() ----\n\n    /**\n     * @summary Sets the drawing for the route through the interlocking\n     * \n     * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n     * will change depending on if the interlocking is occupied or not\n     */\n    set_route_drawings() {\n        // Setting the color of the tracks depending on if the interlocking in occupied or not\n        let color = null;\n        if (this.state.occupied) {\n            color = Red;\n        }\n        else {\n            color = Green;\n        }\n\n        // Loop through all the routes\n        for (let i = 0; i < this.state.routes.length; i++) {\n            if (this.state.routes[i] === \"W_1_1__|__1_ov_howells\" || this.state.routes[i] === \"E_1_1__|__1_howells_hall\") {\n                // Tail Tracks\n                this.state.tail_e = color;\n                this.state.tail_1_w = color;\n\n                // The Route Is Occupied\n                if (this.state.occupied) {\n                    // Switches\n                    this.state.sw_3_src = SW_U_W_Occupied;\n\n                    // Signals\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switches\n                    this.state.sw_3_src = SW_U_W_Lined;\n\n                    // Signals\n                    // West Bound Signals\n                    if (this.state.routes[i] === \"W_1_1__|__1_ov_howells\") {\n                        this.state.sig_2w_src = SIG_W_Clear;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                        this.state.sig_2es_src = SIG_E_Stop;\n                    }\n                    // East Bound Signals\n                    else {\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_2e_src = SIG_E_Clear;\n                        this.state.sig_2es_src = SIG_E_Stop;\n                    }\n                }\n            }\n            else if (this.state.routes[i] === \"W_1_2__|__2_ov_howells\" || this.state.routes[i] === \"E_2_1__|__1_howells_hall\") {\n                // Tail Tracks\n                this.state.tail_e = color;\n                this.state.tail_2_w = color;\n\n                // The Route Is Occupied\n                if (this.state.occupied) {\n                    // Switches\n                    this.state.sw_3_src = SW_U_W_R_Occupied;\n\n                    // Signals\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_2es_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switches\n                    this.state.sw_3_src = SW_U_W_R_Lined;\n\n                    // Signals\n                    // West Bound Signals\n                    if (this.state.routes[i] === \"W_1_2__|__2_ov_howells\") {\n                        this.state.sig_2w_src = SIG_W_Clear;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                        this.state.sig_2es_src = SIG_E_Stop;\n                    }\n                    // East Bound Signals\n                    else {\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                        this.state.sig_2es_src = SIG_E_Clear;\n                    }\n                }\n            }\n        }\n    }\n    // ---- END set_route_drawings() ----\n\n    /**\n     * set_switch_img()\n     * @summary Changes image sources for the switches, depending on switch status\n     * \n     * This function uses the data passed in through status from the CTC classes and \n     * shows if the switches are reversed or not on the screen, by changing the image\n     * source files, to the correct .png file respectivly\n     */\n    set_switch_img() {\n        // Set SW #3\n        // SW #3 Reversed\n        if (this.state.sw_3) {\n            this.state.sw_3_src = SW_U_W_R;\n        }\n        // SW #3 Normal\n        else {\n            this.state.sw_3_src = SW_U_W;\n        }\n    }\n    // ---- END set_switch_img() ----\n\n    /**\n     * @summary Function to reset the signal images and track colors\n     * \n     * This function is need, because if the player was to remove a route,\n     * or when the train clears the interlocking nothing will clear the route\n     * the is displaying on the screen, even if it's gone in the backend\n     */\n    reset_drawings() {\n        this.state.tail_1_w = Empty;\n        this.state.tail_2_w = Empty;\n        this.state.tail_e = Empty;\n\n        this.state.sig_2w_src = SIG_W;\n        this.state.sig_2e_src = SIG_E;\n        this.state.sig_2es_src = SIG_E;\n    }\n    //---- END reset_drawings() ----\n}\n \n// Export the interlocking to be drawn on the screen\nexport default Howells;"]},"metadata":{},"sourceType":"module"}