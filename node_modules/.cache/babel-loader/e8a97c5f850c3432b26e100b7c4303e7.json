{"ast":null,"code":"var _jsxFileName = \"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Main_Line/Mill.jsx\";\n\n/**\n * @file Mill.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for Mill Interlocking\n *\n * Extends the React Component Class and is the UI part of the Mill Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\n// Import React Component\nimport React, { Component } from 'react'; // Import CSS Style Sheet\n\nimport '../../../css/Main_Line/mill.css'; // Import Images\n// Switch Images\n// Images for a 135 Crossover\n\nimport CX_135 from '../../../images/CX_135.png';\nimport CX_135_Lined_Top from '../../../images/CX_135_Lined_Top.png';\nimport CX_135_Lined_Bottom from '../../../images/CX_135_Lined_Bottom.png';\nimport CX_135_Lined_Both from '../../../images/CX_135_Lined_Both.png';\nimport CX_135_R from '../../../images/CX_135_R.png';\nimport CX_135_R_Lined from '../../../images/CX_135_R_Lined.png';\nimport CX_135_Lined_Top_Occupied_Bottom from '../../../images/CX_135_Lined_Top_Occupied_Bottom.png';\nimport CX_135_Occupied_Top_Lined_Bottom from '../../../images/CX_135_Occupied_Top_Lined_Bottom.png';\nimport CX_135_Occupied_Top from '../../../images/CX_135_Occupied_Top.png';\nimport CX_135_Occupied_Bottom from '../../../images/CX_135_Occupied_Bottom.png';\nimport CX_135_Occupied_Both from '../../../images/CX_135_Occupied_Both.png';\nimport CX_135_R_Occupied from '../../../images/CX_135_R_Occupied.png'; // Images for a 225 Crossover\n\nimport CX_225 from '../../../images/CX_225.png';\nimport CX_225_Lined_Top from '../../../images/CX_225_Lined_Top.png';\nimport CX_225_Lined_Bottom from '../../../images/CX_225_Lined_Bottom.png';\nimport CX_225_Lined_Both from '../../../images/CX_225_Lined_Both.png';\nimport CX_225_R from '../../../images/CX_225_R.png';\nimport CX_225_R_Lined from '../../../images/CX_225_R_Lined.png';\nimport CX_225_Lined_Top_Occupied_Bottom from '../../../images/CX_225_Lined_Top_Occupied_Bottom.png';\nimport CX_225_Occupied_Top_Lined_Bottom from '../../../images/CX_225_Occupied_Top_Lined_Bottom.png';\nimport CX_225_Occupied_Top from '../../../images/CX_225_Occupied_Top.png';\nimport CX_225_Occupied_Bottom from '../../../images/CX_225_Occupied_Bottom.png';\nimport CX_225_Occupied_Both from '../../../images/CX_225_Occupied_Both.png';\nimport CX_225_R_Occupied from '../../../images/CX_225_R_Occupied.png'; // Signal Images\n\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png'; // Color Constants For Drawing Routes\n\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n/**\n * The React JSX Component Class for the Mill Interlocking\n * \n * This class is a JSX React Component for the Mill Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\n\nclass Mill extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Switch Status\n      sw_1: this.props.status.sw_1,\n      sw_3: this.props.status.sw_3,\n      // Image File for the switch - Will change depending on route\n      sw_1_src: CX_225,\n      sw_3_src: CX_135,\n      // Image File for the signals - Will change depending on route\n      sig_2w_src: SIG_W,\n      sig_4w_src: SIG_W,\n      sig_2e_src: SIG_E,\n      sig_4e_src: SIG_E,\n      // Colors for tail tracks - Will change depending on route\n      tail_1_e: Empty,\n      tail_1_w: Empty,\n      tail_2_e: Empty,\n      tail_2_w: Empty,\n      // Information For Interlocking Routes\n      occupied_trk_1: this.props.status.occupied_trk_1,\n      occupied_trk_2: this.props.status.occupied_trk_2,\n      route_1: this.props.status.routed_trk_1,\n      route_2: this.props.status.routed_trk_2,\n      routes: this.props.status.routes\n    };\n\n    this.set_switch_img = () => {\n      // Set SW #1\n      // SW #1 Reversed\n      if (this.state.sw_1) {\n        this.state.sw_1_src = CX_225_R;\n      } // SW #1 Normal\n      else {\n          this.state.sw_1_src = CX_225;\n        } // Set SW #3\n      // SW #3 Reversed\n\n\n      if (this.state.sw_3) {\n        this.state.sw_3_src = CX_135_R;\n      } // SW #3 Normal\n      else {\n          this.state.sw_3_src = CX_135;\n        }\n    };\n  }\n\n  /**\n   * componentWillReceiveProps()\n   * @summary Function that updates the state of the component\n   * \n   * The data that is being changed is passed down from the CTC classes in the simulation backend\n   * \n   * @param nextProps, the new data to set the component state too\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      sw_1: nextProps.status.sw_1,\n      sw_3: nextProps.status.sw_3,\n      route_1: nextProps.status.routed_trk_1,\n      route_2: nextProps.status.routed_trk_2,\n      occupied_trk_1: nextProps.status.occupied_trk_1,\n      occupied_trk_2: nextProps.status.occupied_trk_2,\n      routes: nextProps.status.routes\n    });\n  } // ---- END componentWillReceiveProps() ----\n\n  /**\n   * render()\n   * @summary standard React function that draws the interlocking to the screen\n   */\n\n\n  render() {\n    // Clear all the drawings from the interlocking so if a train clears the route is gone\n    this.reset_drawings(); // Set the switch images based off the state of each crossover\n\n    this.set_switch_img(); // Draw all the current routes in the interlocking\n\n    this.set_route_drawing(); // Returns the HTML to draw the interlocking and it's current state to the screen\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mill_title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"MILL\"), React.createElement(\"div\", {\n      className: \"mill_milepost\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"MP 11.1\"), React.createElement(\"div\", {\n      className: \"mill_1_east\",\n      style: {\n        background: this.state.tail_1_w\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"mill_2_east\",\n      style: {\n        background: this.state.tail_2_w\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"mill_SW_3\",\n      onClick: this.props.throw_sw_3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sw_3_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"mill_SW_1\",\n      onClick: this.props.throw_sw_1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sw_1_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"mill_1_west\",\n      style: {\n        background: this.state.tail_1_e\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"mill_2_west\",\n      style: {\n        background: this.state.tail_2_e\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"mill_sig_2e\",\n      onClick: this.props.click_sig_2e,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_2e_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"mill_sig_4e\",\n      onClick: this.props.click_sig_4e,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_4e_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"mill_sig_2w\",\n      onClick: this.props.click_sig_2w,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_2w_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"mill_sig_4w\",\n      onClick: this.props.click_sig_4w,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_4w_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })));\n  } // ---- END render() ----\n\n  /**\n   * set_route_drawings()\n   * @summary Sets the drawing for the route through the interlocking\n   * \n   * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n   * will change depending on if the interlocking is occupied or not.\n   */\n\n\n  set_route_drawing() {\n    let color_1 = Empty;\n    let color_2 = Empty; // Set Track Colors\n    // If each track has a route\n\n    if (this.state.route_1) {\n      color_1 = Green;\n    }\n\n    if (this.state.route_2) {\n      color_2 = Green;\n    } // If each track is occupied\n\n\n    if (this.state.occupied_trk_1) {\n      color_1 = Red;\n    }\n\n    if (this.state.occupied_trk_2) {\n      color_2 = Red;\n    } // Loop Through All The Routes\n\n\n    for (let i = 0; i < this.state.routes.length; i++) {\n      if (this.state.routes[i] === \"W_1_1__|__1_suscon_mill\" || this.state.routes[i] === \"E_1_1__|__1_mill_westSecaucus\") {\n        // Tail Tracks\n        this.state.tail_1_e = color_1;\n        this.state.tail_1_w = color_1; // If the Route Is Occupied\n\n        if (this.state.occupied_trk_1) {\n          // Switches \n          // Track #2 is Routed\n          if (this.state.route_2) {\n            this.state.sw_1_src = CX_225_Occupied_Top_Lined_Bottom;\n            this.state.sw_3_src = CX_135_Occupied_Top_Lined_Bottom;\n          } // Track #2 is Occupied\n          else if (this.state.occupied_trk_2) {\n              this.state.sw_1_src = CX_225_Occupied_Both;\n              this.state.sw_3_src = CX_135_Occupied_Both;\n            } // Nothing Track #2\n            else {\n                this.state.sw_1_src = CX_225_Occupied_Top;\n                this.state.sw_3_src = CX_135_Occupied_Top;\n              } // Signals \n\n\n          this.state.sig_2w_src = SIG_W_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switches \n            // Track #2 is Routed\n            if (this.state.route_2) {\n              this.state.sw_1_src = CX_225_Lined_Both;\n              this.state.sw_3_src = CX_135_Lined_Both;\n            } // Track #2 is Occupied\n            else if (this.state.occupied_trk_2) {\n                this.state.sw_1_src = CX_225_Lined_Top_Occupied_Bottom;\n                this.state.sw_3_src = CX_135_Lined_Top_Occupied_Bottom;\n              } // Nothing Track #2\n              else {\n                  this.state.sw_1_src = CX_225_Lined_Top;\n                  this.state.sw_3_src = CX_135_Lined_Top;\n                } // Signals\n            // West Bound Signals \n\n\n            if (this.state.routes[i] === \"W_1_1__|__1_suscon_mill\") {\n              this.state.sig_2w_src = SIG_W_Clear;\n              this.state.sig_2e_src = SIG_E_Stop;\n            } // East Bound Signals\n            else {\n                this.state.sig_2w_src = SIG_W_Stop;\n                this.state.sig_2e_src = SIG_E_Clear;\n              }\n          }\n      } else if (this.state.routes[i] === \"W_2_2__|__2_suscon_mill\" || this.state.routes[i] === \"E_2_2__|__2_mill_westSecaucus\") {\n        // Tail Tracks\n        this.state.tail_2_e = color_2;\n        this.state.tail_2_w = color_2; // The Route Is Occupied\n\n        if (this.state.occupied_trk_2) {\n          // Switches\n          // Track #1 is Routed\n          if (this.state.route_1) {\n            this.state.sw_1_src = CX_225_Lined_Top_Occupied_Bottom;\n            this.state.sw_3_src = CX_135_Lined_Top_Occupied_Bottom;\n          } // Track #1 is Occupied\n          else if (this.state.occupied_trk_1) {\n              this.state.sw_1_src = CX_225_Occupied_Both;\n              this.state.sw_3_src = CX_135_Occupied_Both;\n            } // Nothing Track #2\n            else {\n                this.state.sw_1_src = CX_225_Occupied_Bottom;\n                this.state.sw_3_src = CX_135_Occupied_Bottom;\n              } // Signals \n\n\n          this.state.sig_4w = SIG_W_Stop;\n          this.state.sig_4e = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switches \n            // Track #1 is Routed\n            if (this.state.route_1) {\n              this.state.sw_1_src = CX_225_Lined_Both;\n              this.state.sw_3_src = CX_135_Lined_Both;\n            } // Track #1 is Occupied\n            else if (this.state.occupied_trk_1) {\n                this.state.sw_1_src = CX_225_Occupied_Top_Lined_Bottom;\n                this.state.sw_3_src = CX_135_Occupied_Top_Lined_Bottom;\n              } // Nothing Track #1\n              else {\n                  this.state.sw_1_src = CX_225_Lined_Bottom;\n                  this.state.sw_3_src = CX_135_Lined_Bottom;\n                } // Signals\n            // West Bound Signals\n\n\n            if (this.state.routes[i] === \"W_2_2__|__2_suscon_mill\") {\n              this.state.sig_4w_src = SIG_W_Clear;\n              this.state.sig_4e_src = SIG_E_Stop;\n            } // East Bound Signals\n            else {\n                this.state.sig_4w_src = SIG_W_Stop;\n                this.state.sig_4e_src = SIG_E_Clear;\n              }\n          }\n      } else if (this.state.routes[i] === \"W_1_2__|__2_suscon_mill\") {\n        // Tail Tracks\n        this.state.tail_1_e = color_1;\n        this.state.tail_2_w = color_1; // The Route Is Occupied\n\n        if (this.state.occupied_trk_1) {\n          // Switch Images\n          this.state.sw_1_src = CX_225_R_Occupied;\n          this.state.sw_3_src = CX_135_Occupied_Bottom; // Signal Images\n\n          this.state.sig_2w_src = SIG_W_Stop;\n          this.state.sig_4w_src = SIG_W_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n          this.state.sig_4e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switch Images\n            this.state.sw_1_src = CX_225_R_Lined;\n            this.state.sw_3_src = CX_135_Lined_Bottom; // Signal Images\n\n            this.state.sig_2w_src = SIG_W_Clear;\n            this.state.sig_4w_src = SIG_W_Stop;\n            this.state.sig_2e_src = SIG_E_Stop;\n            this.state.sig_4e_src = SIG_E_Stop;\n          }\n      } else if (this.state.routes[i] === \"E_2_1__|__1_mill_westSecaucus\") {\n        // Tail Tracks\n        this.state.tail_1_e = color_2;\n        this.state.tail_2_w = color_2; // The Route Is Occupied\n\n        if (this.state.occupied_trk_2) {\n          // Switch Images\n          this.state.sw_1_src = CX_225_R_Occupied;\n          this.state.sw_3_src = CX_135_Occupied_Bottom; // Signal Images\n\n          this.state.sig_2w_src = SIG_W_Stop;\n          this.state.sig_4w_src = SIG_W_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n          this.state.sig_4e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switch Images\n            this.state.sw_1_src = CX_225_R_Lined;\n            this.state.sw_3_src = CX_135_Lined_Bottom; // Signal Images\n\n            this.state.sig_2w_src = SIG_W_Stop;\n            this.state.sig_4w_src = SIG_W_Stop;\n            this.state.sig_2e_src = SIG_E_Stop;\n            this.state.sig_4e_src = SIG_E_Clear;\n          }\n      } else if (this.state.routes[i] === \"W_2_1__|__1_suscon_mill\") {\n        // Tail Tracks\n        this.state.tail_2_e = color_2;\n        this.state.tail_1_w = color_2; // The Route Is Occupied\n\n        if (this.state.occupied_trk_2) {\n          // Switch Images\n          this.state.sw_1_src = CX_225_Occupied_Bottom;\n          this.state.sw_3_src = CX_135_R_Occupied; // Signal Images\n\n          this.state.sig_2w_src = SIG_W_Stop;\n          this.state.sig_4w_src = SIG_W_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n          this.state.sig_4e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switch Images\n            this.state.sw_1_src = CX_225_Lined_Bottom;\n            this.state.sw_3_src = CX_135_R_Lined; // Signal Images\n\n            this.state.sig_2w_src = SIG_W_Stop;\n            this.state.sig_4w_src = SIG_W_Clear;\n            this.state.sig_2e_src = SIG_E_Stop;\n            this.state.sig_4e_src = SIG_E_Stop;\n          }\n      } else if (this.state.routes[i] === \"E_1_2__|__2_mill_westSecaucus\") {\n        // Tail Tracks\n        this.state.tail_2_e = color_1;\n        this.state.tail_1_w = color_1; // The Route Is Occupied\n\n        if (this.state.occupied_trk_2) {\n          // Switch Images\n          this.state.sw_1_src = CX_225_Occupied_Bottom;\n          this.state.sw_3_src = CX_135_R_Occupied; // Signal Images\n\n          this.state.sig_2w_src = SIG_W_Stop;\n          this.state.sig_4w_src = SIG_W_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n          this.state.sig_4e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switch Images\n            this.state.sw_1_src = CX_225_Lined_Bottom;\n            this.state.sw_3_src = CX_135_R_Lined; // Signal Images\n\n            this.state.sig_2w_src = SIG_W_Stop;\n            this.state.sig_4w_src = SIG_W_Stop;\n            this.state.sig_2e_src = SIG_E_Clear;\n            this.state.sig_4e_src = SIG_E_Stop;\n          }\n      }\n    }\n  } // ---- END set_route_drawings() ----\n\n  /**\n   * set_switch_img()\n   * @summary Changes image sources for the switches, depending on switch status\n   * \n   * This function uses the data passed in through status from the CTC classes and \n   * shows if the switches are reversed or not on the screen, by changing the image\n   * source files, to the correct .png file respectivly\n   */\n\n\n  // ---- END set_switch_image() ----\n\n  /**\n   * reset_drawings()\n   * @summary Function to reset the signal images and track colors\n   * \n   * This function is need, because if the player was to remove a route,\n   * or when the train clears the interlocking nothing will clear the route\n   * the is displaying on the screen, even if it's gone in the backend\n   */\n  reset_drawings() {\n    this.state.tail_1_e = Empty;\n    this.state.tail_1_w = Empty;\n    this.state.tail_2_e = Empty;\n    this.state.tail_2_w = Empty;\n    this.state.sig_2e_src = SIG_E;\n    this.state.sig_2w_src = SIG_W;\n    this.state.sig_4e_src = SIG_E;\n    this.state.sig_4w_src = SIG_W;\n  } //---- END reset_drawings() ----\n\n\n} // Export the interlocking to be drawn on the screen\n\n\nexport default Mill;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Main_Line/Mill.jsx"],"names":["React","Component","CX_135","CX_135_Lined_Top","CX_135_Lined_Bottom","CX_135_Lined_Both","CX_135_R","CX_135_R_Lined","CX_135_Lined_Top_Occupied_Bottom","CX_135_Occupied_Top_Lined_Bottom","CX_135_Occupied_Top","CX_135_Occupied_Bottom","CX_135_Occupied_Both","CX_135_R_Occupied","CX_225","CX_225_Lined_Top","CX_225_Lined_Bottom","CX_225_Lined_Both","CX_225_R","CX_225_R_Lined","CX_225_Lined_Top_Occupied_Bottom","CX_225_Occupied_Top_Lined_Bottom","CX_225_Occupied_Top","CX_225_Occupied_Bottom","CX_225_Occupied_Both","CX_225_R_Occupied","SIG_W","SIG_W_Clear","SIG_W_Stop","SIG_E","SIG_E_Clear","SIG_E_Stop","Empty","Green","Red","Mill","state","sw_1","props","status","sw_3","sw_1_src","sw_3_src","sig_2w_src","sig_4w_src","sig_2e_src","sig_4e_src","tail_1_e","tail_1_w","tail_2_e","tail_2_w","occupied_trk_1","occupied_trk_2","route_1","routed_trk_1","route_2","routed_trk_2","routes","set_switch_img","componentWillReceiveProps","nextProps","setState","render","reset_drawings","set_route_drawing","background","throw_sw_3","throw_sw_1","click_sig_2e","click_sig_4e","click_sig_2w","click_sig_4w","color_1","color_2","i","length","sig_4w","sig_4e"],"mappings":"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","sourcesContent":["/**\n * @file Mill.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for Mill Interlocking\n *\n * Extends the React Component Class and is the UI part of the Mill Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\n\n// Import React Component\nimport React, { Component } from 'react';\n// Import CSS Style Sheet\nimport '../../../css/Main_Line/mill.css';\n\n// Import Images\n// Switch Images\n// Images for a 135 Crossover\nimport CX_135 from '../../../images/CX_135.png';\nimport CX_135_Lined_Top from '../../../images/CX_135_Lined_Top.png';\nimport CX_135_Lined_Bottom from '../../../images/CX_135_Lined_Bottom.png';\nimport CX_135_Lined_Both from '../../../images/CX_135_Lined_Both.png';\nimport CX_135_R from '../../../images/CX_135_R.png';\nimport CX_135_R_Lined from '../../../images/CX_135_R_Lined.png';\nimport CX_135_Lined_Top_Occupied_Bottom from '../../../images/CX_135_Lined_Top_Occupied_Bottom.png';\nimport CX_135_Occupied_Top_Lined_Bottom from '../../../images/CX_135_Occupied_Top_Lined_Bottom.png';\nimport CX_135_Occupied_Top from '../../../images/CX_135_Occupied_Top.png';\nimport CX_135_Occupied_Bottom from '../../../images/CX_135_Occupied_Bottom.png';\nimport CX_135_Occupied_Both from '../../../images/CX_135_Occupied_Both.png';\nimport CX_135_R_Occupied from '../../../images/CX_135_R_Occupied.png';\n\n// Images for a 225 Crossover\nimport CX_225 from '../../../images/CX_225.png';\nimport CX_225_Lined_Top from '../../../images/CX_225_Lined_Top.png';\nimport CX_225_Lined_Bottom from '../../../images/CX_225_Lined_Bottom.png';\nimport CX_225_Lined_Both from '../../../images/CX_225_Lined_Both.png';\nimport CX_225_R from '../../../images/CX_225_R.png';\nimport CX_225_R_Lined from '../../../images/CX_225_R_Lined.png';\nimport CX_225_Lined_Top_Occupied_Bottom from '../../../images/CX_225_Lined_Top_Occupied_Bottom.png';\nimport CX_225_Occupied_Top_Lined_Bottom from '../../../images/CX_225_Occupied_Top_Lined_Bottom.png';\nimport CX_225_Occupied_Top from '../../../images/CX_225_Occupied_Top.png';\nimport CX_225_Occupied_Bottom from '../../../images/CX_225_Occupied_Bottom.png';\nimport CX_225_Occupied_Both from '../../../images/CX_225_Occupied_Both.png';\nimport CX_225_R_Occupied from '../../../images/CX_225_R_Occupied.png';\n\n// Signal Images\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png';\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n\n\n/**\n * The React JSX Component Class for the Mill Interlocking\n * \n * This class is a JSX React Component for the Mill Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\nclass Mill extends Component {\n    /**\n     * State\n     * @summary Object that holds the state or status information for the component\n     * \n     * This object holds all the information for the interlocking that is required to display the routes \n     * correctly\n     * \n     * Anything that has \"this.props.\" is passed down from the CTC interlocking class\n     */\n    state = {\n        // Switch Status\n        sw_1: this.props.status.sw_1,\n        sw_3: this.props.status.sw_3,\n        // Image File for the switch - Will change depending on route\n        sw_1_src: CX_225,\n        sw_3_src: CX_135,\n        // Image File for the signals - Will change depending on route\n        sig_2w_src: SIG_W,\n        sig_4w_src: SIG_W,\n        sig_2e_src: SIG_E,\n        sig_4e_src: SIG_E,\n        // Colors for tail tracks - Will change depending on route\n        tail_1_e: Empty,\n        tail_1_w: Empty,\n        tail_2_e: Empty,\n        tail_2_w: Empty,\n        // Information For Interlocking Routes\n        occupied_trk_1: this.props.status.occupied_trk_1,\n        occupied_trk_2: this.props.status.occupied_trk_2,\n        route_1: this.props.status.routed_trk_1,\n        route_2: this.props.status.routed_trk_2,\n        routes: this.props.status.routes\n    };\n\n    /**\n     * componentWillReceiveProps()\n     * @summary Function that updates the state of the component\n     * \n     * The data that is being changed is passed down from the CTC classes in the simulation backend\n     * \n     * @param nextProps, the new data to set the component state too\n     */\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            sw_1: nextProps.status.sw_1, \n            sw_3: nextProps.status.sw_3,\n\n            route_1: nextProps.status.routed_trk_1,\n            route_2: nextProps.status.routed_trk_2,\n            occupied_trk_1: nextProps.status.occupied_trk_1,\n            occupied_trk_2: nextProps.status.occupied_trk_2,\n            routes: nextProps.status.routes\n        });\n    }\n    // ---- END componentWillReceiveProps() ----\n\n    /**\n     * render()\n     * @summary standard React function that draws the interlocking to the screen\n     */\n    render() { \n        // Clear all the drawings from the interlocking so if a train clears the route is gone\n        this.reset_drawings();\n        // Set the switch images based off the state of each crossover\n        this.set_switch_img();\n        // Draw all the current routes in the interlocking\n        this.set_route_drawing();\n\n        // Returns the HTML to draw the interlocking and it's current state to the screen\n        return (  \n            <div>\n                {/* Tags */}\n                <div className=\"mill_title\">MILL</div>\n                <div className=\"mill_milepost\">MP 11.1</div>\n                {/* East Side Tail Tracks */}\n                <div className=\"mill_1_east\" style={{background: this.state.tail_1_w}}></div>\n                <div className=\"mill_2_east\" style={{background: this.state.tail_2_w}}></div>\n                {/* Switches */}\n                <div className=\"mill_SW_3\" onClick={this.props.throw_sw_3}><img src={this.state.sw_3_src}/></div>\n                <div className=\"mill_SW_1\" onClick={this.props.throw_sw_1}><img src={this.state.sw_1_src}/></div>\n                {/* West Side Tail Tracks */}\n                <div className=\"mill_1_west\" style={{background: this.state.tail_1_e}}></div>\n                <div className=\"mill_2_west\" style={{background: this.state.tail_2_e}}></div>\n                {/* Signals */}\n                <div className=\"mill_sig_2e\" onClick={this.props.click_sig_2e}><img src={this.state.sig_2e_src}/></div>\n                <div className=\"mill_sig_4e\" onClick={this.props.click_sig_4e}><img src={this.state.sig_4e_src}/></div>\n                <div className=\"mill_sig_2w\" onClick={this.props.click_sig_2w}><img src={this.state.sig_2w_src}/></div>\n                <div className=\"mill_sig_4w\" onClick={this.props.click_sig_4w}><img src={this.state.sig_4w_src}/></div>\n            </div>\n        );\n    }\n    // ---- END render() ----\n\n    /**\n     * set_route_drawings()\n     * @summary Sets the drawing for the route through the interlocking\n     * \n     * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n     * will change depending on if the interlocking is occupied or not.\n     */\n    set_route_drawing() {\n        let color_1 = Empty;\n        let color_2 = Empty;\n\n        // Set Track Colors\n        // If each track has a route\n        if (this.state.route_1) {\n            color_1 = Green;\n        }\n        if (this.state.route_2) {\n            color_2 = Green;\n        }\n        // If each track is occupied\n        if (this.state.occupied_trk_1) {\n            color_1 = Red;\n        }\n        if (this.state.occupied_trk_2) {\n            color_2 = Red;\n        }\n\n        // Loop Through All The Routes\n        for (let i = 0; i < this.state.routes.length; i++) {\n            if (this.state.routes[i] === \"W_1_1__|__1_suscon_mill\" || this.state.routes[i] === \"E_1_1__|__1_mill_westSecaucus\") {\n                // Tail Tracks\n                this.state.tail_1_e = color_1;\n                this.state.tail_1_w = color_1;\n\n                // If the Route Is Occupied\n                if (this.state.occupied_trk_1) {\n                    // Switches \n                    // Track #2 is Routed\n                    if (this.state.route_2) {\n                        this.state.sw_1_src = CX_225_Occupied_Top_Lined_Bottom;\n                        this.state.sw_3_src = CX_135_Occupied_Top_Lined_Bottom;\n                    }\n                    // Track #2 is Occupied\n                    else if (this.state.occupied_trk_2) {\n                        this.state.sw_1_src = CX_225_Occupied_Both;\n                        this.state.sw_3_src = CX_135_Occupied_Both;\n                    }\n                    // Nothing Track #2\n                    else {\n                        this.state.sw_1_src = CX_225_Occupied_Top;\n                        this.state.sw_3_src = CX_135_Occupied_Top;\n                    }\n\n                    // Signals \n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switches \n                    // Track #2 is Routed\n                    if (this.state.route_2) {\n                        this.state.sw_1_src = CX_225_Lined_Both;\n                        this.state.sw_3_src = CX_135_Lined_Both;\n                    }\n                    // Track #2 is Occupied\n                    else if (this.state.occupied_trk_2) {\n                        this.state.sw_1_src = CX_225_Lined_Top_Occupied_Bottom;\n                        this.state.sw_3_src = CX_135_Lined_Top_Occupied_Bottom;\n                    }\n                    // Nothing Track #2\n                    else {\n                        this.state.sw_1_src = CX_225_Lined_Top;\n                        this.state.sw_3_src = CX_135_Lined_Top;\n                    }\n\n                    // Signals\n                    // West Bound Signals \n                    if (this.state.routes[i] === \"W_1_1__|__1_suscon_mill\") {\n                        this.state.sig_2w_src = SIG_W_Clear;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                    }\n                    // East Bound Signals\n                    else {\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_2e_src = SIG_E_Clear;\n                    }\n                }\n            }\n            else if (this.state.routes[i] === \"W_2_2__|__2_suscon_mill\" || this.state.routes[i] === \"E_2_2__|__2_mill_westSecaucus\") {\n                // Tail Tracks\n                this.state.tail_2_e = color_2;\n                this.state.tail_2_w = color_2;\n\n                // The Route Is Occupied\n                if (this.state.occupied_trk_2) {\n                    // Switches\n                    // Track #1 is Routed\n                    if (this.state.route_1) {\n                        this.state.sw_1_src = CX_225_Lined_Top_Occupied_Bottom;\n                        this.state.sw_3_src = CX_135_Lined_Top_Occupied_Bottom;\n                    }\n                    // Track #1 is Occupied\n                    else if (this.state.occupied_trk_1) {\n                        this.state.sw_1_src = CX_225_Occupied_Both;\n                        this.state.sw_3_src = CX_135_Occupied_Both;\n                    }\n                    // Nothing Track #2\n                    else {\n                        this.state.sw_1_src = CX_225_Occupied_Bottom;\n                        this.state.sw_3_src = CX_135_Occupied_Bottom;\n                    }\n\n                    // Signals \n                    this.state.sig_4w = SIG_W_Stop;\n                    this.state.sig_4e = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switches \n                    // Track #1 is Routed\n                    if (this.state.route_1) {\n                        this.state.sw_1_src = CX_225_Lined_Both;\n                        this.state.sw_3_src = CX_135_Lined_Both;\n                    }\n                    // Track #1 is Occupied\n                    else if (this.state.occupied_trk_1) {\n                        this.state.sw_1_src = CX_225_Occupied_Top_Lined_Bottom;\n                        this.state.sw_3_src = CX_135_Occupied_Top_Lined_Bottom;\n                    }\n                    // Nothing Track #1\n                    else {\n                        this.state.sw_1_src = CX_225_Lined_Bottom;\n                        this.state.sw_3_src = CX_135_Lined_Bottom;\n                    }\n\n                    // Signals\n                    // West Bound Signals\n                    if (this.state.routes[i] === \"W_2_2__|__2_suscon_mill\") {\n                        this.state.sig_4w_src = SIG_W_Clear;\n                        this.state.sig_4e_src = SIG_E_Stop;\n                    }\n                    // East Bound Signals\n                    else {\n                        this.state.sig_4w_src = SIG_W_Stop;\n                        this.state.sig_4e_src = SIG_E_Clear;\n                    }\n                }\n            }\n            else if (this.state.routes[i] === \"W_1_2__|__2_suscon_mill\") {\n                // Tail Tracks\n                this.state.tail_1_e = color_1;\n                this.state.tail_2_w = color_1;\n\n                // The Route Is Occupied\n                if (this.state.occupied_trk_1) {\n                    // Switch Images\n                    this.state.sw_1_src = CX_225_R_Occupied;\n                    this.state.sw_3_src = CX_135_Occupied_Bottom;\n\n                    // Signal Images\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_4w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switch Images\n                    this.state.sw_1_src = CX_225_R_Lined;\n                    this.state.sw_3_src = CX_135_Lined_Bottom;\n\n                    // Signal Images\n                    this.state.sig_2w_src = SIG_W_Clear;\n                    this.state.sig_4w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n            }\n            else if (this.state.routes[i] === \"E_2_1__|__1_mill_westSecaucus\") {\n                // Tail Tracks\n                this.state.tail_1_e = color_2;\n                this.state.tail_2_w = color_2;\n\n                // The Route Is Occupied\n                if (this.state.occupied_trk_2) {\n                    // Switch Images\n                    this.state.sw_1_src = CX_225_R_Occupied;\n                    this.state.sw_3_src = CX_135_Occupied_Bottom;\n\n                    // Signal Images\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_4w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switch Images\n                    this.state.sw_1_src = CX_225_R_Lined;\n                    this.state.sw_3_src = CX_135_Lined_Bottom;\n\n                    // Signal Images\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_4w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_4e_src = SIG_E_Clear;\n                }\n            }\n            else if (this.state.routes[i] === \"W_2_1__|__1_suscon_mill\") {\n                // Tail Tracks\n                this.state.tail_2_e = color_2;\n                this.state.tail_1_w = color_2;\n\n                // The Route Is Occupied\n                if (this.state.occupied_trk_2) {\n                    // Switch Images\n                    this.state.sw_1_src = CX_225_Occupied_Bottom;\n                    this.state.sw_3_src = CX_135_R_Occupied;\n\n                    // Signal Images\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_4w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switch Images\n                    this.state.sw_1_src = CX_225_Lined_Bottom;\n                    this.state.sw_3_src = CX_135_R_Lined;\n\n                    // Signal Images\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_4w_src = SIG_W_Clear;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n            }\n            else if (this.state.routes[i] === \"E_1_2__|__2_mill_westSecaucus\") {\n                // Tail Tracks\n                this.state.tail_2_e = color_1;\n                this.state.tail_1_w = color_1;\n\n                // The Route Is Occupied\n                if (this.state.occupied_trk_2) {\n                    // Switch Images\n                    this.state.sw_1_src = CX_225_Occupied_Bottom;\n                    this.state.sw_3_src = CX_135_R_Occupied;\n\n                    // Signal Images\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_4w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switch Images\n                    this.state.sw_1_src = CX_225_Lined_Bottom;\n                    this.state.sw_3_src = CX_135_R_Lined;\n\n                    // Signal Images\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_4w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Clear;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n            }\n        }\n    }\n    // ---- END set_route_drawings() ----\n\n    /**\n     * set_switch_img()\n     * @summary Changes image sources for the switches, depending on switch status\n     * \n     * This function uses the data passed in through status from the CTC classes and \n     * shows if the switches are reversed or not on the screen, by changing the image\n     * source files, to the correct .png file respectivly\n     */\n    set_switch_img = () => {\n        // Set SW #1\n        // SW #1 Reversed\n        if (this.state.sw_1) {\n            this.state.sw_1_src = CX_225_R;\n        }\n        // SW #1 Normal\n        else {\n            this.state.sw_1_src = CX_225;\n        }\n        \n        // Set SW #3\n        // SW #3 Reversed\n        if (this.state.sw_3) {\n            this.state.sw_3_src = CX_135_R;\n        }\n        // SW #3 Normal\n        else {\n            this.state.sw_3_src = CX_135;\n        }\n    }\n    // ---- END set_switch_image() ----\n\n\n    /**\n     * reset_drawings()\n     * @summary Function to reset the signal images and track colors\n     * \n     * This function is need, because if the player was to remove a route,\n     * or when the train clears the interlocking nothing will clear the route\n     * the is displaying on the screen, even if it's gone in the backend\n     */\n    reset_drawings() {\n        this.state.tail_1_e = Empty;\n        this.state.tail_1_w = Empty;\n        this.state.tail_2_e = Empty;\n        this.state.tail_2_w = Empty;\n\n        this.state.sig_2e_src = SIG_E;\n        this.state.sig_2w_src = SIG_W;\n        this.state.sig_4e_src = SIG_E;\n        this.state.sig_4w_src = SIG_W;\n    }\n    //---- END reset_drawings() ----\n}\n \n// Export the interlocking to be drawn on the screen\nexport default Mill;"]},"metadata":{},"sourceType":"module"}