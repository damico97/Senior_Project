{"ast":null,"code":"/**\n * @file ctc_block.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary Class that is a \"block\" or track, that makes up the railroad\n *\n * @description This class is a section of track, between two interlockings, this classes make up the railroad\n */\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Route = '#75fa4c';\nconst Occupied = '#eb3323';\n/**\n * Class that is a \"block\" or track, that makes up part of the railroad. This class is a section of track, \n * between two interlockings, this classes make up the railroad. The block class variables that are basically \n * characteristics of a real piece of track\n * \n * @member block_name -> The name of the piece of track, usually the two location it bridges\n * @member block_size -> The size of the track, (i.e. how long it takes for a train to travel it)\n * @member block_status -> Wheter the block is Empty, Routed (A train is coming), or Occupied (A train is there)\n * @member train_symbol -> The symbol or the train that occupys that block\n */\n\nclass CTC_Block {\n  /**\n   * constructor(),\n   * @summary The Constructor of the CTC_Block Class\n   * \n   * @description Sets all the memeber variables to their initial values, when the application starts\n   * \n   * @param p_name, The Name of the Block\n   * @param p_size, The Size of the Block\n   * @param p_status, Current Status. Only Used for debugging when build the applications\n   */\n  constructor(p_name, p_size, p_status) {\n    this.block_name = p_name;\n    this.block_size = p_size;\n    this.block_status = p_status;\n    this.train_symbol = null;\n  } // ---- END constructor() ----\n\n  /**\n   * get_block_status()\n   * @summary Getter for the block_status member variable\n   * \n   * @returns The current status of the block\n   */\n\n\n  get_block_status() {\n    return this.block_status;\n  } // ---- END get_block_status() ----\n\n  /**\n   * get_size()\n   * @summary Getter for the block_size member variable\n   * \n   * @return The size of the block\n   */\n\n\n  get_size() {\n    return this.block_size;\n  } // ---- END get_size() ----\n\n  /**\n   * get_symbol()\n   * @summary Getter for the train_symbol memebr variable\n   * \n   * @returns The symbol of the trail that is currently in the block\n   */\n\n\n  get_symbol() {\n    return this.train_symbol;\n  } // ---- END get_symbol() ----\n\n  /**\n   * reset_block()\n   * @summary Resets the Block status to Empty\n   * \n   * @description This is used to reset the block, when the CTC controller refreshes the train and route locations\n   */\n\n\n  reset_block() {\n    // Check if the Block Is Routed\n    if (this.block_status === Route) {\n      this.block_status = Empty;\n    }\n  } // ---- END reset_block() ----\n\n  /**\n   * set_symbol()\n   * @summary Setter for the train_symbol member variable\n   * \n   * @param n_symbol, The new symbols to set the member variable too\n   */\n\n\n  set_symbol(n_symbol) {\n    this.train_symbol = n_symbol;\n  } // ---- END set_symbol() ----\n\n  /**\n   * set_block_status()\n   * @summary Sets the block current status based off of what tag is passed in\n   * \n   * @param p_status, A String which is the Kinda of status of what to set the block too\n   */\n\n\n  set_block_status(p_status) {\n    if (p_status === 'Empty') {\n      this.block_status = Empty;\n    } else if (p_status === 'Route') {\n      this.block_status = Route;\n    } else if (p_status === 'Occupied') {\n      this.block_status = Occupied;\n    } else {\n      console.log(\"ERROR!! - CTC_Block \" + this.block_name + \" [set_block_status()]\");\n    }\n  }\n\n} // This is required when using ReactJS\n\n\nexport default CTC_Block;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/CTC/ctc_block.js"],"names":["Empty","Route","Occupied","CTC_Block","constructor","p_name","p_size","p_status","block_name","block_size","block_status","train_symbol","get_block_status","get_size","get_symbol","reset_block","set_symbol","n_symbol","set_block_status","console","log"],"mappings":"AAAA;;;;;;;;AASA;AACA,MAAMA,KAAK,GAAG,SAAd;AACA,MAAMC,KAAK,GAAG,SAAd;AACA,MAAMC,QAAQ,GAAG,SAAjB;AAEA;;;;;;;;;;;AAUA,MAAMC,SAAN,CAAgB;AACZ;;;;;;;;;;AAUAC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiBC,QAAjB,EAA2B;AAClC,SAAKC,UAAL,GAAkBH,MAAlB;AACA,SAAKI,UAAL,GAAkBH,MAAlB;AACA,SAAKI,YAAL,GAAoBH,QAApB;AACA,SAAKI,YAAL,GAAoB,IAApB;AACH,GAhBW,CAiBZ;;AAEA;;;;;;;;AAMAC,EAAAA,gBAAgB,GAAG;AACf,WAAO,KAAKF,YAAZ;AACH,GA3BW,CA4BZ;;AAEA;;;;;;;;AAMAG,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKJ,UAAZ;AACH,GAtCW,CAuCZ;;AAEA;;;;;;;;AAMAK,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKH,YAAZ;AACH,GAjDW,CAkDZ;;AAEA;;;;;;;;AAMAI,EAAAA,WAAW,GAAG;AACV;AACA,QAAI,KAAKL,YAAL,KAAsBT,KAA1B,EAAiC;AAC7B,WAAKS,YAAL,GAAoBV,KAApB;AACH;AACJ,GA/DW,CAgEZ;;AAEA;;;;;;;;AAMAgB,EAAAA,UAAU,CAACC,QAAD,EAAW;AACjB,SAAKN,YAAL,GAAoBM,QAApB;AACH,GA1EW,CA2EZ;;AAEA;;;;;;;;AAMAC,EAAAA,gBAAgB,CAACX,QAAD,EAAW;AACvB,QAAIA,QAAQ,KAAK,OAAjB,EAA0B;AACtB,WAAKG,YAAL,GAAoBV,KAApB;AACH,KAFD,MAGK,IAAIO,QAAQ,KAAK,OAAjB,EAA0B;AAC3B,WAAKG,YAAL,GAAoBT,KAApB;AACH,KAFI,MAGA,IAAIM,QAAQ,KAAK,UAAjB,EAA6B;AAC9B,WAAKG,YAAL,GAAoBR,QAApB;AACH,KAFI,MAGA;AACDiB,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyB,KAAKZ,UAA9B,GAA2C,uBAAvD;AACH;AACJ;;AAhGW,C,CAmGhB;;;AACA,eAAeL,SAAf","sourcesContent":["/**\n * @file ctc_block.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary Class that is a \"block\" or track, that makes up the railroad\n *\n * @description This class is a section of track, between two interlockings, this classes make up the railroad\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Route = '#75fa4c';\nconst Occupied = '#eb3323';\n\n/**\n * Class that is a \"block\" or track, that makes up part of the railroad. This class is a section of track, \n * between two interlockings, this classes make up the railroad. The block class variables that are basically \n * characteristics of a real piece of track\n * \n * @member block_name -> The name of the piece of track, usually the two location it bridges\n * @member block_size -> The size of the track, (i.e. how long it takes for a train to travel it)\n * @member block_status -> Wheter the block is Empty, Routed (A train is coming), or Occupied (A train is there)\n * @member train_symbol -> The symbol or the train that occupys that block\n */\nclass CTC_Block {\n    /**\n     * constructor(),\n     * @summary The Constructor of the CTC_Block Class\n     * \n     * @description Sets all the memeber variables to their initial values, when the application starts\n     * \n     * @param p_name, The Name of the Block\n     * @param p_size, The Size of the Block\n     * @param p_status, Current Status. Only Used for debugging when build the applications\n     */\n    constructor(p_name, p_size, p_status) {\n        this.block_name = p_name;\n        this.block_size = p_size;\n        this.block_status = p_status;\n        this.train_symbol = null;\n    }\n    // ---- END constructor() ----\n\n    /**\n     * get_block_status()\n     * @summary Getter for the block_status member variable\n     * \n     * @returns The current status of the block\n     */\n    get_block_status() {\n        return this.block_status;\n    }\n    // ---- END get_block_status() ----\n \n    /**\n     * get_size()\n     * @summary Getter for the block_size member variable\n     * \n     * @return The size of the block\n     */\n    get_size() {\n        return this.block_size;\n    }\n    // ---- END get_size() ----\n\n    /**\n     * get_symbol()\n     * @summary Getter for the train_symbol memebr variable\n     * \n     * @returns The symbol of the trail that is currently in the block\n     */\n    get_symbol() {\n        return this.train_symbol;\n    }\n    // ---- END get_symbol() ----\n\n    /**\n     * reset_block()\n     * @summary Resets the Block status to Empty\n     * \n     * @description This is used to reset the block, when the CTC controller refreshes the train and route locations\n     */\n    reset_block() {\n        // Check if the Block Is Routed\n        if (this.block_status === Route) {\n            this.block_status = Empty;\n        }\n    }\n    // ---- END reset_block() ----\n\n    /**\n     * set_symbol()\n     * @summary Setter for the train_symbol member variable\n     * \n     * @param n_symbol, The new symbols to set the member variable too\n     */\n    set_symbol(n_symbol) {\n        this.train_symbol = n_symbol;\n    }\n    // ---- END set_symbol() ----\n\n    /**\n     * set_block_status()\n     * @summary Sets the block current status based off of what tag is passed in\n     * \n     * @param p_status, A String which is the Kinda of status of what to set the block too\n     */\n    set_block_status(p_status) {\n        if (p_status === 'Empty') {\n            this.block_status = Empty;\n        }\n        else if (p_status === 'Route') {\n            this.block_status = Route;\n        }\n        else if (p_status === 'Occupied') {\n            this.block_status = Occupied;\n        }\n        else {\n            console.log(\"ERROR!! - CTC_Block \" + this.block_name + \" [set_block_status()]\");\n        }\n    }\n}\n\n// This is required when using ReactJS\nexport default CTC_Block;"]},"metadata":{},"sourceType":"module"}