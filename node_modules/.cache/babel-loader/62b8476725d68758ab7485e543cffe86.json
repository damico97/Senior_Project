{"ast":null,"code":"/**\n * @file ctc_suscon.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the Suscon Interlocking\n */\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n/**\n * Class is the Backend for the Suscon Interlocking This class is what controlls the Suscon Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * \n * @member sig_2w -> Bool if Signal #2w is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member routed_trk_1 = Bool if track #1 is routed or not\n * @member routed_trk_2 = Bool if track #2 is routed or not\n * @member trk_1_time = The time track #1 was occupied, used to know when to clear the route\n * @member trk_2_time = The time track #2 was occupied, used to know when to clear the route\n * @member trk_1_occupied = Bool if track #1 is occupied or not\n * @member trk_2_occupied = Bool if track #2 is occupied or not\n */\n\nclass CTC_Suscon {\n  /**\n   * constructor()\n   * @summary The constructor for the CTC_Suscon class\n   * \n   * @description This will initialize all the member variables when the program is started\n   */\n  constructor() {\n    // Track routes\n    this.route_w_trk_1 = null;\n    this.route_w_trk_2 = null;\n    this.route_e_trk_1 = null;\n    this.route_e_trk_2 = null; // Bools for the switches\n\n    this.sw_1 = false;\n    this.sw_3 = false; // Bools for the signals\n\n    this.sig_2w = false;\n    this.sig_2e = false;\n    this.sig_4w = false;\n    this.sig_4e = false; // Used for routing and occupying the tracks \n\n    this.routed_trk_1 = false;\n    this.routed_trk_2 = false;\n    this.occupied_trk_1 = false;\n    this.occupied_trk_2 = false;\n    this.trk_1_time = null;\n    this.trk_2_time = null;\n  } // ---- END constructor() ----\n\n  /**\n   * click_sig()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param sigNum, The signal number that was clicked\n   * @param next_block_2, The next block on Track #2\n   * @param next_block_3, The next block on Track #3\n   */\n\n\n  click_sig(sigNum, next_block_1, next_block_2) {\n    if (sigNum === \"2W\") {\n      if (this.sw_3) {\n        return;\n      } else if (!this.sw_1 && !this.sw_3) {\n        if (this.sig_2w) {\n          this.route_w_trk_1 = null;\n          this.routed_trk_1 = false;\n          this.sig_2w = false;\n          return;\n        } else {\n          if (next_block_1 === Occupied || next_block_1 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_w_trk_1 = \"W_1_1__|__1_ridgewood_suscon\";\n          this.routed_trk_1 = true;\n          this.sig_2w = true;\n        }\n      } else if (this.sw_1 && !this.sw_3) {\n        if (this.sig_2w) {\n          this.route_w_trk_1 = null;\n          this.routed_trk_1 = false;\n          this.sig_2w = false;\n          return;\n        } else {\n          if (next_block_2 === Occupied || next_block_2 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_w_trk_1 = \"W_1_2__|__2_ridgewood_suscon\";\n          this.routed_trk_1 = true;\n          this.sig_2w = true;\n        }\n      }\n    } else if (sigNum === \"4W\") {\n      if (this.sw_1) {\n        return;\n      } else if (!this.sw_1 && !this.sw_3) {\n        if (this.sig_4w) {\n          this.route_w_trk_2 = null;\n          this.routed_trk_2 = false;\n          this.sig_4w = false;\n        } else {\n          if (next_block_2 === Occupied || next_block_2 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_w_trk_2 = \"W_2_2__|__2_ridgewood_suscon\";\n          this.routed_trk_2 = true;\n          this.sig_4w = true;\n        }\n      } else if (!this.sw_1 && this.sw_3) {\n        if (this.sig_4w) {\n          this.route_w_trk_2 = null;\n          this.routed_trk_2 = false;\n          this.sig_4w = false;\n        } else {\n          if (next_block_1 === Occupied || next_block_1 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_w_trk_2 = \"W_2_1__|__1_ridgewood_suscon\";\n          this.routed_trk_2 = true;\n          this.sig_4w = true;\n        }\n      }\n    } else if (sigNum === \"2E\") {\n      if (this.sw_1) {\n        return;\n      } else if (!this.sw_1 && !this.sw_3) {\n        if (this.sig_2e) {\n          this.route_e_trk_1 = null;\n          this.routed_trk_1 = false;\n          this.sig_2e = false;\n        } else {\n          if (next_block_1 === Occupied || next_block_1 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_e_trk_1 = \"E_1_1__|__1_suscon_mill\";\n          this.routed_trk_1 = true;\n          this.sig_2e = true;\n        }\n      } else if (!this.sw_1 && this.sw_3) {\n        if (this.sig_2e) {\n          this.route_e_trk_1 = null;\n          this.routed_trk_1 = false;\n          this.sig_2e = false;\n        } else {\n          if (next_block_2 === Occupied || next_block_2 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_e_trk_1 = \"E_1_2__|__2_suscon_mill\";\n          this.routed_trk_1 = true;\n          this.sig_2e = true;\n        }\n      }\n    } else if (sigNum === \"4E\") {\n      if (this.sw_3) {\n        return;\n      } else if (!this.sw_1 && !this.sw_3) {\n        if (this.sig_4e) {\n          this.route_e_trk_2 = null;\n          this.routed_trk_2 = false;\n          this.sig_4e = false;\n        } else {\n          if (next_block_2 === Occupied || next_block_2 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_e_trk_2 = \"E_2_2__|__2_suscon_mill\";\n          this.routed_trk_2 = true;\n          this.sig_4e = true;\n        }\n      } else if (this.sw_1 && !this.sw_3) {\n        if (this.sig_4e) {\n          this.route_e_trk_2 = null;\n          this.routed_trk_2 = false;\n          this.sig_4e = false;\n        } else {\n          if (next_block_1 === Occupied || next_block_1 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_e_trk_2 = \"E_2_1__|__1_suscon_mill\";\n          this.routed_trk_2 = true;\n          this.sig_4e = true;\n        }\n      }\n    }\n  } // ---- END click_sig() ----\n\n  /**\n   * set_trk_1_occupied()\n   * @summary Sets track #1 as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_trk_1_occupied(n_state) {\n    if (n_state === true) {\n      this.occupied_trk_1 = n_state;\n      this.routed_trk_1 = false;\n      this.trk_1_time = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_trk_1_occupied() ----\n\n  /**\n   * set_trk_2_occupied()\n   * @summary Sets track #2 as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_trk_2_occupied(n_state) {\n    if (n_state === true) {\n      this.occupied_trk_2 = n_state;\n      this.routed_trk_2 = false;\n      this.trk_2_time = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_trk_2_occupied() ----\n\n  /**\n   * can_clear()\n   * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n   * \n   * @description Check both track if a train has been in the interlocking for more then 4 seconds, if so it\n   * clears that track\n   */\n\n\n  can_clear() {\n    // Get the current time\n    let current_time = new Date().getTime() / 1000; // Track #1\n\n    if (current_time - this.trk_1_time > 4 && current_time - this.trk_1_time < 100000) {\n      this.sig_2w = false;\n      this.sig_2e = false;\n      this.route_w_trk_1 = null;\n      this.route_e_trk_1 = null;\n      this.routed_trk_1 = false;\n      this.occupied_trk_1 = false;\n      this.trk_1_time = null;\n    } // Track #2\n\n\n    if (current_time - this.trk_2_time > 4 && current_time - this.trk_2_time < 100000) {\n      this.sig_4w = false;\n      this.sig_4e_1 = false;\n      this.sig_4e_2 = false;\n      this.route_w_trk_2 = null;\n      this.route_e_trk_2 = null;\n      this.route_e_trk_3 = null;\n      this.routed_trk_2 = false;\n      this.occupied_trk_2 = false;\n      this.trk_2_time = null;\n    }\n  } // ---- END can_clear() ----\n\n  /**\n   * get_routes()\n   * @summary Gets all the routes from the interlocking\n   * \n   * @returns An Array holding every route variable from the interlocking\n   */\n\n\n  get_routes() {\n    let routes = [this.route_w_trk_1, this.route_w_trk_2, this.route_e_trk_1, this.route_e_trk_2];\n    return routes;\n  } // ---- END get_routes() ----\n\n  /**\n   * get_train_route()\n   * @summary Returns the route for the train at a given track\n   * \n   * @param direction, The direction the train is moving\n   * @param track, The Track number of the train \n   */\n\n\n  get_train_route(direction, track) {\n    if (direction === \"WEST\") {\n      if (track === \"1\") {\n        return this.route_w_trk_1;\n      } else {\n        return this.route_w_trk_2;\n      }\n    } else {\n      if (track === \"1\") {\n        return this.route_e_trk_1;\n      } else {\n        return this.route_e_trk_2;\n      }\n    }\n  } // ---- END get_train_route() ----\n\n  /**\n   * throw_sw_1()\n   * @summary Changes the current state of switch #1, used when user clicks the switch\n   */\n\n\n  throw_sw_1() {\n    if (this.sw_1 === false) {\n      this.sw_1 = true;\n    } else {\n      this.sw_1 = false;\n    }\n  } // ---- END throw_sw_1() ----\n\n  /**\n   * throw_sw_3()\n   * @summary Changes the current state of switch #3, used when user clicks the switch\n   */\n\n\n  throw_sw_3() {\n    if (this.sw_3 === false) {\n      this.sw_3 = true;\n    } else {\n      this.sw_3 = false;\n    }\n  } // ---- END throw_sw_3() ----\n\n  /**\n   * get_interlocking_status()\n   * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n   * \n   * @description All the information that is returned here is what is needed by the ReactJS Component \n   * for the interlocking that is need to draw the interlocking to the screen\n   * \n   * @returns Object with the status of the interlocking\n   */\n\n\n  get_interlocking_status() {\n    var status = {\n      sw_1: this.sw_1,\n      sw_3: this.sw_3,\n      occupied_trk_1: this.occupied_trk_1,\n      occupied_trk_2: this.occupied_trk_2,\n      routed_trk_1: this.routed_trk_1,\n      routed_trk_2: this.routed_trk_2,\n      routes: this.get_routes()\n    };\n    return status;\n  } // ---- END get_interlocking_status() ----\n\n\n} // This is required when using ReactJS\n\n\nexport default CTC_Suscon;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Interlockings/Main_Line/ctc_suscon.js"],"names":["Empty","Lined","Occupied","CTC_Suscon","constructor","route_w_trk_1","route_w_trk_2","route_e_trk_1","route_e_trk_2","sw_1","sw_3","sig_2w","sig_2e","sig_4w","sig_4e","routed_trk_1","routed_trk_2","occupied_trk_1","occupied_trk_2","trk_1_time","trk_2_time","click_sig","sigNum","next_block_1","next_block_2","alert","set_trk_1_occupied","n_state","Date","getTime","console","log","set_trk_2_occupied","can_clear","current_time","sig_4e_1","sig_4e_2","route_e_trk_3","get_routes","routes","get_train_route","direction","track","throw_sw_1","throw_sw_3","get_interlocking_status","status"],"mappings":"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","sourcesContent":["/**\n * @file ctc_suscon.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the Suscon Interlocking\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n\n\n/**\n * Class is the Backend for the Suscon Interlocking This class is what controlls the Suscon Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * \n * @member sig_2w -> Bool if Signal #2w is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member routed_trk_1 = Bool if track #1 is routed or not\n * @member routed_trk_2 = Bool if track #2 is routed or not\n * @member trk_1_time = The time track #1 was occupied, used to know when to clear the route\n * @member trk_2_time = The time track #2 was occupied, used to know when to clear the route\n * @member trk_1_occupied = Bool if track #1 is occupied or not\n * @member trk_2_occupied = Bool if track #2 is occupied or not\n */\nclass CTC_Suscon {\n    /**\n     * constructor()\n     * @summary The constructor for the CTC_Suscon class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */\n    constructor() {\n        // Track routes\n        this.route_w_trk_1 = null;\n        this.route_w_trk_2 = null;\n        this.route_e_trk_1 = null;\n        this.route_e_trk_2 = null;\n        // Bools for the switches\n        this.sw_1 = false;\n        this.sw_3 = false;\n        // Bools for the signals\n        this.sig_2w = false;\n        this.sig_2e = false;\n        this.sig_4w = false;\n        this.sig_4e = false;\n        // Used for routing and occupying the tracks \n        this.routed_trk_1 = false;\n        this.routed_trk_2 = false;\n        this.occupied_trk_1 = false;\n        this.occupied_trk_2 = false;\n        this.trk_1_time = null;\n        this.trk_2_time = null;\n    }\n    // ---- END constructor() ----\n\n    /**\n     * click_sig()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param sigNum, The signal number that was clicked\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     */\n    click_sig(sigNum, next_block_1, next_block_2) {\n        if (sigNum === \"2W\") {\n            if (this.sw_3) {\n                return;\n            }\n            else if (!this.sw_1 && !this.sw_3) {\n                if (this.sig_2w) {\n                    this.route_w_trk_1 = null;\n                    this.routed_trk_1 = false;\n                    this.sig_2w = false;\n                    return;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_1 = \"W_1_1__|__1_ridgewood_suscon\";\n                    this.routed_trk_1 = true;\n                    this.sig_2w = true;\n                }\n            }\n            else if (this.sw_1 && !this.sw_3){\n                if (this.sig_2w) {\n                    this.route_w_trk_1 = null;\n                    this.routed_trk_1 = false;\n                    this.sig_2w = false;\n                    return;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_1 = \"W_1_2__|__2_ridgewood_suscon\";\n                    this.routed_trk_1 = true;\n                    this.sig_2w = true;\n                }\n            }\n        }\n        else if (sigNum === \"4W\") {\n            if (this.sw_1) {\n                return;\n            }\n            else if (!this.sw_1 && !this.sw_3) {\n                if (this.sig_4w) {\n                    this.route_w_trk_2 = null;\n                    this.routed_trk_2 = false;\n                    this.sig_4w = false;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_2 = \"W_2_2__|__2_ridgewood_suscon\";\n                    this.routed_trk_2 = true;\n                    this.sig_4w = true;\n                }\n            }\n            else if (!this.sw_1 && this.sw_3) {\n                if (this.sig_4w) {\n                    this.route_w_trk_2 = null;\n                    this.routed_trk_2 = false;\n                    this.sig_4w = false;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_2 = \"W_2_1__|__1_ridgewood_suscon\";\n                    this.routed_trk_2 = true;\n                    this.sig_4w = true;\n                }\n            }\n        }\n        else if (sigNum === \"2E\") {\n            if (this.sw_1) {\n                return;\n            }\n            else if (!this.sw_1 && !this.sw_3) {\n                if (this.sig_2e) {\n                    this.route_e_trk_1 = null;\n                    this.routed_trk_1 = false;\n                    this.sig_2e = false;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_1 = \"E_1_1__|__1_suscon_mill\";\n                    this.routed_trk_1 = true;\n                    this.sig_2e = true;\n                }\n            }\n            else if (!this.sw_1 && this.sw_3) {\n                if (this.sig_2e) {\n                    this.route_e_trk_1 = null;\n                    this.routed_trk_1 = false;\n                    this.sig_2e = false;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_1 = \"E_1_2__|__2_suscon_mill\";\n                    this.routed_trk_1 = true;\n                    this.sig_2e = true;\n                }\n            }\n        }\n        else if (sigNum === \"4E\") {\n            if (this.sw_3) {\n                return;\n            }\n            else if (!this.sw_1 && !this.sw_3) {\n                if (this.sig_4e) {\n                    this.route_e_trk_2 = null;\n                    this.routed_trk_2 = false;\n                    this.sig_4e = false;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_2 = \"E_2_2__|__2_suscon_mill\";\n                    this.routed_trk_2 = true;\n                    this.sig_4e = true;\n                }\n            }\n            else if (this.sw_1 && !this.sw_3) {\n                if (this.sig_4e) {\n                    this.route_e_trk_2 = null;\n                    this.routed_trk_2 = false;\n                    this.sig_4e = false;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_2 = \"E_2_1__|__1_suscon_mill\";\n                    this.routed_trk_2 = true;\n                    this.sig_4e = true;\n                }\n            }\n        }\n    }\n    // ---- END click_sig() ----\n\n    /**\n     * set_trk_1_occupied()\n     * @summary Sets track #1 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_trk_1_occupied(n_state) {\n        if (n_state === true) {\n            this.occupied_trk_1 = n_state;\n            this.routed_trk_1 = false;\n            this.trk_1_time = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_trk_1_occupied() ----\n\n    /**\n     * set_trk_2_occupied()\n     * @summary Sets track #2 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_trk_2_occupied(n_state) {\n        if (n_state === true) {\n            this.occupied_trk_2 = n_state;\n            this.routed_trk_2 = false;\n            this.trk_2_time = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_trk_2_occupied() ----\n\n    /**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check both track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */\n    can_clear() {\n        // Get the current time\n        let current_time = new Date().getTime() / 1000;\n        // Track #1\n        if (current_time - this.trk_1_time > 4 && current_time - this.trk_1_time< 100000) {\n            this.sig_2w = false;\n            this.sig_2e = false;\n\n            this.route_w_trk_1 = null;\n            this.route_e_trk_1 = null;\n            this.routed_trk_1 = false;\n\n            this.occupied_trk_1 = false;\n            this.trk_1_time = null;\n        }\n        // Track #2\n        if (current_time - this.trk_2_time > 4 && current_time - this.trk_2_time< 100000) {\n            this.sig_4w = false;\n            this.sig_4e_1 = false;\n            this.sig_4e_2 = false;\n\n            this.route_w_trk_2 = null;\n            this.route_e_trk_2 = null;\n            this.route_e_trk_3 = null;\n            this.routed_trk_2 = false;\n\n            this.occupied_trk_2 = false;\n            this.trk_2_time = null;\n        }\n    }\n    // ---- END can_clear() ----\n\n    /**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */\n    get_routes() {\n        let routes = [\n            this.route_w_trk_1, this.route_w_trk_2, \n            this.route_e_trk_1, this.route_e_trk_2\n        ];\n        return routes;\n    }\n    // ---- END get_routes() ----\n\n    /**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */\n    get_train_route(direction, track) {\n        if (direction === \"WEST\") {\n            if (track === \"1\") {\n                return this.route_w_trk_1;\n            }\n            else {\n                return this.route_w_trk_2;\n            }\n        }\n        else {\n            if (track === \"1\") {\n                return this.route_e_trk_1;\n            }\n            else {\n                return this.route_e_trk_2;\n            }\n        }\n    }\n    // ---- END get_train_route() ----\n\n    /**\n     * throw_sw_1()\n     * @summary Changes the current state of switch #1, used when user clicks the switch\n     */\n    throw_sw_1() {\n        if (this.sw_1 === false) {\n            this.sw_1 = true;\n        }\n        else {\n            this.sw_1 = false;\n        }\n    }\n    // ---- END throw_sw_1() ----\n\n    /**\n     * throw_sw_3()\n     * @summary Changes the current state of switch #3, used when user clicks the switch\n     */\n    throw_sw_3() {\n        if (this.sw_3 === false) {\n            this.sw_3 = true;\n        }\n        else {\n            this.sw_3 = false;\n        }\n    }\n    // ---- END throw_sw_3() ----\n\n    /**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */\n    get_interlocking_status() {\n        var status = {\n            sw_1: this.sw_1,\n            sw_3: this.sw_3,\n            occupied_trk_1: this.occupied_trk_1,\n            occupied_trk_2: this.occupied_trk_2,\n            routed_trk_1: this.routed_trk_1,\n            routed_trk_2: this.routed_trk_2,\n            routes: this.get_routes()\n        };\n\n        return status;\n    }\n    // ---- END get_interlocking_status() ----\n}\n\n// This is required when using ReactJS\nexport default CTC_Suscon;"]},"metadata":{},"sourceType":"module"}