{"ast":null,"code":"var _jsxFileName = \"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Southern_Tier_Line/Harriman.jsx\";\n\n/**\n * @file Harriman.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for Harriman Interlocking\n *\n * Extends the React Component Class and is the UI part of the Harriman Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\n// Import React Component\nimport React, { Component } from 'react'; // Import CSS style sheet\n\nimport '../../../css/Southern_Tier_Line/harriman.css'; // Import Images\n// Switch Images\n\nimport SW_U_W from '../../../images/SW_U_W.png';\nimport SW_U_W_Lined from '../../../images/SW_U_W_Lined.png';\nimport SW_U_W_Occupied from '../../../images/SW_U_W_Occupied.png';\nimport SW_U_W_R from '../../../images/SW_U_W_R.png';\nimport SW_U_W_R_Lined from '../../../images/SW_U_W_R_Lined.png';\nimport SW_U_W_R_Occupied from '../../../images/SW_U_W_R_Occupied.png';\nimport SW_D_W from '../../../images/SW_D_W.png';\nimport SW_D_W_Lined from '../../../images/SW_D_W_Lined.png';\nimport SW_D_W_Occupied from '../../../images/SW_D_W_Occupied.png';\nimport SW_D_W_R from '../../../images/SW_D_W_R.png';\nimport SW_D_W_R_Lined from '../../../images/SW_D_W_R_Lined.png';\nimport SW_D_W_R_Occupied from '../../../images/SW_D_W_R_Occupied.png'; // Signal Images\n\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png'; // Color Constants For Drawing Routes\n\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n/**\n * The React JSX Component Class for the Harriman Interlocking\n * \n * This class is a JSX React Component for the Harriman Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\n\nclass Harriman extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Switch Status\n      sw_21: this.props.sw_21,\n      sw_32: this.props.sw_32,\n      // Image File for the switch - Will change depending on route\n      sw_21_src: SW_U_W,\n      sw_32_src: SW_D_W,\n      // Image File for the signals - Will change depending on route\n      sig_1w_src: SIG_W,\n      sig_1e_src: SIG_E,\n      sig_2e_src: SIG_E,\n      sig_3e_src: SIG_E,\n      // Colors for tail tracks - Will change depending on route\n      tail_1_w: Empty,\n      tail_2_w: Empty,\n      tail_ind: Empty,\n      tail_e: Empty,\n      // Information For Interlocking Routes\n      occupied: this.props.status.occupied,\n      routes: this.props.status.routes\n    };\n  }\n\n  /**\n   * componentWillReceiveProps()\n   * @summary Function that updates the state of the component\n   * \n   * The data that is being changed is passed down from the CTC classes in the simulation backend\n   * \n   * @param nextProps, the new data to set the component state too\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      sw_21: nextProps.status.sw_21,\n      sw_32: nextProps.status.sw_32,\n      occupied: nextProps.status.occupied,\n      routes: nextProps.status.routes\n    });\n  } // ---- END componentWillReceiveProps() ----\n\n  /**\n   * render()\n   * @summary standard React function that draws the interlocking to the screen\n   */\n\n\n  render() {\n    // Clear all the drawings from the interlocking so if a train clears the route is gone\n    this.reset_drawings(); // Set the switch images based off the state of each crossover\n\n    this.set_switch_img(); // Draw all the current routes in the interlocking\n\n    this.set_route_drawings(); // Returns the HTML to draw the interlocking and it's current state to the screen\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"harriman_title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"CP HARRIMAN\"), React.createElement(\"div\", {\n      className: \"harriman_milepost\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"MP 45.0JS\"), React.createElement(\"div\", {\n      className: \"harriman_1_west\",\n      style: {\n        background: this.state.tail_1_w\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"harriman_2_west\",\n      style: {\n        background: this.state.tail_2_w\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"harriman_industrial\",\n      style: {\n        background: this.state.tail_ind\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"harriman_SW_21\",\n      onClick: this.props.throw_sw_21,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sw_21_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"harriman_SW_32\",\n      onClick: this.props.throw_sw_32,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sw_32_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"harriman_1_east\",\n      style: {\n        background: this.state.tail_e\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"harriman_sig_2e\",\n      onClick: this.props.click_sig_2e,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_2e_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"harriman_sig_1e\",\n      onClick: this.props.click_sig_1e,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_1e_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"harriman_sig_3e\",\n      onClick: this.props.click_sig_3e,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_3e_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"harriman_sig_1w\",\n      onClick: this.props.click_sig_1w,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_1w_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })));\n  } // ---- END render() ----\n\n  /**\n   * @summary Sets the drawing for the route through the interlocking\n   * \n   * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n   * will change depending on if the interlocking is occupied or not\n   */\n\n\n  set_route_drawings() {\n    // Setting the color of the tracks depending on if the interlocking in occupied or not\n    let color = null;\n\n    if (this.state.occupied) {\n      color = Red;\n    } else {\n      color = Green;\n    }\n\n    for (let i = 0; i < this.state.routes.length; i++) {\n      if (this.state.routes[i] === \"W_1_1__|__1_valley_harriman\" || this.state.routes[i] === \"E_1_1__|__1_harriman_sterling\") {\n        // Tail Tracks\n        this.state.tail_1_w = color;\n        this.state.tail_e = color; // The Route Is Occupied\n\n        if (this.state.occupied) {\n          // Switch Images\n          this.state.sw_21_src = SW_U_W_Occupied;\n          this.state.sw_32_src = SW_D_W_Occupied; // Signal Images\n\n          this.state.sig_1w_src = SIG_W_Stop;\n          this.state.sig_1e_src = SIG_E_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n          this.state.sig_3e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switch Images\n            this.state.sw_21_src = SW_U_W_Lined;\n            this.state.sw_32_src = SW_D_W_Lined; // Signal Images\n            // West Bound Signals\n\n            if (this.state.routes[i] === \"W_1_1__|__1_valley_harriman\") {\n              this.state.sig_1w_src = SIG_W_Clear;\n              this.state.sig_1e_src = SIG_E_Stop;\n              this.state.sig_2e_src = SIG_E_Stop;\n              this.state.sig_3e_src = SIG_E_Stop;\n            } // East Bound Signals\n            else {\n                this.state.sig_1w_src = SIG_W_Stop;\n                this.state.sig_1e_src = SIG_E_Clear;\n                this.state.sig_2e_src = SIG_E_Stop;\n                this.state.sig_3e_src = SIG_E_Stop;\n              }\n          }\n      } else if (this.state.routes[i] === \"W_1_2__|__2_valley_harriman\" || this.state.routes[i] === \"E_2_1__|__1_harriman_sterling\") {\n        // Tail Tracks\n        this.state.tail_2_w = color;\n        this.state.tail_e = color; // The Route Is Occupied\n\n        if (this.state.occupied) {\n          // Switch Images\n          this.state.sw_21_src = SW_U_W_R_Occupied;\n          this.state.sw_32_src = SW_D_W_Occupied; // Signal Images\n\n          this.state.sig_1w_src = SIG_W_Stop;\n          this.state.sig_1e_src = SIG_E_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n          this.state.sig_3e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switch Images\n            this.state.sw_21_src = SW_U_W_R_Lined;\n            this.state.sw_32_src = SW_D_W_Lined; // Signal Images\n            // West Bound Signals\n\n            if (this.state.routes[i] === \"W_1_2__|__2_valley_harriman\") {\n              this.state.sig_1w_src = SIG_W_Clear;\n              this.state.sig_1e_src = SIG_E_Stop;\n              this.state.sig_2e_src = SIG_E_Stop;\n              this.state.sig_3e_src = SIG_E_Stop;\n            } // East Bound Signals\n            else {\n                this.state.sig_1w_src = SIG_W_Stop;\n                this.state.sig_1e_src = SIG_E_Stop;\n                this.state.sig_2e_src = SIG_E_Clear;\n                this.state.sig_3e_src = SIG_E_Stop;\n              }\n          }\n      } else if (this.state.routes[i] === \"W_1_3__|__3_industrial_harriman\" || this.state.routes[i] === \"E_3_1__|__1_harriman_sterling\") {\n        // Tail Tracks\n        this.state.tail_ind = color;\n        this.state.tail_e = color; // The Route Is Occupied\n\n        if (this.state.occupied) {\n          // Switch Images\n          this.state.sw_32_src = SW_D_W_R_Occupied; // Signals\n\n          this.state.sig_1w_src = SIG_W_Stop;\n          this.state.sig_1e_src = SIG_E_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n          this.state.sig_3e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switch Images\n            this.state.sw_32_src = SW_D_W_R_Lined; // Signal Images\n            // West Bound Signals\n\n            if (this.state.routes[i] === \"W_1_3__|__3_industrial_harriman\") {\n              this.state.sig_1w_src = SIG_W_Clear;\n              this.state.sig_1e_src = SIG_E_Stop;\n              this.state.sig_2e_src = SIG_E_Stop;\n              this.state.sig_3e_src = SIG_E_Stop;\n            } // East Bound Signals\n            else {\n                this.state.sig_1w_src = SIG_W_Stop;\n                this.state.sig_1e_src = SIG_E_Stop;\n                this.state.sig_2e_src = SIG_E_Stop;\n                this.state.sig_3e_src = SIG_E_Clear;\n              }\n          }\n      }\n    }\n  } // ---- END set_route_drawings() ----\n\n  /**\n   * set_switch_img()\n   * @summary Changes image sources for the switches, depending on switch status\n   * \n   * This function uses the data passed in through status from the CTC classes and \n   * shows if the switches are reversed or not on the screen, by changing the image\n   * source files, to the correct .png file respectivly\n   */\n\n\n  set_switch_img() {\n    // Set SW #21\n    // SW #21 Reversed\n    if (this.state.sw_21) {\n      this.state.sw_21_src = SW_U_W_R;\n    } // SW #21 Normal\n    else {\n        this.state.sw_21_src = SW_U_W;\n      } // Set SW #32\n    // SW #32 Reversed\n\n\n    if (this.state.sw_32) {\n      this.state.sw_32_src = SW_D_W_R;\n    } // SW #32 Normal\n    else {\n        this.state.sw_32_src = SW_D_W;\n      }\n  } // ---- END set_switch_img() ----\n\n  /**\n   * @summary Function to reset the signal images and track colors\n   * \n   * This function is need, because if the player was to remove a route,\n   * or when the train clears the interlocking nothing will clear the route\n   * the is displaying on the screen, even if it's gone in the backend\n   */\n\n\n  reset_drawings() {\n    this.state.sig_1w_src = SIG_W;\n    this.state.sig_1e_src = SIG_E;\n    this.state.sig_2e_src = SIG_E;\n    this.state.sig_3e_src = SIG_E;\n    this.state.tail_1_w = Empty;\n    this.state.tail_2_w = Empty;\n    this.state.tail_ind = Empty;\n    this.state.tail_e = Empty;\n  } //---- END reset_drawings() ----\n\n\n} // Export the interlocking to be drawn on the screen\n\n\nexport default Harriman;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Southern_Tier_Line/Harriman.jsx"],"names":["React","Component","SW_U_W","SW_U_W_Lined","SW_U_W_Occupied","SW_U_W_R","SW_U_W_R_Lined","SW_U_W_R_Occupied","SW_D_W","SW_D_W_Lined","SW_D_W_Occupied","SW_D_W_R","SW_D_W_R_Lined","SW_D_W_R_Occupied","SIG_W","SIG_W_Clear","SIG_W_Stop","SIG_E","SIG_E_Clear","SIG_E_Stop","Empty","Green","Red","Harriman","state","sw_21","props","sw_32","sw_21_src","sw_32_src","sig_1w_src","sig_1e_src","sig_2e_src","sig_3e_src","tail_1_w","tail_2_w","tail_ind","tail_e","occupied","status","routes","componentWillReceiveProps","nextProps","setState","render","reset_drawings","set_switch_img","set_route_drawings","background","throw_sw_21","throw_sw_32","click_sig_2e","click_sig_1e","click_sig_3e","click_sig_1w","color","i","length"],"mappings":"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","sourcesContent":["/**\n * @file Harriman.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for Harriman Interlocking\n *\n * Extends the React Component Class and is the UI part of the Harriman Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\n\n// Import React Component\nimport React, { Component } from 'react';\n// Import CSS style sheet\nimport '../../../css/Southern_Tier_Line/harriman.css';\n\n// Import Images\n// Switch Images\nimport SW_U_W from '../../../images/SW_U_W.png';\nimport SW_U_W_Lined from '../../../images/SW_U_W_Lined.png';\nimport SW_U_W_Occupied from '../../../images/SW_U_W_Occupied.png';\nimport SW_U_W_R from '../../../images/SW_U_W_R.png';\nimport SW_U_W_R_Lined from '../../../images/SW_U_W_R_Lined.png';\nimport SW_U_W_R_Occupied from '../../../images/SW_U_W_R_Occupied.png';\nimport SW_D_W from '../../../images/SW_D_W.png';\nimport SW_D_W_Lined from '../../../images/SW_D_W_Lined.png';\nimport SW_D_W_Occupied from '../../../images/SW_D_W_Occupied.png';\nimport SW_D_W_R from '../../../images/SW_D_W_R.png';\nimport SW_D_W_R_Lined from '../../../images/SW_D_W_R_Lined.png';\nimport SW_D_W_R_Occupied from '../../../images/SW_D_W_R_Occupied.png';\n\n// Signal Images\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png';\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n\n\n/**\n * The React JSX Component Class for the Harriman Interlocking\n * \n * This class is a JSX React Component for the Harriman Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\nclass Harriman extends Component {\n    /**\n     * State\n     * @summary Object that holds the state or status information for the component\n     * \n     * This object holds all the information for the interlocking that is required to display the routes \n     * correctly\n     * \n     * Anything that has \"this.props.\" is passed down from the CTC interlocking class\n     */\n    state = {  \n        // Switch Status\n        sw_21: this.props.sw_21,\n        sw_32: this.props.sw_32,\n        // Image File for the switch - Will change depending on route\n        sw_21_src: SW_U_W,\n        sw_32_src: SW_D_W,\n        // Image File for the signals - Will change depending on route\n        sig_1w_src: SIG_W,\n        sig_1e_src: SIG_E,\n        sig_2e_src: SIG_E,\n        sig_3e_src: SIG_E,\n        // Colors for tail tracks - Will change depending on route\n        tail_1_w: Empty,\n        tail_2_w: Empty,\n        tail_ind: Empty,\n        tail_e: Empty,\n        // Information For Interlocking Routes\n        occupied: this.props.status.occupied,\n        routes: this.props.status.routes\n    };\n\n    /**\n     * componentWillReceiveProps()\n     * @summary Function that updates the state of the component\n     * \n     * The data that is being changed is passed down from the CTC classes in the simulation backend\n     * \n     * @param nextProps, the new data to set the component state too\n     */\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            sw_21: nextProps.status.sw_21,\n            sw_32: nextProps.status.sw_32,\n            occupied: nextProps.status.occupied,\n            routes: nextProps.status.routes\n        });\n    }\n    // ---- END componentWillReceiveProps() ----\n\n    /**\n     * render()\n     * @summary standard React function that draws the interlocking to the screen\n     */\n    render() { \n        // Clear all the drawings from the interlocking so if a train clears the route is gone\n        this.reset_drawings();\n        // Set the switch images based off the state of each crossover\n        this.set_switch_img();\n        // Draw all the current routes in the interlocking\n        this.set_route_drawings();\n\n        // Returns the HTML to draw the interlocking and it's current state to the screen\n        return (  \n            <div>\n                {/* Tags */}\n                <div className=\"harriman_title\">CP HARRIMAN</div>\n                <div className=\"harriman_milepost\">MP 45.0JS</div>\n                {/* West Side Tail Tracks */}\n                <div className=\"harriman_1_west\" style={{background: this.state.tail_1_w}}></div>\n                <div className=\"harriman_2_west\" style={{background: this.state.tail_2_w}}></div>\n                <div className=\"harriman_industrial\" style={{background: this.state.tail_ind}}></div>\n                {/* Switches */}\n                <div className=\"harriman_SW_21\" onClick={this.props.throw_sw_21}><img src={this.state.sw_21_src}/></div>\n                <div className=\"harriman_SW_32\" onClick={this.props.throw_sw_32}><img src={this.state.sw_32_src}/></div>\n                {/* East Side Tail Tracks */}\n                <div className=\"harriman_1_east\" style={{background: this.state.tail_e}}></div>\n                {/* Signals */}\n                <div className=\"harriman_sig_2e\" onClick={this.props.click_sig_2e}><img src={this.state.sig_2e_src}/></div>\n                <div className=\"harriman_sig_1e\" onClick={this.props.click_sig_1e}><img src={this.state.sig_1e_src}/></div>\n                <div className=\"harriman_sig_3e\" onClick={this.props.click_sig_3e}><img src={this.state.sig_3e_src}/></div>\n                <div className=\"harriman_sig_1w\" onClick={this.props.click_sig_1w}><img src={this.state.sig_1w_src}/></div>\n            </div>\n        );\n    }\n    // ---- END render() ----\n\n    /**\n     * @summary Sets the drawing for the route through the interlocking\n     * \n     * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n     * will change depending on if the interlocking is occupied or not\n     */\n    set_route_drawings() {\n        // Setting the color of the tracks depending on if the interlocking in occupied or not\n        let color = null;\n        if (this.state.occupied) {\n            color = Red;\n        }\n        else {\n            color = Green;\n        }\n        for (let i = 0; i < this.state.routes.length; i++) {\n            if (this.state.routes[i] === \"W_1_1__|__1_valley_harriman\" || this.state.routes[i] === \"E_1_1__|__1_harriman_sterling\") {\n                // Tail Tracks\n                this.state.tail_1_w = color;\n                this.state.tail_e = color;\n\n                // The Route Is Occupied\n                if (this.state.occupied) {\n                    // Switch Images\n                    this.state.sw_21_src = SW_U_W_Occupied;\n                    this.state.sw_32_src = SW_D_W_Occupied;\n\n                    // Signal Images\n                    this.state.sig_1w_src = SIG_W_Stop;\n                    this.state.sig_1e_src = SIG_E_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_3e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switch Images\n                    this.state.sw_21_src = SW_U_W_Lined;\n                    this.state.sw_32_src = SW_D_W_Lined;\n\n                    // Signal Images\n                    // West Bound Signals\n                    if (this.state.routes[i] === \"W_1_1__|__1_valley_harriman\") {\n                        this.state.sig_1w_src = SIG_W_Clear;\n                        this.state.sig_1e_src = SIG_E_Stop;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                        this.state.sig_3e_src = SIG_E_Stop;\n                    }\n                    // East Bound Signals\n                    else {\n                        this.state.sig_1w_src = SIG_W_Stop;\n                        this.state.sig_1e_src = SIG_E_Clear;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                        this.state.sig_3e_src = SIG_E_Stop;\n                    }\n                }\n            }\n            else if (this.state.routes[i] === \"W_1_2__|__2_valley_harriman\" || this.state.routes[i] === \"E_2_1__|__1_harriman_sterling\") {\n                // Tail Tracks\n                this.state.tail_2_w = color;\n                this.state.tail_e = color;\n\n                // The Route Is Occupied\n                if (this.state.occupied) {\n                    // Switch Images\n                    this.state.sw_21_src = SW_U_W_R_Occupied;\n                    this.state.sw_32_src = SW_D_W_Occupied;\n\n                    // Signal Images\n                    this.state.sig_1w_src = SIG_W_Stop;\n                    this.state.sig_1e_src = SIG_E_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_3e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switch Images\n                    this.state.sw_21_src = SW_U_W_R_Lined;\n                    this.state.sw_32_src = SW_D_W_Lined;\n\n                    // Signal Images\n                    // West Bound Signals\n                    if (this.state.routes[i] === \"W_1_2__|__2_valley_harriman\") {\n                        this.state.sig_1w_src = SIG_W_Clear;\n                        this.state.sig_1e_src = SIG_E_Stop;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                        this.state.sig_3e_src = SIG_E_Stop;\n                    }\n                    // East Bound Signals\n                    else {\n                        this.state.sig_1w_src = SIG_W_Stop;\n                        this.state.sig_1e_src = SIG_E_Stop;\n                        this.state.sig_2e_src = SIG_E_Clear;\n                        this.state.sig_3e_src = SIG_E_Stop;\n                    }\n                }\n            }\n            else if (this.state.routes[i] === \"W_1_3__|__3_industrial_harriman\" || this.state.routes[i] === \"E_3_1__|__1_harriman_sterling\") {\n                // Tail Tracks\n                this.state.tail_ind = color;\n                this.state.tail_e = color;\n\n                // The Route Is Occupied\n                if (this.state.occupied) {\n                    // Switch Images\n                    this.state.sw_32_src = SW_D_W_R_Occupied;\n\n                    // Signals\n                    this.state.sig_1w_src = SIG_W_Stop;\n                    this.state.sig_1e_src = SIG_E_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_3e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switch Images\n                    this.state.sw_32_src = SW_D_W_R_Lined;\n\n                    // Signal Images\n                    // West Bound Signals\n                    if (this.state.routes[i] === \"W_1_3__|__3_industrial_harriman\") {\n                        this.state.sig_1w_src = SIG_W_Clear;\n                        this.state.sig_1e_src = SIG_E_Stop;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                        this.state.sig_3e_src = SIG_E_Stop;\n                    }\n                    // East Bound Signals\n                    else {\n                        this.state.sig_1w_src = SIG_W_Stop;\n                        this.state.sig_1e_src = SIG_E_Stop;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                        this.state.sig_3e_src = SIG_E_Clear;\n                    }\n                }\n            }\n        }\n    }\n    // ---- END set_route_drawings() ----\n\n    /**\n     * set_switch_img()\n     * @summary Changes image sources for the switches, depending on switch status\n     * \n     * This function uses the data passed in through status from the CTC classes and \n     * shows if the switches are reversed or not on the screen, by changing the image\n     * source files, to the correct .png file respectivly\n     */\n    set_switch_img() {\n        // Set SW #21\n        // SW #21 Reversed\n        if (this.state.sw_21) {\n            this.state.sw_21_src = SW_U_W_R;\n        }\n        // SW #21 Normal\n        else {\n            this.state.sw_21_src = SW_U_W;\n        }\n\n        // Set SW #32\n        // SW #32 Reversed\n        if (this.state.sw_32) {\n            this.state.sw_32_src = SW_D_W_R;\n        }\n        // SW #32 Normal\n        else {\n            this.state.sw_32_src = SW_D_W;\n        }\n    }\n    // ---- END set_switch_img() ----\n\n    /**\n     * @summary Function to reset the signal images and track colors\n     * \n     * This function is need, because if the player was to remove a route,\n     * or when the train clears the interlocking nothing will clear the route\n     * the is displaying on the screen, even if it's gone in the backend\n     */\n    reset_drawings() {\n        this.state.sig_1w_src = SIG_W;\n        this.state.sig_1e_src = SIG_E;\n        this.state.sig_2e_src = SIG_E;\n        this.state.sig_3e_src = SIG_E;\n\n        this.state.tail_1_w = Empty;\n        this.state.tail_2_w = Empty;\n        this.state.tail_ind = Empty;\n        this.state.tail_e = Empty;\n    }\n    //---- END reset_drawings() ----\n}\n \n// Export the interlocking to be drawn on the screen\nexport default Harriman;"]},"metadata":{},"sourceType":"module"}