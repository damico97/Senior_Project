{"ast":null,"code":"var _jsxFileName = \"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Southern_Tier_Line/OV.jsx\";\n\n/**\n * @file OV.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for OV Interlocking\n *\n * Extends the React Component Class and is the UI part of the OV Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\n// Import React Component\nimport React, { Component } from 'react'; // Import CSS style sheet\n\nimport '../../../css/Southern_Tier_Line/ov.css'; // Import Images\n// Switch Images\n\nimport SW_U_E from '../../../images/SW_U_E.png';\nimport SW_U_E_Lined from '../../../images/SW_U_E_Lined.png';\nimport SW_U_E_Occupied from '../../../images/SW_U_E_Occupied.png';\nimport SW_U_E_R from '../../../images/SW_U_E_R.png';\nimport SW_U_E_R_Lined from '../../../images/SW_U_E_R_Lined.png';\nimport SW_U_E_R_Occupied from '../../../images/SW_U_E_R_Occupied.png'; // Signal Images\n\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png'; // Color Constants For Drawing Routes\n\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n/**\n * The React JSX Component Class for the OV Interlocking\n * \n * This class is a JSX React Component for the OV Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\n\nclass OV extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Switch Status\n      sw_1: this.props.status.sw_1,\n      // Image File for the switch - Will change depending on route\n      sw_1_src: SW_U_E,\n      // Colors for tail tracks - Will change depending on route\n      tail_w: Empty,\n      tail_1_e: Empty,\n      tail_2_e: Empty,\n      // Image File for the signals - Will change depending on route\n      sig_2w_src: SIG_W,\n      sig_2ws_src: SIG_W,\n      sig_2e_src: SIG_E,\n      // Information For Interlocking Routes\n      occupied: this.props.status.occupied,\n      routes: this.props.status.routes\n    };\n  }\n\n  /**\n   * componentWillReceiveProps()\n   * @summary Function that updates the state of the component\n   * \n   * The data that is being changed is passed down from the CTC classes in the simulation backend\n   * \n   * @param nextProps, the new data to set the component state too\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      sw_1: nextProps.status.sw_1,\n      occupied: nextProps.status.occupied,\n      routes: nextProps.status.routes\n    });\n  } // ---- END componentWillReceiveProps() ----\n\n  /**\n   * render()\n   * @summary standard React function that draws the interlocking to the screen\n   */\n\n\n  render() {\n    // Clear all the drawings from the interlocking so if a train clears the route is gone\n    this.reset_drawings(); // Set the switch images based off the state of each crossover\n\n    this.set_switch_img(); // Draw all the current routes in the interlocking\n\n    this.set_route_drawing(); // Returns the HTML to draw the interlocking and it's current state to the screen\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ov_title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"CP OV\"), React.createElement(\"div\", {\n      className: \"ov_milepost\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"MP 75.0SR\"), React.createElement(\"div\", {\n      className: \"ov_west\",\n      style: {\n        background: this.state.tail_w\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ov_SW_1\",\n      onClick: this.props.throw_sw_1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"\",\n      src: this.state.sw_1_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"ov_1_east\",\n      style: {\n        background: this.state.tail_1_e\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ov_2_east\",\n      style: {\n        background: this.state.tail_2_e\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ov_sig_2w\",\n      onClick: this.props.click_sig_2w,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"\",\n      src: this.state.sig_2w_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"ov_sig_2ws\",\n      onClick: this.props.click_sig_2ws,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"\",\n      src: this.state.sig_2ws_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"ov_sig_2e\",\n      onClick: this.props.click_sig_2e,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"\",\n      src: this.state.sig_2e_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })));\n  } // ---- END render() ----\n\n  /**\n   * @summary Sets the drawing for the route through the interlocking\n   * \n   * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n   * will change depending on if the interlocking is occupied or not\n   */\n\n\n  set_route_drawing() {\n    // Setting the color of the tracks depending on if the interlocking in occupied or not\n    let color = null;\n\n    if (this.state.occupied) {\n      color = Red;\n    } else {\n      color = Green;\n    } // Loop through all the routes\n\n\n    for (let i = 0; i < this.state.routes.length; i++) {\n      if (this.state.routes[i] === \"W_1_1__|__1_bc_ov\" || this.state.routes[i] === \"E_1_1__|__1_ov_howells\") {\n        // Tail Tracks\n        this.state.tail_1_e = color;\n        this.state.tail_w = color; // The Route Is Occupied\n\n        if (this.state.occupied) {\n          // Switches\n          this.state.sw_1_src = SW_U_E_Occupied; // Signals\n\n          this.state.sig_2w_src = SIG_W_Stop;\n          this.state.sig_2ws_src = SIG_W_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switches\n            this.state.sw_1_src = SW_U_E_Lined; // Signals\n            // West Bound Signals\n\n            if (this.state.routes[i] === \"W_1_1__|__1_bc_ov\") {\n              this.state.sig_2w_src = SIG_W_Clear;\n              this.state.sig_2ws_src = SIG_W_Stop;\n              this.state.sig_2e_src = SIG_E_Stop;\n            } // East Bound Signals\n            else {\n                this.state.sig_2w_src = SIG_W_Stop;\n                this.state.sig_2ws_src = SIG_W_Stop;\n                this.state.sig_2e_src = SIG_E_Clear;\n              }\n          }\n      } else if (this.state.routes[i] === \"W_2_1__|__1_bc_ov\" || this.state.routes[i] === \"E_1_2__|__2_ov_howells\") {\n        // Tail Tracks\n        this.state.tail_2_e = color;\n        this.state.tail_w = color; // The Route Is Occupied\n\n        if (this.state.occupied) {\n          // Switches\n          this.state.sw_1_src = SW_U_E_R_Occupied; // Signals\n\n          this.state.sig_2w_src = SIG_W_Stop;\n          this.state.sig_2ws_src = SIG_W_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switches\n            this.state.sw_1_src = SW_U_E_R_Lined; // Signals\n            // West Bound Signals\n\n            if (this.state.routes[i] === \"W_2_1__|__1_bc_ov\") {\n              this.state.sig_2ws_src = SIG_W_Clear;\n              this.state.sig_2w_src = SIG_W_Stop;\n              this.state.sig_2e_src = SIG_E_Stop;\n            } // East Bound Signals\n            else {\n                this.state.sig_2w_src = SIG_W_Stop;\n                this.state.sig_2ws_src = SIG_W_Stop;\n                this.state.sig_2e_src = SIG_E_Clear;\n              }\n          }\n      }\n    }\n  } // ---- END set_route_drawings() ----\n\n  /**\n   * set_switch_img()\n   * @summary Changes image sources for the switches, depending on switch status\n   * \n   * This function uses the data passed in through status from the CTC classes and \n   * shows if the switches are reversed or not on the screen, by changing the image\n   * source files, to the correct .png file respectivly\n   */\n\n\n  set_switch_img() {\n    // Set SW #1\n    // SW #1 Reversed\n    if (this.state.sw_1) {\n      this.state.sw_1_src = SW_U_E_R;\n    } // SW #1 Normal\n    else {\n        this.state.sw_1_src = SW_U_E;\n      }\n  } // ---- END set_switch_img() ----\n\n  /**\n   * @summary Function to reset the signal images and track colors\n   * \n   * This function is need, because if the player was to remove a route,\n   * or when the train clears the interlocking nothing will clear the route\n   * the is displaying on the screen, even if it's gone in the backend\n   */\n\n\n  reset_drawings() {\n    this.state.tail_1_e = Empty;\n    this.state.tail_2_e = Empty;\n    this.state.tail_w = Empty;\n    this.state.sig_2w_src = SIG_W;\n    this.state.sig_2ws_src = SIG_W;\n    this.state.sig_2e_src = SIG_E;\n  } //---- END reset_drawings() ----\n\n\n} // Export the interlocking to be drawn on the screen\n\n\nexport default OV;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Southern_Tier_Line/OV.jsx"],"names":["React","Component","SW_U_E","SW_U_E_Lined","SW_U_E_Occupied","SW_U_E_R","SW_U_E_R_Lined","SW_U_E_R_Occupied","SIG_W","SIG_W_Clear","SIG_W_Stop","SIG_E","SIG_E_Clear","SIG_E_Stop","Empty","Green","Red","OV","state","sw_1","props","status","sw_1_src","tail_w","tail_1_e","tail_2_e","sig_2w_src","sig_2ws_src","sig_2e_src","occupied","routes","componentWillReceiveProps","nextProps","setState","render","reset_drawings","set_switch_img","set_route_drawing","background","throw_sw_1","click_sig_2w","click_sig_2ws","click_sig_2e","color","i","length"],"mappings":"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","sourcesContent":["/**\n * @file OV.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for OV Interlocking\n *\n * Extends the React Component Class and is the UI part of the OV Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\n\n// Import React Component\nimport React, { Component } from 'react';\n// Import CSS style sheet\nimport '../../../css/Southern_Tier_Line/ov.css';\n\n// Import Images\n// Switch Images\nimport SW_U_E from '../../../images/SW_U_E.png';\nimport SW_U_E_Lined from '../../../images/SW_U_E_Lined.png';\nimport SW_U_E_Occupied from '../../../images/SW_U_E_Occupied.png';\nimport SW_U_E_R from '../../../images/SW_U_E_R.png';\nimport SW_U_E_R_Lined from '../../../images/SW_U_E_R_Lined.png';\nimport SW_U_E_R_Occupied from '../../../images/SW_U_E_R_Occupied.png';\n\n// Signal Images\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png';\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n\n\n/**\n * The React JSX Component Class for the OV Interlocking\n * \n * This class is a JSX React Component for the OV Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\nclass OV extends Component {\n    /**\n     * State\n     * @summary Object that holds the state or status information for the component\n     * \n     * This object holds all the information for the interlocking that is required to display the routes \n     * correctly\n     * \n     * Anything that has \"this.props.\" is passed down from the CTC interlocking class\n     */\n    state = {  \n        // Switch Status\n        sw_1: this.props.status.sw_1,\n        // Image File for the switch - Will change depending on route\n        sw_1_src: SW_U_E,\n        // Colors for tail tracks - Will change depending on route\n        tail_w: Empty,\n        tail_1_e: Empty,\n        tail_2_e: Empty,\n        // Image File for the signals - Will change depending on route\n        sig_2w_src: SIG_W,\n        sig_2ws_src: SIG_W,\n        sig_2e_src: SIG_E,\n        // Information For Interlocking Routes\n        occupied: this.props.status.occupied,\n        routes: this.props.status.routes\n    };\n\n    /**\n     * componentWillReceiveProps()\n     * @summary Function that updates the state of the component\n     * \n     * The data that is being changed is passed down from the CTC classes in the simulation backend\n     * \n     * @param nextProps, the new data to set the component state too\n     */\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            sw_1: nextProps.status.sw_1,\n            occupied: nextProps.status.occupied,\n            routes: nextProps.status.routes\n        });\n    }\n    // ---- END componentWillReceiveProps() ----\n\n    /**\n     * render()\n     * @summary standard React function that draws the interlocking to the screen\n     */\n    render() { \n        // Clear all the drawings from the interlocking so if a train clears the route is gone\n        this.reset_drawings(); \n        // Set the switch images based off the state of each crossover\n        this.set_switch_img();\n        // Draw all the current routes in the interlocking\n        this.set_route_drawing();\n\n        // Returns the HTML to draw the interlocking and it's current state to the screen\n        return (  \n            <div>\n                {/* Tags */}\n                <div className=\"ov_title\">CP OV</div>\n                <div className=\"ov_milepost\">MP 75.0SR</div>\n                {/* West Side Tail Tracks */}\n                <div className=\"ov_west\" style={{background: this.state.tail_w}}></div>\n                {/* Switches */}\n                <div className=\"ov_SW_1\" onClick={this.props.throw_sw_1}><img alt=\"\" src={this.state.sw_1_src}/></div>\n                {/* East Side Tail Tracks */}\n                <div className=\"ov_1_east\" style={{background: this.state.tail_1_e}}></div>\n                <div className=\"ov_2_east\" style={{background: this.state.tail_2_e}}></div>\n                {/* Signals */}\n                <div className=\"ov_sig_2w\" onClick={this.props.click_sig_2w}><img alt=\"\"  src={this.state.sig_2w_src}/></div>\n                <div className=\"ov_sig_2ws\" onClick={this.props.click_sig_2ws}><img alt=\"\"  src={this.state.sig_2ws_src}/></div>\n                <div className=\"ov_sig_2e\" onClick={this.props.click_sig_2e}><img alt=\"\"  src={this.state.sig_2e_src}/></div>\n            </div>\n        );\n    }\n    // ---- END render() ----\n\n    /**\n     * @summary Sets the drawing for the route through the interlocking\n     * \n     * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n     * will change depending on if the interlocking is occupied or not\n     */\n    set_route_drawing() {\n        // Setting the color of the tracks depending on if the interlocking in occupied or not\n        let color = null;\n        if (this.state.occupied) {\n            color = Red;\n        }\n        else {\n            color = Green;\n        }\n\n        // Loop through all the routes\n        for (let i = 0; i < this.state.routes.length; i++) {\n            if (this.state.routes[i] === \"W_1_1__|__1_bc_ov\" || this.state.routes[i] === \"E_1_1__|__1_ov_howells\") {\n                // Tail Tracks\n                this.state.tail_1_e = color;\n                this.state.tail_w = color;\n\n                // The Route Is Occupied\n                if (this.state.occupied) {\n                    // Switches\n                    this.state.sw_1_src = SW_U_E_Occupied;\n\n                    // Signals\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_2ws_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switches\n                    this.state.sw_1_src = SW_U_E_Lined;\n\n                    // Signals\n                    // West Bound Signals\n                    if (this.state.routes[i] === \"W_1_1__|__1_bc_ov\") {\n                        this.state.sig_2w_src = SIG_W_Clear;\n                        this.state.sig_2ws_src = SIG_W_Stop;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                    }\n                    // East Bound Signals\n                    else {\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_2ws_src = SIG_W_Stop;\n                        this.state.sig_2e_src = SIG_E_Clear;\n                    }\n                }\n            }\n            else if (this.state.routes[i] === \"W_2_1__|__1_bc_ov\" || this.state.routes[i] === \"E_1_2__|__2_ov_howells\") {\n                // Tail Tracks\n                this.state.tail_2_e = color;\n                this.state.tail_w = color;\n\n                // The Route Is Occupied\n                if (this.state.occupied) {\n                    // Switches\n                    this.state.sw_1_src = SW_U_E_R_Occupied;\n\n                    // Signals\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_2ws_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switches\n                    this.state.sw_1_src = SW_U_E_R_Lined;\n\n                    // Signals\n                    // West Bound Signals\n                    if (this.state.routes[i] === \"W_2_1__|__1_bc_ov\") {\n                        this.state.sig_2ws_src = SIG_W_Clear;\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                    }\n                    // East Bound Signals\n                    else {\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_2ws_src = SIG_W_Stop;\n                        this.state.sig_2e_src = SIG_E_Clear;\n                    }\n                }\n            }\n        }\n    }\n    // ---- END set_route_drawings() ----\n\n    /**\n     * set_switch_img()\n     * @summary Changes image sources for the switches, depending on switch status\n     * \n     * This function uses the data passed in through status from the CTC classes and \n     * shows if the switches are reversed or not on the screen, by changing the image\n     * source files, to the correct .png file respectivly\n     */\n    set_switch_img() {\n        // Set SW #1\n        // SW #1 Reversed\n        if (this.state.sw_1) {\n            this.state.sw_1_src = SW_U_E_R;\n        }\n        // SW #1 Normal\n        else {\n            this.state.sw_1_src = SW_U_E;\n        }\n    }\n    // ---- END set_switch_img() ----\n\n    /**\n     * @summary Function to reset the signal images and track colors\n     * \n     * This function is need, because if the player was to remove a route,\n     * or when the train clears the interlocking nothing will clear the route\n     * the is displaying on the screen, even if it's gone in the backend\n     */\n    reset_drawings() {\n        this.state.tail_1_e = Empty;\n        this.state.tail_2_e = Empty;\n        this.state.tail_w = Empty;\n\n        this.state.sig_2w_src = SIG_W;\n        this.state.sig_2ws_src = SIG_W;\n        this.state.sig_2e_src = SIG_E;\n    }\n    //---- END reset_drawings() ----\n}\n \n// Export the interlocking to be drawn on the screen\nexport default OV;"]},"metadata":{},"sourceType":"module"}