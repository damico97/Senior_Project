{"ast":null,"code":"import _classCallCheck from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/inherits\";/**\n * @file CentralValley.jsx\n * @author Joey Damico\n * @date July 16, 2019\n * @summary React JSX Component Class that is for CP Central Valley\n *\n * Extends the React Component Class and is the UI part of CP Central Valley,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */import React,{Component}from'react';// Import CSS style sheet\nimport'../../../css/Southern_Tier_Line/centralValley.css';// Import Images\n// Switch Images\nimport SW_U_E from'../../../images/SW_U_E.png';import SW_U_E_Lined from'../../../images/SW_U_E_Lined.png';import SW_U_E_Occupied from'../../../images/SW_U_E_Occupied.png';import SW_U_E_R from'../../../images/SW_U_E_R.png';import SW_U_E_R_Lined from'../../../images/SW_U_E_R_Lined.png';import SW_U_E_R_Occupied from'../../../images/SW_U_E_R_Occupied.png';// Signal Images\nimport SIG_W from'../../../images/SIG_W.png';import SIG_W_Clear from'../../../images/SIG_W_Clear.png';import SIG_W_Stop from'../../../images/SIG_W_Stop.png';import SIG_E from'../../../images/SIG_E.png';import SIG_E_Clear from'../../../images/SIG_E_Clear.png';import SIG_E_Stop from'../../../images/SIG_E_Stop.png';// Color Constants For Drawing Routes\nvar Empty='#999999';var Green='#75fa4c';var Red='#eb3323';/**\n * The React JSX Component Class for the Central Valley Interlocking\n * \n * This class is a JSX React Component for the Central Valley Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */var CentralValley=/*#__PURE__*/function(_Component){_inherits(CentralValley,_Component);function CentralValley(){var _getPrototypeOf2;var _this;_classCallCheck(this,CentralValley);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(CentralValley)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={// Switch Status\nsw_21:_this.props.status.sw_21,// Image File for the switch - Will change depending on route\nsw_21_src:SW_U_E,// Image File for the signals - Will change depending on route\nsig_2w_src:SIG_W,sig_1w_src:SIG_W,sig_1e_src:SIG_E,// Colors for tail tracks - Will change depending on route\ntail_w:Empty,tail_1_e:Empty,tail_2_e:Empty,// Information For Interlocking Routes\noccupied:_this.props.status.occupied,routes:_this.props.status.routes};return _this;}_createClass(CentralValley,[{key:\"componentWillReceiveProps\",/**\n     * @summary Function that updates the state of the component\n     * \n     * The data that is being changed is passed down from the CTC classes in the simulation backend\n     * \n     * @param nextProps, the new data to set the component state too\n     */value:function componentWillReceiveProps(nextProps){this.setState({sw_21:nextProps.status.sw_21,occupied:nextProps.status.occupied,routes:nextProps.status.routes});}// ---- END componentWillReceiveProps() ----\n/**\n     * @summary standard React function that draws the interlocking to the screen\n     */},{key:\"render\",value:function render(){// Clear all the drawings from the interlocking so if a train clears the route is gone\nthis.reset_drawings();// Set the switch images based off the state of each crossover\nthis.set_switch_img();// Draw all the current routes in the interlocking\nthis.set_route_drawings();// Returns the HTML to draw the interlocking and it's current state to the screen\nreturn React.createElement(\"div\",null,React.createElement(\"div\",{className:\"valley_title\"},\"CP CENTRAL VALLEY\"),React.createElement(\"div\",{className:\"valley_milepost\"},\"MP 47.8JS\"),React.createElement(\"div\",{className:\"valley_west\",style:{background:this.state.tail_w}}),React.createElement(\"div\",{className:\"valley_SW_21\",onClick:this.props.throw_sw_21},React.createElement(\"img\",{src:this.state.sw_21_src})),React.createElement(\"div\",{className:\"valley_2_east\",style:{background:this.state.tail_2_e}}),React.createElement(\"div\",{className:\"valley_1_east\",style:{background:this.state.tail_1_e}}),React.createElement(\"div\",{className:\"valley_sig_2w\",onClick:this.props.click_sig_2w},React.createElement(\"img\",{src:this.state.sig_2w_src})),React.createElement(\"div\",{className:\"valley_sig_1w\",onClick:this.props.click_sig_1w},React.createElement(\"img\",{src:this.state.sig_1w_src})),React.createElement(\"div\",{className:\"valley_sig_1e\",onClick:this.props.click_sig_1e},React.createElement(\"img\",{src:this.state.sig_1e_src})));}// ---- END render() ----\n/**\n     * @summary Sets the drawing for the route through the interlocking\n     * \n     * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n     * will change depending on if the interlocking is occupied or not\n     */},{key:\"set_route_drawings\",value:function set_route_drawings(){// Setting the color of the tracks depending on if the interlocking in occupied or not\nvar color=null;if(this.state.occupied){color=Red;}else{color=Green;}for(var i=0;i<this.state.routes.length;i++){// Routes with Track 1 on both the West and East sides\nif(this.state.routes[i]===\"W_1_1__|__1_hudson_valley\"||this.state.routes[i]===\"E_1_1__|__1_valley_harriman\"){// Tail Tracks\nthis.state.tail_1_e=color;this.state.tail_w=color;// Drawing if the interlocking is occupied\nif(this.state.occupied){// Switch Image\nthis.state.sw_21_src=SW_U_E_Occupied;// Signal Images\nthis.state.sig_2w_src=SIG_W_Stop;this.state.sig_1w_src=SIG_W_Stop;this.state.sig_1e_src=SIG_E_Stop;}// Routing is not occupied\nelse{// Switch Image\nthis.state.sw_21_src=SW_U_E_Lined;// Signal Images\n// West Bound\nif(this.state.routes[i]===\"W_1_1__|__1_hudson_valley\"){this.state.sig_2w_src=SIG_W_Stop;this.state.sig_1w_src=SIG_W_Clear;this.state.sig_1e_src=SIG_E_Stop;}// East Bound\nelse{this.state.sig_2w_src=SIG_W_Stop;this.state.sig_1w_src=SIG_W_Stop;this.state.sig_1e_src=SIG_E_Clear;}}}// Routes With Track 2 on West Side and Track 1 on East Side\nelse if(this.state.routes[i]===\"W_2_1__|__1_hudson_valley\"||this.state.routes[i]===\"E_1_2__|__2_valley_harriman\"){// Tail Tracks\nthis.state.tail_2_e=color;this.state.tail_w=color;// Drawing if the interlocking is occupied\nif(this.state.occupied){// Switch Image\nthis.state.sw_21_src=SW_U_E_R_Occupied;// Signal Images\nthis.state.sig_2w_src=SIG_W_Stop;this.state.sig_1w_src=SIG_W_Stop;this.state.sig_1e_src=SIG_E_Stop;}// Routing that is not occupied\nelse{// Switch Image\nthis.state.sw_21_src=SW_U_E_R_Lined;// Signal Images\n// West Bound Route\nif(this.state.routes[i]===\"W_2_1__|__1_hudson_valley\"){this.state.sig_2w_src=SIG_W_Clear;this.state.sig_1w_src=SIG_W_Stop;this.state.sig_1e_src=SIG_E_Stop;}// East Bound Route\nelse{this.state.sig_2w_src=SIG_W_Stop;this.state.sig_1w_src=SIG_W_Stop;this.state.sig_1e_src=SIG_E_Clear;}}}}}// ---- END set_route_drawings() ----\n/**\n     * @summary Changes image sources for the switches, depending on switch status\n     * \n     * This function uses the data passed in through status from the CTC classes and \n     * shows if the switches are reversed or not on the screen, by changing the image\n     * source files, to the correct .png file respectivly\n     */},{key:\"set_switch_img\",value:function set_switch_img(){// Switch #21 \n// Reversed\nif(this.state.sw_21){this.state.sw_21_src=SW_U_E_R;}// Normal\nelse{this.state.sw_21_src=SW_U_E;}}// ---- END set_switch_image() ----\n/**\n     * @summary Function to reset the signal images and track colors\n     * \n     * This function is need, because if the player was to remove a route,\n     * or when the train clears the interlocking nothing will clear the route\n     * the is displaying on the screen, even if it's gone in the backend\n     */},{key:\"reset_drawings\",value:function reset_drawings(){this.state.sig_2w_src=SIG_W;this.state.sig_1w_src=SIG_W;this.state.sig_1e_src=SIG_E;this.state.tail_w=Empty;this.state.tail_1_e=Empty;this.state.tail_2_e=Empty;}//---- END reset_drawings() ----\n}]);return CentralValley;}(Component);// Export the interlocking to be drawn on the screen\nexport default CentralValley;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Southern_Tier_Line/CentralValley.jsx"],"names":["React","Component","SW_U_E","SW_U_E_Lined","SW_U_E_Occupied","SW_U_E_R","SW_U_E_R_Lined","SW_U_E_R_Occupied","SIG_W","SIG_W_Clear","SIG_W_Stop","SIG_E","SIG_E_Clear","SIG_E_Stop","Empty","Green","Red","CentralValley","state","sw_21","props","status","sw_21_src","sig_2w_src","sig_1w_src","sig_1e_src","tail_w","tail_1_e","tail_2_e","occupied","routes","nextProps","setState","reset_drawings","set_switch_img","set_route_drawings","background","throw_sw_21","click_sig_2w","click_sig_1w","click_sig_1e","color","i","length"],"mappings":"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","sourcesContent":["/**\n * @file CentralValley.jsx\n * @author Joey Damico\n * @date July 16, 2019\n * @summary React JSX Component Class that is for CP Central Valley\n *\n * Extends the React Component Class and is the UI part of CP Central Valley,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\n\nimport React, { Component } from 'react';\n// Import CSS style sheet\nimport '../../../css/Southern_Tier_Line/centralValley.css';\n\n// Import Images\n// Switch Images\nimport SW_U_E from '../../../images/SW_U_E.png';\nimport SW_U_E_Lined from '../../../images/SW_U_E_Lined.png';\nimport SW_U_E_Occupied from '../../../images/SW_U_E_Occupied.png';\nimport SW_U_E_R from '../../../images/SW_U_E_R.png';\nimport SW_U_E_R_Lined from '../../../images/SW_U_E_R_Lined.png';\nimport SW_U_E_R_Occupied from '../../../images/SW_U_E_R_Occupied.png';\n\n// Signal Images\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png';\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n\n\n/**\n * The React JSX Component Class for the Central Valley Interlocking\n * \n * This class is a JSX React Component for the Central Valley Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\nclass CentralValley extends Component {\n    /**\n     * State\n     * @summary Object that holds the state or status information for the component\n     * \n     * This object holds all the information for the interlocking that is required to display the routes \n     * correctly\n     * \n     * Anything that has \"this.props.\" is passed down from the CTC interlocking class\n     */\n    state = {  \n        // Switch Status\n        sw_21: this.props.status.sw_21,\n        // Image File for the switch - Will change depending on route\n        sw_21_src: SW_U_E,\n        // Image File for the signals - Will change depending on route\n        sig_2w_src: SIG_W,\n        sig_1w_src: SIG_W,\n        sig_1e_src: SIG_E,\n        // Colors for tail tracks - Will change depending on route\n        tail_w: Empty,\n        tail_1_e: Empty,\n        tail_2_e: Empty,\n        // Information For Interlocking Routes\n        occupied: this.props.status.occupied,\n        routes: this.props.status.routes\n    };\n\n    /**\n     * @summary Function that updates the state of the component\n     * \n     * The data that is being changed is passed down from the CTC classes in the simulation backend\n     * \n     * @param nextProps, the new data to set the component state too\n     */\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            sw_21: nextProps.status.sw_21,\n            occupied: nextProps.status.occupied,\n            routes: nextProps.status.routes\n        });\n    }\n    // ---- END componentWillReceiveProps() ----\n\n    /**\n     * @summary standard React function that draws the interlocking to the screen\n     */\n    render() { \n        // Clear all the drawings from the interlocking so if a train clears the route is gone\n        this.reset_drawings();\n        // Set the switch images based off the state of each crossover\n        this.set_switch_img();\n        // Draw all the current routes in the interlocking\n        this.set_route_drawings();\n\n        // Returns the HTML to draw the interlocking and it's current state to the screen\n        return (  \n            <div>\n                {/* Title Text */}\n                <div className=\"valley_title\">CP CENTRAL VALLEY</div>\n                <div className=\"valley_milepost\">MP 47.8JS</div>\n                \n                {/* West Side Tail Tracks */}\n                <div className=\"valley_west\" style={{background: this.state.tail_w}}></div>\n\n                {/* Switches */}\n                <div className=\"valley_SW_21\" onClick={this.props.throw_sw_21}><img src={this.state.sw_21_src}/></div>\n\n                {/* East Side Tail Tracks */}\n                <div className=\"valley_2_east\" style={{background: this.state.tail_2_e}}></div>\n                <div className=\"valley_1_east\" style={{background: this.state.tail_1_e}}></div>\n\n                {/* Signal */}\n                {/* West */}\n                <div className=\"valley_sig_2w\" onClick={this.props.click_sig_2w}><img src={this.state.sig_2w_src}/></div>\n                <div className=\"valley_sig_1w\" onClick={this.props.click_sig_1w}><img src={this.state.sig_1w_src}/></div>\n                {/* East */}\n                <div className=\"valley_sig_1e\" onClick={this.props.click_sig_1e}><img src={this.state.sig_1e_src}/></div>\n            </div>\n        );\n    }\n    // ---- END render() ----\n\n    /**\n     * @summary Sets the drawing for the route through the interlocking\n     * \n     * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n     * will change depending on if the interlocking is occupied or not\n     */\n    set_route_drawings() {\n        // Setting the color of the tracks depending on if the interlocking in occupied or not\n        let color = null;\n        if (this.state.occupied) {\n            color = Red;\n        }\n        else {\n            color = Green;\n        }\n        for (let i = 0; i < this.state.routes.length; i++) {\n            // Routes with Track 1 on both the West and East sides\n            if (this.state.routes[i] === \"W_1_1__|__1_hudson_valley\" || this.state.routes[i] === \"E_1_1__|__1_valley_harriman\") {\n                // Tail Tracks\n                this.state.tail_1_e = color;\n                this.state.tail_w = color;\n\n                // Drawing if the interlocking is occupied\n                if (this.state.occupied) {\n                    // Switch Image\n                    this.state.sw_21_src = SW_U_E_Occupied;\n\n                    // Signal Images\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_1w_src = SIG_W_Stop;\n                    this.state.sig_1e_src = SIG_E_Stop;\n                }\n                // Routing is not occupied\n                else {\n                    // Switch Image\n                    this.state.sw_21_src = SW_U_E_Lined;\n\n                    // Signal Images\n                    // West Bound\n                    if (this.state.routes[i] === \"W_1_1__|__1_hudson_valley\") {\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_1w_src = SIG_W_Clear;\n                        this.state.sig_1e_src = SIG_E_Stop;\n                    }\n                    // East Bound\n                    else {\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_1w_src = SIG_W_Stop;\n                        this.state.sig_1e_src = SIG_E_Clear;\n                    }\n                }\n            }\n            // Routes With Track 2 on West Side and Track 1 on East Side\n            else if (this.state.routes[i] === \"W_2_1__|__1_hudson_valley\" || this.state.routes[i] === \"E_1_2__|__2_valley_harriman\") {\n                // Tail Tracks\n                this.state.tail_2_e = color;\n                this.state.tail_w = color;\n\n                // Drawing if the interlocking is occupied\n                if (this.state.occupied) {\n                    // Switch Image\n                    this.state.sw_21_src = SW_U_E_R_Occupied;\n\n                    // Signal Images\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_1w_src = SIG_W_Stop;\n                    this.state.sig_1e_src = SIG_E_Stop;\n                }\n                // Routing that is not occupied\n                else {\n                    // Switch Image\n                    this.state.sw_21_src = SW_U_E_R_Lined;\n\n                    // Signal Images\n                    // West Bound Route\n                    if (this.state.routes[i] === \"W_2_1__|__1_hudson_valley\") {\n                        this.state.sig_2w_src = SIG_W_Clear;\n                        this.state.sig_1w_src = SIG_W_Stop;\n                        this.state.sig_1e_src = SIG_E_Stop;\n                    }\n                    // East Bound Route\n                    else {\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_1w_src = SIG_W_Stop;\n                        this.state.sig_1e_src = SIG_E_Clear;\n                    }\n                }\n            }\n        }\n    } \n    // ---- END set_route_drawings() ----\n\n    /**\n     * @summary Changes image sources for the switches, depending on switch status\n     * \n     * This function uses the data passed in through status from the CTC classes and \n     * shows if the switches are reversed or not on the screen, by changing the image\n     * source files, to the correct .png file respectivly\n     */\n    set_switch_img() {\n        // Switch #21 \n        // Reversed\n        if (this.state.sw_21) {\n            this.state.sw_21_src = SW_U_E_R;\n        }\n        // Normal\n        else {\n            this.state.sw_21_src = SW_U_E;\n        }\n    }\n    // ---- END set_switch_image() ----\n\n    /**\n     * @summary Function to reset the signal images and track colors\n     * \n     * This function is need, because if the player was to remove a route,\n     * or when the train clears the interlocking nothing will clear the route\n     * the is displaying on the screen, even if it's gone in the backend\n     */\n    reset_drawings() {\n        this.state.sig_2w_src = SIG_W;\n        this.state.sig_1w_src = SIG_W;\n        this.state.sig_1e_src = SIG_E;\n\n        this.state.tail_w = Empty;\n        this.state.tail_1_e = Empty;\n        this.state.tail_2_e = Empty;\n    }\n    //---- END reset_drawings() ----\n}\n \n// Export the interlocking to be drawn on the screen\nexport default CentralValley;"]},"metadata":{},"sourceType":"module"}