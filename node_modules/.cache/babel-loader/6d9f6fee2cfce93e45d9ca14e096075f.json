{"ast":null,"code":"import _classCallCheck from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/createClass\";/**\n * @file ctc_train.js\n * @author Joey Damico\n * @date September 25, 2019\n * @brief CTC Controller Class for a Clock for the trains\n */ // Import the Custom Clock Class\nimport Clock from'../Trains/clock.js';/**\n * CLASS Train\n * @brief Class that keeps track of the time since the start of the application\n * \n * @details This class is used to keep track and calculate how much time has passed since the launch\n * of the program, it is used to keep the trains moving at the correct times\n * \n * MEMBER VARIABLES\n * start_time -> The the games was started\n */var Train=/*#__PURE__*/function(){/**\n     * constructor()\n     * @brief The constructor for the Train class\n     * \n     * @details This will initialize all the member variables when the program is started\n     * \n     * @param p_symbol -> The Train's Symbol\n     * @param p_location -> The Trains Inital Location\n     * @param p_direction -> The Direction the train is traveling\n     * @param p_block_size -> The size of the trains inital block\n     */function Train(p_symbol,p_location,p_direction,p_block_size){_classCallCheck(this,Train);this.clock=new Clock();this.clock.startClock();this.symbol=p_symbol;this.current_location=p_location;this.direction=p_direction;this.block_size=p_block_size;this.block_start=this.clock.getTimeFromStart();this.route=true;}// ---- END constructor() ----\n/**\n     * get_symbol()\n     * @brief Getter for the trains symbol\n     * \n     * @returns The train symbol\n     */_createClass(Train,[{key:\"get_symbol\",value:function get_symbol(){return this.symbol;}// ---- END get_symbol() ----\n/**\n     * update_location()\n     * @brief Take in a new location and sets it for the train \n     */},{key:\"update_location\",value:function update_location(new_next_location){this.current_location=new_next_location;this.block_start=this.clock.getTimeFromStart();}// ---- END update_location() ----\n/**\n     * can_update_location()\n     * @brief Determines if the train can move to the next location\n     */},{key:\"can_update_location\",value:function can_update_location(){// If The train has a route\nif(this.route){// Check if the train has spent enough time in the curent block\nif(this.clock.getTimeFromStart()-this.block_start>this.block_size){return true;}else{return false;}}}// ---- END can_update_location() ----\n/**\n     * get_location()\n     * @brief Getter for the current_location variable\n     */},{key:\"get_location\",value:function get_location(){return this.current_location;}// ---- END get_location() ----\n/**\n     * get_block_size()\n     * @brief Getter for the block_size variable\n     */},{key:\"get_block_size\",value:function get_block_size(){return this.block_size;}// ---- END get_block_size() ----\n/**\n     * set_block_size()\n     * @brief Takes in the new block size, and sets the member variable\n     * @param n_size, the new size of the next block\n     */},{key:\"set_block_size\",value:function set_block_size(n_size){this.block_size=n_size;}// ---- END set_block_size() ----\n/**\n     * get_direction()\n     * @brief Getter for the direction member variable\n     */},{key:\"get_direction\",value:function get_direction(){return this.direction;}// ---- END get_direction() ----\n/**\n     * get_route()\n     * @brief Getter for the route member variable\n     */},{key:\"get_route\",value:function get_route(){return this.route;}// ---- END get_route() ----\n/**\n     * set_route()\n     * @brief Takes in the next route and sets the member variable\n     * @param n_route, the trains new route\n     */},{key:\"set_route\",value:function set_route(n_route){this.route=n_route;}// ---- END set_route() ----\n}]);return Train;}();// Export the panel to be drawn on the screen\nexport default Train;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Trains/train.js"],"names":["Clock","Train","p_symbol","p_location","p_direction","p_block_size","clock","startClock","symbol","current_location","direction","block_size","block_start","getTimeFromStart","route","new_next_location","n_size","n_route"],"mappings":"0QAAA;;;;;IAOA;AACA,MAAOA,CAAAA,KAAP,KAAkB,oBAAlB,CAEA;;;;;;;;;MAUMC,CAAAA,K,yBACF;;;;;;;;;;OAWA,eAAYC,QAAZ,CAAsBC,UAAtB,CAAkCC,WAAlC,CAA+CC,YAA/C,CAA6D,6BACzD,KAAKC,KAAL,CAAa,GAAIN,CAAAA,KAAJ,EAAb,CACA,KAAKM,KAAL,CAAWC,UAAX,GAEA,KAAKC,MAAL,CAAcN,QAAd,CACA,KAAKO,gBAAL,CAAwBN,UAAxB,CACA,KAAKO,SAAL,CAAiBN,WAAjB,CACA,KAAKO,UAAL,CAAkBN,YAAlB,CACA,KAAKO,WAAL,CAAmB,KAAKN,KAAL,CAAWO,gBAAX,EAAnB,CAEA,KAAKC,KAAL,CAAa,IAAb,CACH,CACD;AAEA;;;;;wEAMa,CACT,MAAO,MAAKN,MAAZ,CACH,CACD;AAEA;;;+DAIgBO,iB,CAAmB,CAC/B,KAAKN,gBAAL,CAAwBM,iBAAxB,CACA,KAAKH,WAAL,CAAmB,KAAKN,KAAL,CAAWO,gBAAX,EAAnB,CACH,CACD;AAEA;;;wEAIsB,CAClB;AACA,GAAI,KAAKC,KAAT,CAAgB,CACZ;AACA,GAAI,KAAKR,KAAL,CAAWO,gBAAX,GAAgC,KAAKD,WAArC,CAAmD,KAAKD,UAA5D,CAAwE,CACpE,MAAO,KAAP,CACH,CAFD,IAGK,CACD,MAAO,MAAP,CACH,CACJ,CACJ,CACD;AAEA;;;0DAIe,CACX,MAAO,MAAKF,gBAAZ,CACH,CACD;AAEA;;;8DAIiB,CACb,MAAO,MAAKE,UAAZ,CACH,CACD;AAEA;;;;6DAKeK,M,CAAQ,CACnB,KAAKL,UAAL,CAAkBK,MAAlB,CACH,CACD;AAEA;;;4DAIgB,CACZ,MAAO,MAAKN,SAAZ,CACH,CACD;AAEA;;;oDAIY,CACR,MAAO,MAAKI,KAAZ,CACH,CACD;AAEA;;;;mDAKUG,O,CAAS,CACf,KAAKH,KAAL,CAAaG,OAAb,CACH,CACD;qBAGJ;AACA,cAAehB,CAAAA,KAAf","sourcesContent":["/**\n * @file ctc_train.js\n * @author Joey Damico\n * @date September 25, 2019\n * @brief CTC Controller Class for a Clock for the trains\n */\n\n// Import the Custom Clock Class\nimport Clock from '../Trains/clock.js';\n\n/**\n * CLASS Train\n * @brief Class that keeps track of the time since the start of the application\n * \n * @details This class is used to keep track and calculate how much time has passed since the launch\n * of the program, it is used to keep the trains moving at the correct times\n * \n * MEMBER VARIABLES\n * start_time -> The the games was started\n */\nclass Train {\n    /**\n     * constructor()\n     * @brief The constructor for the Train class\n     * \n     * @details This will initialize all the member variables when the program is started\n     * \n     * @param p_symbol -> The Train's Symbol\n     * @param p_location -> The Trains Inital Location\n     * @param p_direction -> The Direction the train is traveling\n     * @param p_block_size -> The size of the trains inital block\n     */\n    constructor(p_symbol, p_location, p_direction, p_block_size) {\n        this.clock = new Clock();\n        this.clock.startClock();\n\n        this.symbol = p_symbol;\n        this.current_location = p_location;\n        this.direction = p_direction;\n        this.block_size = p_block_size;\n        this.block_start = this.clock.getTimeFromStart();\n\n        this.route = true;\n    }\n    // ---- END constructor() ----\n \n    /**\n     * get_symbol()\n     * @brief Getter for the trains symbol\n     * \n     * @returns The train symbol\n     */\n    get_symbol() {\n        return this.symbol;\n    }\n    // ---- END get_symbol() ----\n\n    /**\n     * update_location()\n     * @brief Take in a new location and sets it for the train \n     */\n    update_location(new_next_location) {\n        this.current_location = new_next_location;\n        this.block_start = this.clock.getTimeFromStart();\n    }\n    // ---- END update_location() ----\n\n    /**\n     * can_update_location()\n     * @brief Determines if the train can move to the next location\n     */\n    can_update_location() {\n        // If The train has a route\n        if (this.route) {\n            // Check if the train has spent enough time in the curent block\n            if (this.clock.getTimeFromStart() - this.block_start > this.block_size) {\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    // ---- END can_update_location() ----\n\n    /**\n     * get_location()\n     * @brief Getter for the current_location variable\n     */\n    get_location() {\n        return this.current_location;\n    }\n    // ---- END get_location() ----\n\n    /**\n     * get_block_size()\n     * @brief Getter for the block_size variable\n     */\n    get_block_size() {\n        return this.block_size;\n    }\n    // ---- END get_block_size() ----\n\n    /**\n     * set_block_size()\n     * @brief Takes in the new block size, and sets the member variable\n     * @param n_size, the new size of the next block\n     */\n    set_block_size(n_size) {\n        this.block_size = n_size;\n    }\n    // ---- END set_block_size() ----\n\n    /**\n     * get_direction()\n     * @brief Getter for the direction member variable\n     */\n    get_direction() {\n        return this.direction;\n    }\n    // ---- END get_direction() ----\n\n    /**\n     * get_route()\n     * @brief Getter for the route member variable\n     */\n    get_route() {\n        return this.route;\n    }\n    // ---- END get_route() ----\n\n    /**\n     * set_route()\n     * @brief Takes in the next route and sets the member variable\n     * @param n_route, the trains new route\n     */\n    set_route(n_route) {\n        this.route = n_route;\n    }\n    // ---- END set_route() ----\n}\n\n// Export the panel to be drawn on the screen\nexport default Train;"]},"metadata":{},"sourceType":"module"}