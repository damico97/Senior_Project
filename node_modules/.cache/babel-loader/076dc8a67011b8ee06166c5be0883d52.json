{"ast":null,"code":"var _jsxFileName = \"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Southern_Tier_Line/Sterling.jsx\";\n\n/**\n * @file Sterling.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for Sterling Interlocking\n *\n * Extends the React Component Class and is the UI part of the Sterling Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\nimport React, { Component } from 'react'; // Import CSS style sheet\n\nimport '../../../css/Southern_Tier_Line/sterling.css'; // Import Images\n// Switch Images\n\nimport SW_U_E from '../../../images/SW_U_E.png';\nimport SW_U_E_Lined from '../../../images/SW_U_E_Lined.png';\nimport SW_U_E_Occupied from '../../../images/SW_U_E_Occupied.png';\nimport SW_U_E_R from '../../../images/SW_U_E_R.png';\nimport SW_U_E_R_Lined from '../../../images/SW_U_E_R_Lined.png';\nimport SW_U_E_R_Occupied from '../../../images/SW_U_E_R_Occupied.png'; // Signal Images\n\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png'; // Color Constants For Drawing Routes\n\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n/**\n * The React JSX Component Class for the Hilburn Interlocking\n * \n * This class is a JSX React Component for the Hilburn Interlocking, this will control all the UI for the component,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\n\nclass Sterling extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Switch Status\n      sw_21: this.props.status.sw_21,\n      // Image File for the switch - Will change depending on route\n      sw_21_src: SW_U_E,\n      // Image File for the signals - Will change depending on route\n      sig_2w_src: SIG_W,\n      sig_2ws_src: SIG_W,\n      sig_1e_src: SIG_E,\n      // Colors for tail tracks - Will change depending on route\n      tail_w: Empty,\n      tail_1_e: Empty,\n      tail_2_e: Empty,\n      // Information For Interlocking Routes\n      occupied: this.props.status.occupied,\n      routes: this.props.status.routes\n    };\n  }\n\n  /**\n   * componentWillReceiveProps()\n   * @summary Function that updates the state of the component\n   * \n   * The data that is being changed is passed down from the CTC classes in the simulation backend\n   * \n   * @param nextProps, the new data to set the component state too\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      sw_21: nextProps.status.sw_21,\n      occupied: nextProps.status.occupied,\n      routes: nextProps.status.routes\n    });\n  } // ---- END componentWillReceiveProps() ----\n\n  /**\n   * render()\n   * @summary standard React function that draws the interlocking to the screen\n   */\n\n\n  render() {\n    // Clear all the drawings from the interlocking so if a train clears the route is gone\n    this.reset_drawings(); // Set the switch images based off the state of each crossover\n\n    this.set_switch_img(); // Draw all the current routes in the interlocking\n\n    this.set_route_drawings(); // Returns the HTML to draw the interlocking and it's current state to the screen\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sterling_title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"CP STERLING\"), React.createElement(\"div\", {\n      className: \"sterling_milepost\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"MP 34.5JS\"), React.createElement(\"div\", {\n      className: \"sterling_west\",\n      style: {\n        background: this.state.tail_w\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"sterling_SW_21\",\n      onClick: this.props.throw_sw_21,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sw_21_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"sterling_1_east\",\n      style: {\n        background: this.state.tail_2_e\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"sterling_2_east\",\n      style: {\n        background: this.state.tail_1_e\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"sterling_sig_2ws\",\n      onClick: this.props.click_sig_2ws,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_2ws_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"sterling_sig_2w\",\n      onClick: this.props.click_sig_2w,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_2w_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"sterling_sig_1e\",\n      onClick: this.props.click_sig_1e,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_1e_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })));\n  } // ---- END render() ----\n\n  /**\n   * @summary Sets the drawing for the route through the interlocking\n   * \n   * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n   * will change depending on if the interlocking is occupied or not\n   */\n\n\n  set_route_drawings() {\n    // Setting the color of the tracks depending on if the interlocking in occupied or not\n    let color = null;\n\n    if (this.state.occupied) {\n      color = Red;\n    } else {\n      color = Green;\n    }\n\n    for (let i = 0; i < this.state.routes.length; i++) {\n      // Routes with Track 1 on both the West and East sides\n      if (this.state.routes[i] === \"W_1_1__|__1_harriman_sterling\" || this.state.routes[i] === \"E_1_2__|__2_sterling_hilburn\") {\n        // Tail Tracks\n        this.state.tail_1_e = color;\n        this.state.tail_w = color; // Drawing if the interlocking is occupied\n\n        if (this.state.occupied) {\n          // Switch Image\n          this.state.sw_21_src = SW_U_E_Occupied; // Signal Images\n\n          this.state.sig_2ws_src = SIG_W_Stop;\n          this.state.sig_2w_src = SIG_W_Stop;\n          this.state.sig_1e_src = SIG_E_Stop;\n        } // Routing is not occupied\n        else {\n            // Switch Image\n            this.state.sw_21_src = SW_U_E_Lined; // Signal Images\n            // West Bound\n\n            if (this.state.routes[i] === \"W_1_1__|__1_harriman_sterling\") {\n              this.state.sig_2ws_src = SIG_W_Stop;\n              this.state.sig_2w_src = SIG_W_Clear;\n              this.state.sig_1e_src = SIG_E_Stop;\n            } // East Bound\n            else {\n                this.state.sig_2ws_src = SIG_W_Stop;\n                this.state.sig_2w_src = SIG_W_Stop;\n                this.state.sig_1e_src = SIG_E_Clear;\n              }\n          }\n      } // Routes With Track 2 on West Side and Track 1 on East Side\n      else if (this.state.routes[i] === \"W_2_1__|__1_harriman_sterling\" || this.state.routes[i] === \"E_1_1__|__1_sterling_sf\") {\n          // Tail Tracks\n          this.state.tail_2_e = color;\n          this.state.tail_w = color; // Drawing if the interlocking is occupied\n\n          if (this.state.occupied) {\n            // Switch Image\n            this.state.sw_21_src = SW_U_E_R_Occupied; // Signal Images\n\n            this.state.sig_2ws_src = SIG_W_Stop;\n            this.state.sig_2w_src = SIG_W_Stop;\n            this.state.sig_1e_src = SIG_E_Stop;\n          } // Routing that is not occupied\n          else {\n              // Switch Image\n              this.state.sw_21_src = SW_U_E_R_Lined; // Signal Images\n              // West Bound Route\n\n              if (this.state.routes[i] === \"W_2_1__|__1_harriman_sterling\") {\n                this.state.sig_2ws_src = SIG_W_Clear;\n                this.state.sig_2w_src = SIG_W_Stop;\n                this.state.sig_1e_src = SIG_E_Stop;\n              } // East Bound Route\n              else {\n                  this.state.sig_2ws_src = SIG_W_Stop;\n                  this.state.sig_2w_src = SIG_W_Stop;\n                  this.state.sig_1e_src = SIG_E_Clear;\n                }\n            }\n        }\n    }\n  } // ---- END set_route_drawings() ----\n\n  /**\n   * set_switch_img()\n   * @summary Changes image sources for the switches, depending on switch status\n   * \n   * This function uses the data passed in through status from the CTC classes and \n   * shows if the switches are reversed or not on the screen, by changing the image\n   * source files, to the correct .png file respectivly\n   */\n\n\n  set_switch_img() {\n    // Set SW #1\n    // SW #1 Reversed\n    if (this.state.sw_21) {\n      this.state.sw_21_src = SW_U_E_R;\n    } // SW #1 Normal\n    else {\n        this.state.sw_21_src = SW_U_E;\n      }\n  } // ---- END set_switch_img() ----\n\n  /**\n   * @summary Function to reset the signal images and track colors\n   * \n   * This function is need, because if the player was to remove a route,\n   * or when the train clears the interlocking nothing will clear the route\n   * the is displaying on the screen, even if it's gone in the backend\n   */\n\n\n  reset_drawings() {\n    this.state.sig_2w_src = SIG_W;\n    this.state.sig_2ws_src = SIG_W;\n    this.state.sig_1e_src = SIG_E;\n    this.state.tail_w = Empty;\n    this.state.tail_1_e = Empty;\n    this.state.tail_2_e = Empty;\n  } //---- END reset_drawings() ----\n\n\n} // Export the interlocking to be drawn on the screen\n\n\nexport default Sterling;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Southern_Tier_Line/Sterling.jsx"],"names":["React","Component","SW_U_E","SW_U_E_Lined","SW_U_E_Occupied","SW_U_E_R","SW_U_E_R_Lined","SW_U_E_R_Occupied","SIG_W","SIG_W_Clear","SIG_W_Stop","SIG_E","SIG_E_Clear","SIG_E_Stop","Empty","Green","Red","Sterling","state","sw_21","props","status","sw_21_src","sig_2w_src","sig_2ws_src","sig_1e_src","tail_w","tail_1_e","tail_2_e","occupied","routes","componentWillReceiveProps","nextProps","setState","render","reset_drawings","set_switch_img","set_route_drawings","background","throw_sw_21","click_sig_2ws","click_sig_2w","click_sig_1e","color","i","length"],"mappings":"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","sourcesContent":["/**\n * @file Sterling.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for Sterling Interlocking\n *\n * Extends the React Component Class and is the UI part of the Sterling Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\nimport React, { Component } from 'react';\n// Import CSS style sheet\nimport '../../../css/Southern_Tier_Line/sterling.css';\n\n// Import Images\n// Switch Images\nimport SW_U_E from '../../../images/SW_U_E.png';\nimport SW_U_E_Lined from '../../../images/SW_U_E_Lined.png';\nimport SW_U_E_Occupied from '../../../images/SW_U_E_Occupied.png';\nimport SW_U_E_R from '../../../images/SW_U_E_R.png';\nimport SW_U_E_R_Lined from '../../../images/SW_U_E_R_Lined.png';\nimport SW_U_E_R_Occupied from '../../../images/SW_U_E_R_Occupied.png';\n\n// Signal Images\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png';\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n\n\n/**\n * The React JSX Component Class for the Hilburn Interlocking\n * \n * This class is a JSX React Component for the Hilburn Interlocking, this will control all the UI for the component,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\nclass Sterling extends Component {\n     /**\n     * State\n     * @summary Object that holds the state or status information for the component\n     * \n     * This object holds all the information for the interlocking that is required to display the routes \n     * correctly\n     * \n     * Anything that has \"this.props.\" is passed down from the CTC interlocking class\n     */\n    state = {  \n        // Switch Status\n        sw_21: this.props.status.sw_21,\n        // Image File for the switch - Will change depending on route\n        sw_21_src: SW_U_E,\n        // Image File for the signals - Will change depending on route\n        sig_2w_src: SIG_W,\n        sig_2ws_src: SIG_W,\n        sig_1e_src: SIG_E,\n        // Colors for tail tracks - Will change depending on route\n        tail_w: Empty,\n        tail_1_e: Empty,\n        tail_2_e: Empty,\n        // Information For Interlocking Routes\n        occupied: this.props.status.occupied,\n        routes: this.props.status.routes\n    };\n\n    /**\n     * componentWillReceiveProps()\n     * @summary Function that updates the state of the component\n     * \n     * The data that is being changed is passed down from the CTC classes in the simulation backend\n     * \n     * @param nextProps, the new data to set the component state too\n     */\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            sw_21: nextProps.status.sw_21,\n            occupied: nextProps.status.occupied,\n            routes: nextProps.status.routes\n        });\n    }\n    // ---- END componentWillReceiveProps() ----\n\n    /**\n     * render()\n     * @summary standard React function that draws the interlocking to the screen\n     */\n    render() { \n        // Clear all the drawings from the interlocking so if a train clears the route is gone\n        this.reset_drawings();\n        // Set the switch images based off the state of each crossover\n        this.set_switch_img();\n        // Draw all the current routes in the interlocking\n        this.set_route_drawings();\n\n        // Returns the HTML to draw the interlocking and it's current state to the screen\n        return (  \n            <div>\n                {/* Tags */}\n                <div className=\"sterling_title\">CP STERLING</div>\n                <div className=\"sterling_milepost\">MP 34.5JS</div>\n                {/* West Side Tail Tracks */}\n                <div className=\"sterling_west\" style={{background: this.state.tail_w}}></div>\n                {/* Switches */}\n                <div className=\"sterling_SW_21\" onClick={this.props.throw_sw_21}><img src={this.state.sw_21_src}/></div>\n                {/* East Side Tail Tracks */}\n                <div className=\"sterling_1_east\" style={{background: this.state.tail_2_e}}></div>\n                <div className=\"sterling_2_east\" style={{background: this.state.tail_1_e}}></div>\n                {/* Signals */}\n                <div className=\"sterling_sig_2ws\" onClick={this.props.click_sig_2ws}><img src={this.state.sig_2ws_src}/></div>\n                <div className=\"sterling_sig_2w\" onClick={this.props.click_sig_2w}><img src={this.state.sig_2w_src}/></div>\n                <div className=\"sterling_sig_1e\" onClick={this.props.click_sig_1e}><img src={this.state.sig_1e_src}/></div>\n            </div>\n        );\n    }\n    // ---- END render() ----\n\n    /**\n     * @summary Sets the drawing for the route through the interlocking\n     * \n     * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n     * will change depending on if the interlocking is occupied or not\n     */\n    set_route_drawings() {\n        // Setting the color of the tracks depending on if the interlocking in occupied or not\n        let color = null;\n        if (this.state.occupied) {\n            color = Red;\n        }\n        else {\n            color = Green;\n        }\n        for (let i = 0; i < this.state.routes.length; i++) {\n            // Routes with Track 1 on both the West and East sides\n            if (this.state.routes[i] === \"W_1_1__|__1_harriman_sterling\" || this.state.routes[i] === \"E_1_2__|__2_sterling_hilburn\") {\n                // Tail Tracks\n                this.state.tail_1_e = color;\n                this.state.tail_w = color;\n\n                // Drawing if the interlocking is occupied\n                if (this.state.occupied) {\n                    // Switch Image\n                    this.state.sw_21_src = SW_U_E_Occupied;\n\n                    // Signal Images\n                    this.state.sig_2ws_src = SIG_W_Stop;\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_1e_src = SIG_E_Stop;\n                }\n                // Routing is not occupied\n                else {\n                    // Switch Image\n                    this.state.sw_21_src = SW_U_E_Lined;\n\n                    // Signal Images\n                    // West Bound\n                    if (this.state.routes[i] === \"W_1_1__|__1_harriman_sterling\") {\n                        this.state.sig_2ws_src = SIG_W_Stop;\n                        this.state.sig_2w_src = SIG_W_Clear;\n                        this.state.sig_1e_src = SIG_E_Stop;\n                    }\n                    // East Bound\n                    else {\n                        this.state.sig_2ws_src = SIG_W_Stop;\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_1e_src = SIG_E_Clear;\n                    }\n                }\n            }\n            // Routes With Track 2 on West Side and Track 1 on East Side\n            else if (this.state.routes[i] === \"W_2_1__|__1_harriman_sterling\" || this.state.routes[i] === \"E_1_1__|__1_sterling_sf\" ) {\n                // Tail Tracks\n                this.state.tail_2_e = color;\n                this.state.tail_w = color;\n\n                // Drawing if the interlocking is occupied\n                if (this.state.occupied) {\n                    // Switch Image\n                    this.state.sw_21_src = SW_U_E_R_Occupied;\n\n                    // Signal Images\n                    this.state.sig_2ws_src = SIG_W_Stop;\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_1e_src = SIG_E_Stop;\n                }\n                // Routing that is not occupied\n                else {\n                    // Switch Image\n                    this.state.sw_21_src = SW_U_E_R_Lined;\n\n                    // Signal Images\n                    // West Bound Route\n                    if (this.state.routes[i] === \"W_2_1__|__1_harriman_sterling\") {\n                        this.state.sig_2ws_src = SIG_W_Clear;\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_1e_src = SIG_E_Stop;\n                    }\n                    // East Bound Route\n                    else {\n                        this.state.sig_2ws_src = SIG_W_Stop;\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_1e_src = SIG_E_Clear;\n                    }\n                }\n            }\n        }\n    }   \n    // ---- END set_route_drawings() ----\n\n    /**\n     * set_switch_img()\n     * @summary Changes image sources for the switches, depending on switch status\n     * \n     * This function uses the data passed in through status from the CTC classes and \n     * shows if the switches are reversed or not on the screen, by changing the image\n     * source files, to the correct .png file respectivly\n     */\n    set_switch_img() {\n        // Set SW #1\n        // SW #1 Reversed\n        if (this.state.sw_21) {\n            this.state.sw_21_src = SW_U_E_R;\n        }\n        // SW #1 Normal\n        else {\n            this.state.sw_21_src = SW_U_E;\n        }\n    }\n    // ---- END set_switch_img() ----\n\n    /**\n     * @summary Function to reset the signal images and track colors\n     * \n     * This function is need, because if the player was to remove a route,\n     * or when the train clears the interlocking nothing will clear the route\n     * the is displaying on the screen, even if it's gone in the backend\n     */\n    reset_drawings() {\n        this.state.sig_2w_src = SIG_W;\n        this.state.sig_2ws_src = SIG_W;\n        this.state.sig_1e_src = SIG_E;\n        this.state.tail_w = Empty;\n        this.state.tail_1_e = Empty;\n        this.state.tail_2_e = Empty;\n    }\n    //---- END reset_drawings() ----\n}\n \n// Export the interlocking to be drawn on the screen\nexport default Sterling;"]},"metadata":{},"sourceType":"module"}