{"ast":null,"code":"import _classCallCheck from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/createClass\";/**\n * @file ctc_pa.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the CP PA Interlocking\n */ // Color Constants For Drawing Routes\nvar Empty='#999999';var Lined='#75fa4c';var Occupied='#eb3323';/**\n * Class is the Backend for the CP PA Interlocking This class is what controlls the CP PA Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * \n * @member sig_2w1 -> Bool if Signal #2w-1 is Lined or Not\n * @member sig_2w2 -> Bool if Signal #2w-2 is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_w_trk_3 = The west bound route for track #3\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member routed_trk_1 = Bool if track #1 is routed or not\n * @member routed_trk_2 = Bool if track #2 is routed or not\n * @member trk_1_time = The time track #1 was occupied, used to know when to clear the route\n * @member trk_2_time = The time track #2 was occupied, used to know when to clear the route\n * @member trk_1_occupied = Bool if track #1 is occupied or not\n * @member trk_2_occupied = Bool if track #2 is occupied or not\n */var CTC_PA=/*#__PURE__*/function(){/**\n     * constructor()\n     * @summary The constructor for the CTC_PA class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */function CTC_PA(){_classCallCheck(this,CTC_PA);// Bools for the switches\nthis.sw_1=false;this.sw_3=false;// Bools for the signals\nthis.sig_2w_1=false;this.sig_2w_2=false;this.sig_4w=false;this.sig_2e=false;this.sig_4e=false;// Track routes\nthis.route_w_trk_1=null;this.route_w_trk_2=null;this.route_w_trk_3=null;this.route_e_trk_1=null;this.route_e_trk_2=null;// Used for routing and occupying the tracks \nthis.routed_trk_1=null;this.routed_trk_2=null;this.trk_1_time=null;this.trk_2_time=null;}// ---- END constructor() ----\n/**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */_createClass(CTC_PA,[{key:\"get_train_route\",value:function get_train_route(direction,track){if(direction===\"WEST\"){if(track===\"1\"){return this.route_w_trk_1;}else if(track===\"2\"){return this.route_w_trk_2;}else if(track===\"3\"){return this.route_w_trk_3;}else{return this.route_w_trk_4;}}else{if(track===\"1\"){return this.route_e_trk_1;}else if(track===\"2\"){return this.route_e_trk_2;}else{return this.route_e_trk_3;}}}// ---- END get_train_route() ----\n/**\n     * click_sig_2w1()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */},{key:\"click_sig_2w_1\",value:function click_sig_2w_1(next_block_1,next_block_2,next_block_4){if(this.sw_1){return;}else if(!this.sw_3){if(this.sig_2w_1){this.route_w_trk_1=null;this.routed_trk_1=false;this.sig_2w_1=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_w_trk_1=\"W_1_1__|__1_sparrow_pa\";this.routed_trk_1=true;this.sig_2w_1=true;}}else if(this.sw_3){if(this.sig_2w_1){this.route_w_trk_1=null;this.routed_trk_1=false;this.sig_2w_1=false;}else{if(next_block_2===Occupied||next_block_2===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_w_trk_1=\"W_1_2__|__2_sparrow_pa\";this.routed_trk_1=true;this.sig_2w_1=true;}}}// ---- END click_sig_2w1() ----\n/**\n     * click_sig_2w2()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */},{key:\"click_sig_2w_2\",value:function click_sig_2w_2(next_block_1,next_block_2,next_block_4){if(!this.sw_1){return;}else if(!this.sw_3){if(this.sig_2w_2){this.route_w_trk_3=null;this.routed_trk_1=false;this.sig_2w_2=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_w_trk_3=\"W_3_1__|__1_sparrow_pa\";this.routed_trk_1=true;this.sig_2w_2=true;}}else if(this.sw_3){if(this.sig_2w_2){this.route_w_trk_3=null;this.routed_trk_1=false;this.sig_2w_2=false;}else{if(next_block_2===Occupied||next_block_2===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_w_trk_3=\"W_3_2__|__2_sparrow_pa\";this.routed_trk_1=true;this.sig_2w_2=true;}}}// ---- END click_sig_2w2() ----\n/**\n     * click_sig_4w()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */},{key:\"click_sig_4w\",value:function click_sig_4w(next_block_2,next_block_4){if(this.sw_3){return;}else{if(this.sig_4w){this.route_w_trk_2=null;this.routed_trk_2=false;this.sig_4w=false;}else{if(next_block_2===Occupied||next_block_2===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_w_trk_2=\"W_2_2__|__2_sparrow_pa\";this.routed_trk_2=true;this.sig_4w=true;}}}// ---- END click_sig_4w() ----\n/**\n     * click_sig_2e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_3, The next block on Track #3\n     */},{key:\"click_sig_2e\",value:function click_sig_2e(next_block_1,next_block_3){if(this.sw_3){return;}else if(!this.sw_1){if(this.sig_2e){this.route_e_trk_1=null;this.routed_trk_1=false;this.sig_2e=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_1=\"E_1_1__|__1_pa_port\";this.routed_trk_1=true;this.sig_2e=true;}}else{if(this.sig_2e){this.route_e_trk_1=null;this.routed_trk_1=false;this.sig_2e=false;}else{if(next_block_3===Occupied||next_block_3===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_1=\"E_1_3__|__0_portYard_west\";this.routed_trk_1=true;this.sig_2e=true;}}}// ---- END click_sig_2e() ----\n/**\n     * click_sig_4e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     */},{key:\"click_sig_4e\",value:function click_sig_4e(next_block_1,next_block_2,next_block_3){if(!this.sw_3){if(this.sig_4e){this.route_e_trk_2=null;this.routed_trk_2=false;this.sig_4e=false;}else{if(next_block_2===Occupied||next_block_2===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_2=\"E_2_2__|__2_pa_bc\";this.routed_trk_2=true;this.sig_4e=true;}}else if(this.sw_3&&!this.sw_1){if(this.sig_4e){this.route_e_trk_2=null;this.routed_trk_2=false;this.sig_4e=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_2=\"E_2_1__|__1_pa_port\";this.routed_trk_2=true;this.sig_4e=true;}}else if(this.sw_3&&this.sw_1){if(this.sig_4e){this.route_e_trk_2=null;this.routed_trk_2=false;this.sig_4e=false;}else{if(next_block_3===Occupied||next_block_3===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_2=\"E_2_3__|__0_portYard_west\";this.routed_trk_2=true;this.sig_4e=true;}}}// ---- END click_sig_4e() ----\n/**\n     * set_trk_1_occupied()\n     * @summary Sets track #1 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */},{key:\"set_trk_1_occupied\",value:function set_trk_1_occupied(n_state){if(n_state===true){this.trk_1_occupied=n_state;this.routed_trk_1=false;this.trk_1_time=new Date().getTime()/1000;}else{console.log(\"ERROR\");}}// ---- END set_trk_1_occupied() ----\n/**\n     * set_trk_2_occupied()\n     * @summary Sets track #2 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */},{key:\"set_trk_2_occupied\",value:function set_trk_2_occupied(n_state){if(n_state===true){this.trk_2_occupied=n_state;this.routed_trk_2=false;this.trk_2_time=new Date().getTime()/1000;}else{console.log(\"ERROR\");}}// ---- END set_trk_2_occupied() ----\n/**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */},{key:\"can_clear\",value:function can_clear(){// Get Current Time\nvar current_time=new Date().getTime()/1000;// Track #1\nif(current_time-this.trk_1_time>4&&current_time-this.trk_1_time<100000){this.sig_2w=false;this.sig_2e=false;this.route_w_trk_1=null;this.route_e_trk_1=null;this.routed_trk_1=false;this.trk_1_occupied=false;this.trk_1_time=null;}// Track #2\nif(current_time-this.trk_2_time>4&&current_time-this.trk_2_time<100000){this.sig_4w=false;this.sig_4e=false;this.route_w_trk_2=null;this.route_e_trk_2=null;this.routed_trk_2=false;this.trk_2_occupied=false;this.trk_2_time=null;}}// ---- END can_clear() ----\n/**\n     * throw_sw_1()\n     * @summary Funtion to throw switch #1 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */},{key:\"throw_sw_1\",value:function throw_sw_1(){if(this.sw_1===false){this.sw_1=true;}else{this.sw_1=false;}}// ---- END throw_sw_1() ----\n/**\n     * throw_sw_3()\n     * @summary Funtion to throw switch #3 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */},{key:\"throw_sw_3\",value:function throw_sw_3(){if(this.sw_3===false){this.sw_3=true;}else{this.sw_3=false;}}// ---- END throw_sw_3() ----\n/**\n     * throw_sw_5()\n     * @summary Funtion to throw switch #5 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */},{key:\"throw_sw_5\",value:function throw_sw_5(){if(this.sw_5===false){this.sw_5=true;}else{this.sw_5=false;}}// ---- END throw_sw_5() ----\n/**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */},{key:\"get_routes\",value:function get_routes(){var routes=[this.route_w_trk_1,this.route_w_trk_2,this.route_w_trk_3,this.route_e_trk_1,this.route_e_trk_2];return routes;}// ---- END get_routes() ----\n/**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */},{key:\"get_interlocking_status\",value:function get_interlocking_status(){var status={sw_1:this.sw_1,sw_3:this.sw_3,sw_5:this.sw_5,routes:this.get_routes(),routed_trk_1:this.routed_trk_1,routed_trk_2:this.routed_trk_2,occupied_trk_1:this.trk_1_occupied,occupied_trk_2:this.trk_2_occupied};return status;}// ---- END get_interlocking_status() ----\n}]);return CTC_PA;}();// This is required when using ReactJS\nexport default CTC_PA;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Interlockings/Southern_Tier/ctc_pa.js"],"names":["Empty","Lined","Occupied","CTC_PA","sw_1","sw_3","sig_2w_1","sig_2w_2","sig_4w","sig_2e","sig_4e","route_w_trk_1","route_w_trk_2","route_w_trk_3","route_e_trk_1","route_e_trk_2","routed_trk_1","routed_trk_2","trk_1_time","trk_2_time","direction","track","route_w_trk_4","route_e_trk_3","next_block_1","next_block_2","next_block_4","alert","next_block_3","n_state","trk_1_occupied","Date","getTime","console","log","trk_2_occupied","current_time","sig_2w","sw_5","routes","status","get_routes","occupied_trk_1","occupied_trk_2"],"mappings":"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","sourcesContent":["/**\n * @file ctc_pa.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the CP PA Interlocking\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n\n\n/**\n * Class is the Backend for the CP PA Interlocking This class is what controlls the CP PA Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the \n * interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * \n * @member sig_2w1 -> Bool if Signal #2w-1 is Lined or Not\n * @member sig_2w2 -> Bool if Signal #2w-2 is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_w_trk_3 = The west bound route for track #3\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member routed_trk_1 = Bool if track #1 is routed or not\n * @member routed_trk_2 = Bool if track #2 is routed or not\n * @member trk_1_time = The time track #1 was occupied, used to know when to clear the route\n * @member trk_2_time = The time track #2 was occupied, used to know when to clear the route\n * @member trk_1_occupied = Bool if track #1 is occupied or not\n * @member trk_2_occupied = Bool if track #2 is occupied or not\n */\nclass CTC_PA {\n    /**\n     * constructor()\n     * @summary The constructor for the CTC_PA class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */\n    constructor() {\n        // Bools for the switches\n        this.sw_1 = false;\n        this.sw_3 = false;\n        // Bools for the signals\n        this.sig_2w_1 = false;\n        this.sig_2w_2 = false;\n        this.sig_4w = false;\n        this.sig_2e = false;\n        this.sig_4e = false;\n        // Track routes\n        this.route_w_trk_1 = null;\n        this.route_w_trk_2 = null;\n        this.route_w_trk_3 = null;\n        this.route_e_trk_1 = null;\n        this.route_e_trk_2 = null;\n        // Used for routing and occupying the tracks \n        this.routed_trk_1 = null;\n        this.routed_trk_2 = null;\n        this.trk_1_time = null;\n        this.trk_2_time = null;\n    }\n    // ---- END constructor() ----\n\n    /**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */\n    get_train_route(direction, track) {\n        if (direction === \"WEST\") {\n            if (track === \"1\") {\n            \treturn this.route_w_trk_1;\n        \t}   \n        \telse if (track === \"2\") {\n        \t\treturn this.route_w_trk_2;\n            }\n            else if (track === \"3\") {\n        \t\treturn this.route_w_trk_3;\n            }\n            else {\n        \t\treturn this.route_w_trk_4;\n        \t}\n        }\n        else {\n        \tif (track === \"1\") {\n            \treturn this.route_e_trk_1;\n            }   \n            else if (track === \"2\") {\n        \t\treturn this.route_e_trk_2;\n            }\n        \telse {\n        \t\treturn this.route_e_trk_3;\n        \t}\n        }\n    }\n    // ---- END get_train_route() ----\n\n    /**\n     * click_sig_2w1()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig_2w_1(next_block_1, next_block_2, next_block_4) {\n        if (this.sw_1) {\n            return;\n        }\n        else if (!this.sw_3) {\n            if (this.sig_2w_1) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w_1 = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_1__|__1_sparrow_pa\";\n                this.routed_trk_1 = true;\n                this.sig_2w_1 = true;\n            }\n        }\n        else if (this.sw_3) {\n            if (this.sig_2w_1) {\n                this.route_w_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w_1 = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_1 = \"W_1_2__|__2_sparrow_pa\";\n                this.routed_trk_1 = true;\n                this.sig_2w_1 = true;\n            }\n        }\n    }\n    // ---- END click_sig_2w1() ----\n\n    /**\n     * click_sig_2w2()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig_2w_2(next_block_1, next_block_2, next_block_4) {\n        if (!this.sw_1) {\n            return;\n        }\n        else if (!this.sw_3) {\n            if (this.sig_2w_2) {\n                this.route_w_trk_3 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w_2 = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_3 = \"W_3_1__|__1_sparrow_pa\";\n                this.routed_trk_1 = true;\n                this.sig_2w_2 = true;\n            }\n        }\n        else if (this.sw_3) {\n            if (this.sig_2w_2) {\n                this.route_w_trk_3 = null;\n                this.routed_trk_1 = false;\n                this.sig_2w_2 = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_3 = \"W_3_2__|__2_sparrow_pa\";\n                this.routed_trk_1 = true;\n                this.sig_2w_2 = true;\n            }\n        }\n    }\n    // ---- END click_sig_2w2() ----\n\n    /**\n     * click_sig_4w()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig_4w(next_block_2, next_block_4) {\n        if (this.sw_3) {\n            return;\n        }\n        else {\n            if (this.sig_4w) {\n                this.route_w_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4w = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_w_trk_2 = \"W_2_2__|__2_sparrow_pa\";\n                this.routed_trk_2 = true;\n                this.sig_4w = true;\n            }\n        }\n    }\n    // ---- END click_sig_4w() ----\n\n    /**\n     * click_sig_2e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_3, The next block on Track #3\n     */\n    click_sig_2e(next_block_1, next_block_3) {\n        if (this.sw_3) {\n            return;\n        }\n        else if (!this.sw_1) {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_1__|__1_pa_port\";\n                this.routed_trk_1 = true;\n                this.sig_2e = true;\n            }\n        }\n        else {\n            if (this.sig_2e) {\n                this.route_e_trk_1 = null;\n                this.routed_trk_1 = false;\n                this.sig_2e = false;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_1 = \"E_1_3__|__0_portYard_west\";\n                this.routed_trk_1 = true;\n                this.sig_2e = true;\n            }\n        }\n    }\n    // ---- END click_sig_2e() ----\n\n    /**\n     * click_sig_4e()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     * @param next_block_3, The next block on Track #3\n     */\n    click_sig_4e(next_block_1, next_block_2, next_block_3) {\n        if (!this.sw_3) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n            }\n            else {\n                if (next_block_2 === Occupied || next_block_2 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_2__|__2_pa_bc\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n        else if (this.sw_3 && !this.sw_1) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n            }\n            else {\n                if (next_block_1 === Occupied || next_block_1 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_1__|__1_pa_port\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n        else if (this.sw_3 && this.sw_1) {\n            if (this.sig_4e) {\n                this.route_e_trk_2 = null;\n                this.routed_trk_2 = false;\n                this.sig_4e = false;\n            }\n            else {\n                if (next_block_3 === Occupied || next_block_3 === Lined) {\n                    alert(\"Cannot Line Route Because Conflict With Next Block\");\n                    return;\n                }\n                this.route_e_trk_2 = \"E_2_3__|__0_portYard_west\";\n                this.routed_trk_2 = true;\n                this.sig_4e = true;\n            }\n        }\n    }\n    // ---- END click_sig_4e() ----\n\n    /**\n     * set_trk_1_occupied()\n     * @summary Sets track #1 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_trk_1_occupied(n_state) {\n        if (n_state === true) {\n            this.trk_1_occupied = n_state;\n            this.routed_trk_1 = false;\n            this.trk_1_time = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_trk_1_occupied() ----\n\n    /**\n     * set_trk_2_occupied()\n     * @summary Sets track #2 as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_trk_2_occupied(n_state) {\n        if (n_state === true) {\n            this.trk_2_occupied = n_state;\n            this.routed_trk_2 = false;\n            this.trk_2_time = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_trk_2_occupied() ----\n\n    /**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */\n    can_clear() {\n        // Get Current Time\n        let current_time = new Date().getTime() / 1000;\n\n        // Track #1\n        if (current_time - this.trk_1_time > 4 && current_time - this.trk_1_time< 100000) {\n            this.sig_2w = false;\n            this.sig_2e = false;\n\n            this.route_w_trk_1 = null;\n            this.route_e_trk_1 = null;\n            this.routed_trk_1 = false;\n\n            this.trk_1_occupied = false;\n            this.trk_1_time = null;\n        }\n        // Track #2\n        if (current_time - this.trk_2_time > 4 && current_time - this.trk_2_time< 100000) {\n            this.sig_4w = false;\n            this.sig_4e = false;\n\n            this.route_w_trk_2 = null;\n            this.route_e_trk_2 = null;\n            this.routed_trk_2 = false;\n\n            this.trk_2_occupied = false;\n            this.trk_2_time = null;\n        }\n    }\n    // ---- END can_clear() ----\n\n    /**\n     * throw_sw_1()\n     * @summary Funtion to throw switch #1 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_1() {\n        if (this.sw_1 === false) {\n            this.sw_1 = true;\n        }\n        else {\n            this.sw_1 = false;\n        }\n    }\n    // ---- END throw_sw_1() ----\n\n    /**\n     * throw_sw_3()\n     * @summary Funtion to throw switch #3 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_3() {\n        if (this.sw_3 === false) {\n            this.sw_3 = true;\n        }\n        else {\n            this.sw_3 = false;\n        }\n    }\n    // ---- END throw_sw_3() ----\n\n    /**\n     * throw_sw_5()\n     * @summary Funtion to throw switch #5 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_5() {\n        if (this.sw_5 === false) {\n            this.sw_5 = true;\n        }\n        else {\n            this.sw_5 = false;\n        }\n    }\n    // ---- END throw_sw_5() ----\n    \n    /**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */\n    get_routes() {\n        let routes = [\n            this.route_w_trk_1, this.route_w_trk_2, this.route_w_trk_3,\n            this.route_e_trk_1, this.route_e_trk_2\n        ];\n\n        return routes;\n    }\n    // ---- END get_routes() ----\n\n    /**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */\n    get_interlocking_status() {\n        let status = {\n            sw_1: this.sw_1,\n            sw_3: this.sw_3,\n            sw_5: this.sw_5,\n            routes: this.get_routes(),\n            routed_trk_1: this.routed_trk_1,\n            routed_trk_2: this.routed_trk_2,\n            occupied_trk_1: this.trk_1_occupied,\n            occupied_trk_2: this.trk_2_occupied\n        }\n\n        return status;\n    }\n    // ---- END get_interlocking_status() ----\n}\n\n// This is required when using ReactJS\nexport default CTC_PA;"]},"metadata":{},"sourceType":"module"}