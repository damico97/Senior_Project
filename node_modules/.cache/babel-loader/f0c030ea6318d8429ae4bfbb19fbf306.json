{"ast":null,"code":"var _jsxFileName = \"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Southern_Tier_Line/Hall.jsx\";\n\n/**\n * @file Hall.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for Hall Interlocking\n *\n * Extends the React Component Class and is the UI part of the Hall Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\n// Import React Component\nimport React, { Component } from 'react'; // Import CSS style sheet\n\nimport '../../../css/Southern_Tier_Line/hall.css'; // Import Images\n// Switch Images\n\nimport CX_225 from '../../../images/CX_225.png';\nimport CX_225_Lined_Top from '../../../images/CX_225_Lined_Top.png';\nimport CX_225_Lined_Bottom from '../../../images/CX_225_Lined_Bottom.png';\nimport CX_225_Lined_Both from '../../../images/CX_225_Lined_Both.png';\nimport CX_225_R from '../../../images/CX_225_R.png';\nimport CX_225_R_Lined from '../../../images/CX_225_R_Lined.png';\nimport CX_225_Lined_Top_Occupied_Bottom from '../../../images/CX_225_Lined_Top_Occupied_Bottom.png';\nimport CX_225_Occupied_Top_Lined_Bottom from '../../../images/CX_225_Occupied_Top_Lined_Bottom.png';\nimport CX_225_Occupied_Top from '../../../images/CX_225_Occupied_Top.png';\nimport CX_225_Occupied_Bottom from '../../../images/CX_225_Occupied_Bottom.png';\nimport CX_225_Occupied_Both from '../../../images/CX_225_Occupied_Both.png';\nimport CX_225_R_Occupied from '../../../images/CX_225_R_Occupied.png'; // Signal Images\n\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png'; // Color Constants For Drawing Routes\n\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n/**\n * The React JSX Component Class for the Hall Interlocking\n * \n * This class is a JSX React Component for the Hall Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\n\nclass Hall extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Switch Status\n      sw_1: this.props.status.sw_1,\n      // Image File for the switch - Will change depending on route\n      sw_1_src: CX_225,\n      // Colors for tail tracks - Will change depending on route\n      tail_yard: Empty,\n      tail_west: Empty,\n      tail_2_east: Empty,\n      tail_1_east: Empty,\n      // Image File for the signals - Will change depending on route\n      sig_2w_src: SIG_W,\n      sig_4w_src: SIG_W,\n      sig_2e_src: SIG_E,\n      sig_4e_src: SIG_E,\n      // Information For Interlocking Routes\n      occupied_1: this.props.status.occupied_trk_1,\n      occupied_2: this.props.status.occupied_trk_2,\n      route_1: this.props.status.routed_trk_1,\n      route_2: this.props.status.routed_trk_2,\n      routes: this.props.status.routes\n    };\n  }\n\n  /**\n   * componentWillReceiveProps()\n   * @summary Function that updates the state of the component\n   * \n   * The data that is being changed is passed down from the CTC classes in the simulation backend\n   * \n   * @param nextProps, the new data to set the component state too\n   */\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      sw_1: nextProps.status.sw_1,\n      occupied_1: nextProps.status.occupied_trk_1,\n      occupied_2: nextProps.status.occupied_trk_2,\n      route_1: nextProps.status.routed_trk_1,\n      route_2: nextProps.status.routed_trk_2,\n      routes: nextProps.status.routes\n    });\n  } // ---- END componentWillReceiveProps() ----\n\n  /**\n   * render()\n   * @summary standard React function that draws the interlocking to the screen\n   */\n\n\n  render() {\n    // Clear all the drawings from the interlocking so if a train clears the route is gone\n    this.reset_drawings(); // Set the switch images based off the state of each crossover\n\n    this.set_switch_img(); // Draw all the current routes in the interlocking\n\n    this.set_route_drawings(); // Returns the HTML to draw the interlocking and it's current state to the screen\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"hall_title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"CP HALL\"), React.createElement(\"div\", {\n      className: \"hall_milepost\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"MP 64.7JS\"), React.createElement(\"div\", {\n      className: \"hall_yard\",\n      style: {\n        background: this.state.tail_yard\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"hall_west\",\n      style: {\n        background: this.state.tail_west\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"hall_SW_1\",\n      onClick: this.props.throw_sw_1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sw_1_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"hall_2_east\",\n      style: {\n        background: this.state.tail_2_east\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"hall_1_east\",\n      style: {\n        background: this.state.tail_1_east\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"hall_sig_4w\",\n      onClick: this.props.click_sig_4w,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_4w_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"hall_sig_2w\",\n      onClick: this.props.click_sig_2w,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_2w_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"hall_sig_4e\",\n      onClick: this.props.click_sig_4e,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_4e_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"hall_sig_2e\",\n      onClick: this.props.click_sig_2e,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.sig_2e_src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })));\n  } // ---- END render() ----\n\n  /**\n   * @summary Sets the drawing for the route through the interlocking\n   * \n   * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n   * will change depending on if the interlocking is occupied or not\n   */\n\n\n  set_route_drawings() {\n    let color_1 = Empty;\n    let color_2 = Empty; // Setting the color of the tracks depending on if the interlocking in occupied or not\n\n    if (this.state.route_1) {\n      color_1 = Green;\n    }\n\n    if (this.state.route_2) {\n      color_2 = Green;\n    }\n\n    if (this.state.occupied_1) {\n      color_1 = Red;\n    }\n\n    if (this.state.occupied_2) {\n      color_2 = Red;\n    } // Loop through all the routes\n\n\n    for (let i = 0; i < this.state.routes.length; i++) {\n      if (this.state.routes[i] === \"W_1_1__|__1_howells_hall\" || this.state.routes[i] === \"E_1_1__|__1_hall_hudson\") {\n        // Tail Tracks\n        this.state.tail_1_east = color_1;\n        this.state.tail_west = color_1; // The Route Is Occupied\n\n        if (this.state.occupied_1) {\n          // Switches\n          // Crossovers that could change based off of Track #2\n          // Track #2 Routed\n          if (this.state.route_2) {\n            this.state.sw_1_src = CX_225_Lined_Top_Occupied_Bottom;\n          } // Track #2 Occupied\n          else if (this.state.occupied_2) {\n              this.state.sw_1_src = CX_225_Occupied_Both;\n            } // Nothing Track #2\n            else {\n                this.state.sw_1_src = CX_225_Occupied_Bottom;\n              } // Signals\n\n\n          this.state.sig_2w_src = SIG_W_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switches\n            // Crossovers that could change based off of Track #2\n            // Track #2 Routed\n            if (this.state.route_2) {\n              this.state.sw_1_src = CX_225_Lined_Both;\n            } // Track #2 Occupied\n            else if (this.state.occupied_2) {\n                this.state.sw_1_src = CX_225_Occupied_Top_Lined_Bottom;\n              } // Nothing Track #2\n              else {\n                  this.state.sw_1_src = CX_225_Lined_Bottom;\n                } // Signals\n            // West Bound Signals\n\n\n            if (this.state.routes[i] === \"W_1_1__|__1_howells_hall\") {\n              this.state.sig_2w_src = SIG_W_Clear;\n              this.state.sig_2e_src = SIG_E_Stop;\n            } // East Bound Signals\n            else {\n                this.state.sig_2w_src = SIG_W_Stop;\n                this.state.sig_2e_src = SIG_E_Clear;\n              }\n          }\n      } else if (this.state.routes[i] === \"W_2_2__|__2_yard_hall\" || this.state.routes[i] === \"E_2_2__|__2_hall_hudson\") {\n        // Tail Tracks\n        this.state.tail_2_east = color_2;\n        this.state.tail_yard = color_2; // The Route Is Occupied\n\n        if (this.state.occupied_2) {\n          // Switches\n          // Crossovers that could change based off of Track #1\n          // Track #1 Routed\n          if (this.state.route_1) {\n            this.state.sw_1_src = CX_225_Occupied_Top_Lined_Bottom;\n          } // Track #1 Occupied\n          else if (this.state.occupied_1) {\n              this.state.sw_1_src = CX_225_Occupied_Both;\n            } // Nothing Track #1\n            else {\n                this.state.sw_1_src = CX_225_Occupied_Top;\n              } // Signals\n\n\n          this.state.sig_4w_src = SIG_W_Stop;\n          this.state.sig_4e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switches\n            // Crossovers that could change based off of Track #1\n            // Track #1 Routed\n            if (this.state.route_1) {\n              this.state.sw_1_src = CX_225_Lined_Both;\n            } // Track #1 Occupied\n            else if (this.state.occupied_1) {\n                this.state.sw_1_src = CX_225_Lined_Top_Occupied_Bottom;\n              } // Nothing Track #1\n              else {\n                  this.state.sw_1_src = CX_225_Lined_Top;\n                } // Signals\n            // West Bound Signals\n\n\n            if (this.state.routes[i] === \"W_2_2__|__2_yard_hall\") {\n              this.state.sig_4w_src = SIG_W_Clear;\n              this.state.sig_4e_src = SIG_E_Stop;\n            } // East Bound Signals\n            else {\n                this.state.sig_4w_src = SIG_W_Stop;\n                this.state.sig_4e_src = SIG_E_Clear;\n              }\n          }\n      } else if (this.state.routes[i] === \"W_2_1__|__1_howells_hall\") {\n        // Tail Tracks\n        this.state.tail_2_east = color_2;\n        this.state.tail_west = color_2; // The Route Is Occupied\n\n        if (this.state.occupied_2) {\n          // Switches\n          this.state.sw_1_src = CX_225_R_Occupied; // Signals\n\n          this.state.sig_2w_src = SIG_W_Stop;\n          this.state.sig_4w_src = SIG_W_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n          this.state.sig_4e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switches\n            this.state.sw_1_src = CX_225_R_Lined; // Signals\n\n            this.state.sig_2w_src = SIG_W_Stop;\n            this.state.sig_4w_src = SIG_W_Clear;\n            this.state.sig_2e_src = SIG_E_Stop;\n            this.state.sig_4e_src = SIG_E_Stop;\n          }\n      } else if (this.state.routes[i] === \"E_1_2__|__2_hall_hudson\") {\n        // Tail Tracks\n        this.state.tail_2_east = color_1;\n        this.state.tail_west = color_1; // The Route Is Occupied\n\n        if (this.state.occupied_1) {\n          // Switches\n          this.state.sw_1_src = CX_225_R_Occupied; // Signals\n\n          this.state.sig_2w_src = SIG_W_Stop;\n          this.state.sig_4w_src = SIG_W_Stop;\n          this.state.sig_2e_src = SIG_E_Stop;\n          this.state.sig_4e_src = SIG_E_Stop;\n        } // The Route Is NOT Occupied\n        else {\n            // Switches\n            this.state.sw_1_src = CX_225_R_Lined; // Signals\n\n            this.state.sig_2w_src = SIG_W_Stop;\n            this.state.sig_4w_src = SIG_W_Stop;\n            this.state.sig_2e_src = SIG_E_Clear;\n            this.state.sig_4e_src = SIG_E_Stop;\n          }\n      }\n    }\n  } // ---- END set_route_drawings() ----\n\n  /**\n   * set_switch_img()\n   * @summary Changes image sources for the switches, depending on switch status\n   * \n   * This function uses the data passed in through status from the CTC classes and \n   * shows if the switches are reversed or not on the screen, by changing the image\n   * source files, to the correct .png file respectivly\n   */\n\n\n  set_switch_img() {\n    if (this.state.sw_1) {\n      this.state.sw_1_src = CX_225_R;\n    } else {\n      this.state.sw_1_src = CX_225;\n    }\n  } // ---- END set_switch_img() ----\n\n  /**\n   * @summary Function to reset the signal images and track colors\n   * \n   * This function is need, because if the player was to remove a route,\n   * or when the train clears the interlocking nothing will clear the route\n   * the is displaying on the screen, even if it's gone in the backend\n   */\n\n\n  reset_drawings() {\n    this.state.tail_1_east = Empty;\n    this.state.tail_2_east = Empty;\n    this.state.tail_west = Empty;\n    this.state.tail_yard = Empty;\n    this.state.sig_2w_src = SIG_W;\n    this.state.sig_4w_src = SIG_W;\n    this.state.sig_2e_src = SIG_E;\n    this.state.sig_4e_src = SIG_E;\n  } //---- END reset_drawings() ----\n\n\n} // Export the interlocking to be drawn on the screen\n\n\nexport default Hall;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/components/Panel/Southern_Tier_Line/Hall.jsx"],"names":["React","Component","CX_225","CX_225_Lined_Top","CX_225_Lined_Bottom","CX_225_Lined_Both","CX_225_R","CX_225_R_Lined","CX_225_Lined_Top_Occupied_Bottom","CX_225_Occupied_Top_Lined_Bottom","CX_225_Occupied_Top","CX_225_Occupied_Bottom","CX_225_Occupied_Both","CX_225_R_Occupied","SIG_W","SIG_W_Clear","SIG_W_Stop","SIG_E","SIG_E_Clear","SIG_E_Stop","Empty","Green","Red","Hall","state","sw_1","props","status","sw_1_src","tail_yard","tail_west","tail_2_east","tail_1_east","sig_2w_src","sig_4w_src","sig_2e_src","sig_4e_src","occupied_1","occupied_trk_1","occupied_2","occupied_trk_2","route_1","routed_trk_1","route_2","routed_trk_2","routes","componentWillReceiveProps","nextProps","setState","render","reset_drawings","set_switch_img","set_route_drawings","background","throw_sw_1","click_sig_4w","click_sig_2w","click_sig_4e","click_sig_2e","color_1","color_2","i","length"],"mappings":"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","sourcesContent":["/**\n * @file Hall.jsx\n * @author Joey Damico\n * @date September 25, 2019\n * @summary React JSX Component Class that is for Hall Interlocking\n *\n * Extends the React Component Class and is the UI part of the Hall Interlocking,\n * this class controls all the drawings of routes, and also gives a visual reprenstation\n * of that status of the interlocking\n */\n\n// Import React Component\nimport React, { Component } from 'react';\n// Import CSS style sheet\nimport '../../../css/Southern_Tier_Line/hall.css';\n\n// Import Images\n// Switch Images\nimport CX_225 from '../../../images/CX_225.png';\nimport CX_225_Lined_Top from '../../../images/CX_225_Lined_Top.png';\nimport CX_225_Lined_Bottom from '../../../images/CX_225_Lined_Bottom.png';\nimport CX_225_Lined_Both from '../../../images/CX_225_Lined_Both.png';\nimport CX_225_R from '../../../images/CX_225_R.png';\nimport CX_225_R_Lined from '../../../images/CX_225_R_Lined.png';\nimport CX_225_Lined_Top_Occupied_Bottom from '../../../images/CX_225_Lined_Top_Occupied_Bottom.png';\nimport CX_225_Occupied_Top_Lined_Bottom from '../../../images/CX_225_Occupied_Top_Lined_Bottom.png';\nimport CX_225_Occupied_Top from '../../../images/CX_225_Occupied_Top.png';\nimport CX_225_Occupied_Bottom from '../../../images/CX_225_Occupied_Bottom.png';\nimport CX_225_Occupied_Both from '../../../images/CX_225_Occupied_Both.png';\nimport CX_225_R_Occupied from '../../../images/CX_225_R_Occupied.png';\n\n// Signal Images\nimport SIG_W from '../../../images/SIG_W.png';\nimport SIG_W_Clear from '../../../images/SIG_W_Clear.png';\nimport SIG_W_Stop from '../../../images/SIG_W_Stop.png';\nimport SIG_E from '../../../images/SIG_E.png';\nimport SIG_E_Clear from '../../../images/SIG_E_Clear.png';\nimport SIG_E_Stop from '../../../images/SIG_E_Stop.png';\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Green = '#75fa4c';\nconst Red = '#eb3323';\n\n\n/**\n * The React JSX Component Class for the Hall Interlocking\n * \n * This class is a JSX React Component for the Hall Interlocking, this will control all the UI for the comonent,\n * and the click events that will pass reference between the backend and the user. This also controls drawing the \n * route drawings to show if a route(s) is setup in the interlocking or if the route is occupied\n */\nclass Hall extends Component {\n    /**\n     * State\n     * @summary Object that holds the state or status information for the component\n     * \n     * This object holds all the information for the interlocking that is required to display the routes \n     * correctly\n     * \n     * Anything that has \"this.props.\" is passed down from the CTC interlocking class\n     */\n    state = {  \n        // Switch Status\n        sw_1: this.props.status.sw_1,\n        // Image File for the switch - Will change depending on route\n        sw_1_src: CX_225,\n        // Colors for tail tracks - Will change depending on route\n        tail_yard: Empty,\n        tail_west: Empty,\n        tail_2_east: Empty,\n        tail_1_east: Empty,\n        // Image File for the signals - Will change depending on route\n        sig_2w_src: SIG_W,\n        sig_4w_src: SIG_W,\n        sig_2e_src: SIG_E,\n        sig_4e_src: SIG_E,\n        // Information For Interlocking Routes\n        occupied_1: this.props.status.occupied_trk_1,\n        occupied_2: this.props.status.occupied_trk_2,\n        route_1: this.props.status.routed_trk_1,\n        route_2: this.props.status.routed_trk_2,\n        routes: this.props.status.routes\n    };\n\n    /**\n     * componentWillReceiveProps()\n     * @summary Function that updates the state of the component\n     * \n     * The data that is being changed is passed down from the CTC classes in the simulation backend\n     * \n     * @param nextProps, the new data to set the component state too\n     */\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            sw_1: nextProps.status.sw_1,\n            occupied_1: nextProps.status.occupied_trk_1,\n            occupied_2: nextProps.status.occupied_trk_2,\n            route_1: nextProps.status.routed_trk_1,\n            route_2: nextProps.status.routed_trk_2,\n            routes: nextProps.status.routes\n        });\n    }\n    // ---- END componentWillReceiveProps() ----\n\n    /**\n     * render()\n     * @summary standard React function that draws the interlocking to the screen\n     */\n    render() { \n        // Clear all the drawings from the interlocking so if a train clears the route is gone\n        this.reset_drawings();\n        // Set the switch images based off the state of each crossover\n        this.set_switch_img();\n        // Draw all the current routes in the interlocking\n        this.set_route_drawings();\n\n        // Returns the HTML to draw the interlocking and it's current state to the screen\n        return (  \n            <div>\n                {/* Tags */}\n                <div className=\"hall_title\">CP HALL</div>\n                <div className=\"hall_milepost\">MP 64.7JS</div>\n                {/* West Side Tail Tracks */}\n                <div className=\"hall_yard\" style={{background: this.state.tail_yard}}></div>\n                <div className=\"hall_west\" style={{background: this.state.tail_west}}></div>\n                {/* Switches */}\n                <div className=\"hall_SW_1\" onClick={this.props.throw_sw_1}><img src={this.state.sw_1_src}/></div>\n                {/* East Side Tail Tracks */}\n                <div className=\"hall_2_east\" style={{background: this.state.tail_2_east}}></div>\n                <div className=\"hall_1_east\" style={{background: this.state.tail_1_east}}></div>\n                {/* Signals */}\n                <div className=\"hall_sig_4w\" onClick={this.props.click_sig_4w}><img src={this.state.sig_4w_src}/></div>\n                <div className=\"hall_sig_2w\" onClick={this.props.click_sig_2w}><img src={this.state.sig_2w_src}/></div>\n                <div className=\"hall_sig_4e\" onClick={this.props.click_sig_4e}><img src={this.state.sig_4e_src}/></div>\n                <div className=\"hall_sig_2e\" onClick={this.props.click_sig_2e}><img src={this.state.sig_2e_src}/></div>\n            </div>\n        );\n    }\n    // ---- END render() ----\n\n    /**\n     * @summary Sets the drawing for the route through the interlocking\n     * \n     * Function takes what routes are currently set in the Interlocking class and displays that route in the UI, the drawing\n     * will change depending on if the interlocking is occupied or not\n     */\n    set_route_drawings() {\n        let color_1 = Empty;\n        let color_2 = Empty;\n\n        // Setting the color of the tracks depending on if the interlocking in occupied or not\n        if (this.state.route_1) {\n            color_1 = Green;\n        }\n        if (this.state.route_2) {\n            color_2 = Green;\n        }\n        if (this.state.occupied_1) {\n            color_1 = Red;\n        }\n        if (this.state.occupied_2) {\n            color_2 = Red;\n        }\n\n        // Loop through all the routes\n        for (let i = 0; i < this.state.routes.length; i++) {\n            if (this.state.routes[i] === \"W_1_1__|__1_howells_hall\" || this.state.routes[i] === \"E_1_1__|__1_hall_hudson\") {\n                // Tail Tracks\n                this.state.tail_1_east = color_1;\n                this.state.tail_west = color_1;\n                \n                // The Route Is Occupied\n                if (this.state.occupied_1) {\n                    // Switches\n                    // Crossovers that could change based off of Track #2\n                    // Track #2 Routed\n                    if (this.state.route_2) {\n                        this.state.sw_1_src = CX_225_Lined_Top_Occupied_Bottom;\n                    }\n                    // Track #2 Occupied\n                    else if (this.state.occupied_2) {\n                        this.state.sw_1_src = CX_225_Occupied_Both;\n                    }\n                    // Nothing Track #2\n                    else {\n                        this.state.sw_1_src = CX_225_Occupied_Bottom;\n                    }\n\n                    // Signals\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switches\n                    // Crossovers that could change based off of Track #2\n                    // Track #2 Routed\n                    if (this.state.route_2) {\n                        this.state.sw_1_src = CX_225_Lined_Both;\n                    }\n                    // Track #2 Occupied\n                    else if (this.state.occupied_2) {\n                        this.state.sw_1_src = CX_225_Occupied_Top_Lined_Bottom;\n                    }\n                    // Nothing Track #2\n                    else {\n                        this.state.sw_1_src = CX_225_Lined_Bottom;\n                    }\n\n                    // Signals\n                    // West Bound Signals\n                    if (this.state.routes[i] === \"W_1_1__|__1_howells_hall\") {\n                        this.state.sig_2w_src = SIG_W_Clear;\n                        this.state.sig_2e_src = SIG_E_Stop;\n                    }\n                    // East Bound Signals\n                    else {\n                        this.state.sig_2w_src = SIG_W_Stop;\n                        this.state.sig_2e_src = SIG_E_Clear;\n                    }\n                }\n            }\n            else if (this.state.routes[i] === \"W_2_2__|__2_yard_hall\" || this.state.routes[i] === \"E_2_2__|__2_hall_hudson\") {\n                // Tail Tracks\n                this.state.tail_2_east = color_2;\n                this.state.tail_yard = color_2;\n                \n                // The Route Is Occupied\n                if (this.state.occupied_2) {\n                    // Switches\n                    // Crossovers that could change based off of Track #1\n                    // Track #1 Routed\n                    if (this.state.route_1) {\n                        this.state.sw_1_src = CX_225_Occupied_Top_Lined_Bottom;\n                    }\n                    // Track #1 Occupied\n                    else if (this.state.occupied_1) {\n                        this.state.sw_1_src = CX_225_Occupied_Both;\n                    }\n                    // Nothing Track #1\n                    else {\n                        this.state.sw_1_src = CX_225_Occupied_Top;\n                    }\n\n                    // Signals\n                    this.state.sig_4w_src = SIG_W_Stop;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switches\n                    // Crossovers that could change based off of Track #1\n                    // Track #1 Routed\n                    if (this.state.route_1) {\n                        this.state.sw_1_src = CX_225_Lined_Both;\n                    }\n                    // Track #1 Occupied\n                    else if (this.state.occupied_1) {\n                        this.state.sw_1_src = CX_225_Lined_Top_Occupied_Bottom;\n                    }\n                    // Nothing Track #1\n                    else {\n                        this.state.sw_1_src = CX_225_Lined_Top;\n                    }\n\n                    // Signals\n                    // West Bound Signals\n                    if (this.state.routes[i] === \"W_2_2__|__2_yard_hall\") {\n                        this.state.sig_4w_src = SIG_W_Clear;\n                        this.state.sig_4e_src = SIG_E_Stop;\n                    }\n                    // East Bound Signals\n                    else {\n                        this.state.sig_4w_src = SIG_W_Stop;\n                        this.state.sig_4e_src = SIG_E_Clear;\n                    }\n                }\n            }\n            else if (this.state.routes[i] === \"W_2_1__|__1_howells_hall\") {\n                // Tail Tracks\n                this.state.tail_2_east = color_2;\n                this.state.tail_west = color_2;\n\n                // The Route Is Occupied\n                if (this.state.occupied_2) {\n                    // Switches\n                    this.state.sw_1_src = CX_225_R_Occupied;\n\n                    // Signals\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_4w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switches\n                    this.state.sw_1_src = CX_225_R_Lined;\n\n                    // Signals\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_4w_src = SIG_W_Clear;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n            }\n            else if (this.state.routes[i] === \"E_1_2__|__2_hall_hudson\") {\n                // Tail Tracks\n                this.state.tail_2_east = color_1;\n                this.state.tail_west = color_1;\n\n                // The Route Is Occupied\n                if (this.state.occupied_1) {\n                    // Switches\n                    this.state.sw_1_src = CX_225_R_Occupied;\n\n                    // Signals\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_4w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Stop;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n                // The Route Is NOT Occupied\n                else {\n                    // Switches\n                    this.state.sw_1_src = CX_225_R_Lined;\n\n                    // Signals\n                    this.state.sig_2w_src = SIG_W_Stop;\n                    this.state.sig_4w_src = SIG_W_Stop;\n                    this.state.sig_2e_src = SIG_E_Clear;\n                    this.state.sig_4e_src = SIG_E_Stop;\n                }\n            }\n        }\n    }\n    // ---- END set_route_drawings() ----\n\n    /**\n     * set_switch_img()\n     * @summary Changes image sources for the switches, depending on switch status\n     * \n     * This function uses the data passed in through status from the CTC classes and \n     * shows if the switches are reversed or not on the screen, by changing the image\n     * source files, to the correct .png file respectivly\n     */\n    set_switch_img() {\n        if (this.state.sw_1) {\n            this.state.sw_1_src = CX_225_R;\n        }\n        else {\n            this.state.sw_1_src = CX_225;\n        }\n    }\n    // ---- END set_switch_img() ----\n\n    /**\n     * @summary Function to reset the signal images and track colors\n     * \n     * This function is need, because if the player was to remove a route,\n     * or when the train clears the interlocking nothing will clear the route\n     * the is displaying on the screen, even if it's gone in the backend\n     */\n    reset_drawings() {\n        this.state.tail_1_east = Empty;\n        this.state.tail_2_east = Empty;\n        this.state.tail_west = Empty;\n        this.state.tail_yard = Empty;\n\n        this.state.sig_2w_src = SIG_W;\n        this.state.sig_4w_src = SIG_W;\n        this.state.sig_2e_src = SIG_E;\n        this.state.sig_4e_src = SIG_E;\n    }\n    //---- END reset_drawings() ----\n}\n \n// Export the interlocking to be drawn on the screen\nexport default Hall;"]},"metadata":{},"sourceType":"module"}