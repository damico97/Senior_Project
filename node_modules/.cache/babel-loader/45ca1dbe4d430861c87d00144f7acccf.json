{"ast":null,"code":"/**\n * @file ctc_westSecaucus.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the West Secacus Interlocking\n */\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n/**\n * Class is the Backend for the West Secacus Interlocking This class is what controlls the West Secacus Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * \n * @member sig_2w -> Bool if Signal #2w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member time_occupied = The time the track was occupied, used to know when to clear the route\n * @member int_occupied = Bool if the track is occupied or not\n */\n\nclass CTC_WestSecaucus {\n  /**\n   * constructor()\n   * @summary The constructor for the CTC_WestSecaucus class\n   * \n   * @description This will initialize all the member variables when the program is started\n   */\n  constructor() {\n    // Bools for the switches\n    this.sw_1 = false;\n    this.sw_3 = false; // Bools for the signals\n\n    this.sig_2w = false;\n    this.sig_2e = false;\n    this.sig_4w = false;\n    this.sig_4e = false; // Track routes\n\n    this.route_w_trk_1 = null;\n    this.route_w_trk_2 = null;\n    this.route_e_trk_1 = null;\n    this.route_e_trk_2 = null; // Used for routing and occupying the tracks \n\n    this.int_occupied = false;\n    this.time_occupied = null;\n  } // ---- END constructor() ----\n\n  /**\n   * click_sig()\n   * @summary the function that is called when clicking the signal, creates a route\n   * \n   * @description When the function is called it will determine if a route can be created, \n   * and if so what the route is and sets it based off of the switch status\n   * \n   * @param sigNum, the id of the signal clicked\n   * @param next_block_1, The next block on Track #1\n   * @param next_block_2, The next block on Track #2\n   */\n\n\n  click_sig(sigNum, next_block_1, next_block_2) {\n    if (sigNum === \"2W\") {\n      if (this.sw_3) {\n        return;\n      } // Route W_1_1\n      else if (!this.sw_1 && !this.sw_3) {\n          if (this.sig_2w) {\n            this.route_w_trk_1 = null;\n            this.sig_2w = false;\n          } else {\n            if (next_block_1 === Occupied || next_block_1 === Lined) {\n              alert(\"Cannot Line Route Because Conflict With Next Block\");\n              return;\n            }\n\n            this.route_w_trk_1 = \"W_1_1__|__1_mill_westSecaucus\";\n            this.sig_2w = true;\n          }\n        } // Route W_1_2\n        else if (this.sw_1 && !this.sw_3) {\n            if (this.sig_2w) {\n              this.route_w_trk_1 = null;\n              this.sig_2w = false;\n            } else {\n              if (next_block_2 === Occupied || next_block_2 === Lined) {\n                return;\n              }\n\n              this.route_w_trk_1 = \"W_1_2__|__2_mill_westSecaucus\";\n              this.sig_2w = true;\n            }\n          }\n    } else if (sigNum === \"4W\") {\n      if (!this.sw_3) {\n        return;\n      } // Route W_2_1\n\n\n      if (!this.sw_1 && this.sw_3) {\n        if (this.sig_4w) {\n          this.route_w_trk_2 = null;\n          this.sig_4w = false;\n        } else {\n          if (next_block_1 === Occupied || next_block_1 === Lined) {\n            alert(\"Cannot Line Route Because Conflict With Next Block\");\n            return;\n          }\n\n          this.route_w_trk_2 = \"W_2_1__|__1_mill_westSecaucus\";\n          this.sig_4w = true;\n        }\n      } // Route W_2_2\n      else if (this.sw_1 && this.sw_3) {\n          if (this.sig_4w) {\n            this.route_w_trk_2 = null;\n            this.sig_4w = false;\n          } else {\n            if (next_block_2 === Occupied || next_block_2 === Lined) {\n              alert(\"Cannot Line Route Because Conflict With Next Block\");\n              return;\n            }\n\n            this.route_w_trk_2 = \"W_2_2__|__2_mill_westSecaucus\";\n            this.sig_4w = true;\n          }\n        }\n    } else if (sigNum === \"2E\") {\n      if (this.sw_1) {\n        return;\n      } // Route E_1_1\n      else if (!this.sw_1 && !this.sw_3) {\n          if (this.sig_2e) {\n            this.route_e_trk_1 = null;\n            this.sig_2e = false;\n          } else {\n            if (next_block_1 === Occupied || next_block_1 === Lined) {\n              alert(\"Cannot Line Route Because Conflict With Next Block\");\n              return;\n            }\n\n            this.route_e_trk_1 = \"E_1_1__|__2_westSecaucus_laurel\";\n            this.sig_2e = true;\n          }\n        } // Route E_1_2\n        else if (!this.sw_1 && this.sw_3) {\n            if (this.sig_2e) {\n              this.route_e_trk_1 = null;\n              this.sig_2e = false;\n            } else {\n              if (next_block_2 === Occupied || next_block_2 === Lined) {\n                alert(\"Cannot Line Route Because Conflict With Next Block\");\n                return;\n              }\n\n              this.route_e_trk_1 = \"E_1_2__|__4_westSecaucus_laurel\";\n              this.sig_2e = true;\n            }\n          }\n    } else if (sigNum === \"4E\") {\n      if (!this.sw_1) {\n        return;\n      } // Route E_2_1\n      else if (this.sw_1 && !this.sw_3) {\n          if (this.sig_4e) {\n            this.route_e_trk_2 = null;\n            this.sig_4e = false;\n          } else {\n            if (next_block_1 === Occupied || next_block_1 === Lined) {\n              alert(\"Cannot Line Route Because Conflict With Next Block\");\n              return;\n            }\n\n            this.route_e_trk_2 = \"E_2_1__|__2_westSecaucus_laurel\";\n            this.sig_4e = true;\n          }\n        } // Route E_2_2\n        else if (this.sw_1 && this.sw_3) {\n            if (this.sig_4e) {\n              this.route_e_trk_2 = null;\n              this.sig_4e = false;\n            } else {\n              if (next_block_2 === Occupied || next_block_2 === Lined) {\n                alert(\"Cannot Line Route Because Conflict With Next Block\");\n                return;\n              }\n\n              this.route_e_trk_2 = \"E_2_2__|__4_westSecaucus_laurel\";\n              this.sig_4e = true;\n            }\n          }\n    }\n  } // ---- END click_sig() ----\n\n  /**\n   * set_occupied()\n   * @summary Sets the track as occupied\n   * \n   * @param n_state, The new state of the track\n   * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n   */\n\n\n  set_occupied(n_state) {\n    if (n_state === true) {\n      this.int_occupied = n_state;\n      this.time_occupied = new Date().getTime() / 1000;\n    } else {\n      console.log(\"ERROR\");\n    }\n  } // ---- END set_occupied() ----\n\n  /**\n   * can_clear()\n   * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n   * \n   * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n   * clears that track\n   */\n\n\n  can_clear() {\n    // Get the current time\n    let current_time = new Date().getTime() / 1000;\n\n    if (current_time - this.time_occupied > 4 && current_time - this.time_occupied < 100000) {\n      this.sig_2w = false;\n      this.sig_2e = false;\n      this.sig_4e = false;\n      this.route_w_trk_1 = null;\n      this.route_e_trk_1 = null;\n      this.route_e_trk_2 = null;\n      this.int_occupied = false;\n      this.time_occupied = null;\n    }\n  } // ---- END can_clear() ----\n\n  /**\n   * get_routes()\n   * @summary Gets all the routes from the interlocking\n   * \n   * @returns An Array holding every route variable from the interlocking\n   */\n\n\n  get_routes() {\n    let routes = [this.route_w_trk_1, this.route_w_trk_2, this.route_e_trk_1, this.route_e_trk_2];\n    return routes;\n  } // ---- END get_routes() ----\n\n  /**\n   * get_train_route()\n   * @summary Returns the route for the train at a given track\n   * \n   * @param direction, The direction the train is moving\n   * @param track, The Track number of the train \n   */\n\n\n  get_train_route(direction, track) {\n    if (direction === \"WEST\") {\n      if (track === \"1\") {\n        return this.route_w_trk_2;\n      } else {\n        return this.route_w_trk_1;\n      }\n    } else {\n      if (track === \"1\") {\n        return this.route_e_trk_1;\n      } else {\n        return this.route_e_trk_2;\n      }\n    }\n  } // ---- END get_train_route() ----\n\n  /**\n   * @summary Funtion to throw switch #1 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_1() {\n    if (this.sw_1 === false) {\n      this.sw_1 = true;\n    } else {\n      this.sw_1 = false;\n    }\n  } // ---- END throw_sw_1() ----\n\n  /**\n   * @summary Funtion to throw switch #3 in the interlocking\n   * \n   * The function sets the status of the switch, whether it is is the normal possition\n   * of reversed, (True = Reversed / False = Normal)\n   */\n\n\n  throw_sw_3() {\n    if (this.sw_3 === false) {\n      this.sw_3 = true;\n    } else {\n      this.sw_3 = false;\n    }\n  } // ---- END throw_sw_3() ----\n\n  /**\n   * get_interlocking_status()\n   * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n   * \n   * @description All the information that is returned here is what is needed by the ReactJS Component \n   * for the interlocking that is need to draw the interlocking to the screen\n   * \n   * @returns Object with the status of the interlocking\n   */\n\n\n  get_interlocking_status() {\n    let status = {\n      sw_1: this.sw_1,\n      sw_3: this.sw_3,\n      routes: this.get_routes(),\n      occupied: this.int_occupied\n    };\n    return status;\n  } // ---- END get_interlocking_status() ----\n\n\n} // This is required when using ReactJS\n\n\nexport default CTC_WestSecaucus;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Interlockings/Main_Line/ctc_westSecaucus.js"],"names":["Empty","Lined","Occupied","CTC_WestSecaucus","constructor","sw_1","sw_3","sig_2w","sig_2e","sig_4w","sig_4e","route_w_trk_1","route_w_trk_2","route_e_trk_1","route_e_trk_2","int_occupied","time_occupied","click_sig","sigNum","next_block_1","next_block_2","alert","set_occupied","n_state","Date","getTime","console","log","can_clear","current_time","get_routes","routes","get_train_route","direction","track","throw_sw_1","throw_sw_3","get_interlocking_status","status","occupied"],"mappings":"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","sourcesContent":["/**\n * @file ctc_westSecaucus.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the West Secacus Interlocking\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n\n\n/**\n * Class is the Backend for the West Secacus Interlocking This class is what controlls the West Secacus Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * \n * @member sig_2w -> Bool if Signal #2w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member time_occupied = The time the track was occupied, used to know when to clear the route\n * @member int_occupied = Bool if the track is occupied or not\n */\nclass CTC_WestSecaucus {\n    /**\n     * constructor()\n     * @summary The constructor for the CTC_WestSecaucus class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */\n    constructor() {\n        // Bools for the switches\n        this.sw_1 = false;\n        this.sw_3 = false;\n        // Bools for the signals\n        this.sig_2w = false;\n        this.sig_2e = false;\n        this.sig_4w = false;\n        this.sig_4e = false;\n        // Track routes\n        this.route_w_trk_1 = null;\n        this.route_w_trk_2 = null;\n        this.route_e_trk_1 = null;\n        this.route_e_trk_2 = null;\n        // Used for routing and occupying the tracks \n        this.int_occupied = false;\n        this.time_occupied = null;\n    }\n    // ---- END constructor() ----\n\n    /**\n     * click_sig()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param sigNum, the id of the signal clicked\n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig(sigNum, next_block_1, next_block_2) {\n        if (sigNum === \"2W\") {\n            if (this.sw_3) {\n                return\n            }\n            // Route W_1_1\n            else if (!this.sw_1 && !this.sw_3) {\n                if (this.sig_2w) {\n                    this.route_w_trk_1 = null;\n                    this.sig_2w = false;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_1 = \"W_1_1__|__1_mill_westSecaucus\"\n                    this.sig_2w = true;\n                }\n            }\n            // Route W_1_2\n            else if (this.sw_1 && !this.sw_3) {\n                if (this.sig_2w) {\n                    this.route_w_trk_1 = null;\n                    this.sig_2w = false;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        return;\n                    }\n                    this.route_w_trk_1 = \"W_1_2__|__2_mill_westSecaucus\"\n                    this.sig_2w = true;\n                }\n            }\n        }\n        else if (sigNum === \"4W\") {\n            if (!this.sw_3) {\n                return;\n            }\n            // Route W_2_1\n            if (!this.sw_1 && this.sw_3) {\n                if (this.sig_4w) {\n                    this.route_w_trk_2 = null;\n                    this.sig_4w = false;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_2 = \"W_2_1__|__1_mill_westSecaucus\"\n                    this.sig_4w = true;\n                }\n            }\n            // Route W_2_2\n            else if (this.sw_1 && this.sw_3) {\n                if (this.sig_4w) {\n                    this.route_w_trk_2 = null;\n                    this.sig_4w = false;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_2 = \"W_2_2__|__2_mill_westSecaucus\"\n                    this.sig_4w = true;\n                }\n            }\n        }\n        else if (sigNum === \"2E\") {\n            if (this.sw_1) {\n                return;\n            }\n            // Route E_1_1\n            else if (!this.sw_1 && !this.sw_3) {\n                if (this.sig_2e) {\n                    this.route_e_trk_1 = null;\n                    this.sig_2e = false;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_1 = \"E_1_1__|__2_westSecaucus_laurel\"\n                    this.sig_2e = true;\n                }\n            }\n            // Route E_1_2\n            else if (!this.sw_1 && this.sw_3) {\n                if (this.sig_2e) {\n                    this.route_e_trk_1 = null;\n                    this.sig_2e = false;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_1 = \"E_1_2__|__4_westSecaucus_laurel\"\n                    this.sig_2e = true;\n                }\n            }\n        }\n        else if (sigNum === \"4E\") {\n            if (!this.sw_1) {\n                return;\n            }\n            // Route E_2_1\n            else if (this.sw_1 && !this.sw_3) {\n                if (this.sig_4e) {\n                    this.route_e_trk_2 = null;\n                    this.sig_4e = false;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_2 = \"E_2_1__|__2_westSecaucus_laurel\";\n                    this.sig_4e = true;\n                }\n            }\n            // Route E_2_2\n            else if (this.sw_1 && this.sw_3) {\n                if (this.sig_4e) {\n                    this.route_e_trk_2 = null;\n                    this.sig_4e = false;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_2 = \"E_2_2__|__4_westSecaucus_laurel\"\n                    this.sig_4e = true;\n                }\n            }\n        }\n    }\n    // ---- END click_sig() ----\n\n    /**\n     * set_occupied()\n     * @summary Sets the track as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_occupied(n_state) {\n        if (n_state === true) {\n            this.int_occupied = n_state;\n            this.time_occupied = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_occupied() ----\n\n    /**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */\n    can_clear() {\n        // Get the current time\n        let current_time = new Date().getTime() / 1000;\n        if (current_time - this.time_occupied > 4 && current_time - this.time_occupied < 100000) {\n            this.sig_2w = false;\n            this.sig_2e = false;\n            this.sig_4e = false;\n\n            this.route_w_trk_1 = null;\n            this.route_e_trk_1 = null;\n            this.route_e_trk_2 = null;\n\n            this.int_occupied = false;\n            this.time_occupied = null;\n        }\n    }\n    // ---- END can_clear() ----\n    \n    /**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */\n    get_routes() {\n        let routes = [\n            this.route_w_trk_1, this.route_w_trk_2, \n            this.route_e_trk_1, this.route_e_trk_2\n        ];\n        return routes;\n    }\n    // ---- END get_routes() ----\n\n    /**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */\n    get_train_route(direction, track) {\n        if (direction === \"WEST\") {\n            if (track === \"1\") {\n                return this.route_w_trk_2;\n            }\n            else {\n                return this.route_w_trk_1;\n            }\n        }\n        else {\n            if (track === \"1\") {\n                return this.route_e_trk_1;\n            }\n            else {\n                return this.route_e_trk_2;\n            }\n        }\n    }\n    // ---- END get_train_route() ----\n\n    /**\n     * @summary Funtion to throw switch #1 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_1() {\n        if (this.sw_1 === false) {\n            this.sw_1 = true;\n        }\n        else {\n            this.sw_1 = false;\n        }\n    }\n    // ---- END throw_sw_1() ----\n\n    /**\n     * @summary Funtion to throw switch #3 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_3() {\n        if (this.sw_3 === false) {\n            this.sw_3 = true;\n        }\n        else {\n            this.sw_3 = false;\n        }\n    }\n    // ---- END throw_sw_3() ----\n\n    /**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */\n    get_interlocking_status() {\n        let status = {\n            sw_1: this.sw_1,\n            sw_3: this.sw_3,\n            routes: this.get_routes(),\n            occupied: this.int_occupied\n        }\n\n        return status;\n    }\n    // ---- END get_interlocking_status() ----\n}\n\n// This is required when using ReactJS\nexport default CTC_WestSecaucus;"]},"metadata":{},"sourceType":"module"}