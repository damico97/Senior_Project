{"ast":null,"code":"import _classCallCheck from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/createClass\";/**\n * @file ctc_block.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary Class that is a \"block\" or track, that makes up the railroad\n *\n * @description This class is a section of track, between two interlockings, this classes make up the railroad\n */ // Color Constants For Drawing Routes\nvar Empty='#999999';var Route='#75fa4c';var Occupied='#eb3323';/**\n * Class that is a \"block\" or track, that makes up part of the railroad. This class is a section of track, \n * between two interlockings, this classes make up the railroad. The block class variables that are basically \n * characteristics of a real piece of track\n * \n * @member block_name -> The name of the piece of track, usually the two location it bridges\n * @member block_size -> The size of the track, (i.e. how long it takes for a train to travel it)\n * @member block_status -> Wheter the block is Empty, Routed (A train is coming), or Occupied (A train is there)\n * @member train_symbol -> The symbol or the train that occupys that block\n */var CTC_Block=/*#__PURE__*/function(){/**\n     * constructor(),\n     * @summary The Constructor of the CTC_Block Class\n     * \n     * @description Sets all the memeber variables to their initial values, when the application starts\n     * \n     * @param p_name, The Name of the Block\n     * @param p_size, The Size of the Block\n     * @param p_status, Current Status. Only Used for debugging when build the applications\n     */function CTC_Block(p_name,p_size,p_status){_classCallCheck(this,CTC_Block);this.block_name=p_name;this.block_size=p_size;this.block_status=p_status;this.train_symbol=null;}// ---- END constructor() ----\n/**\n     * get_block_status()\n     * @summary Getter for the block_status member variable\n     * \n     * @returns The current status of the block\n     */_createClass(CTC_Block,[{key:\"get_block_status\",value:function get_block_status(){return this.block_status;}// ---- END get_block_status() ----\n/**\n     * get_size()\n     * @summary Getter for the block_size member variable\n     * \n     * @return The size of the block\n     */},{key:\"get_size\",value:function get_size(){return this.block_size;}// ---- END get_size() ----\n/**\n     * get_symbol()\n     * @summary Getter for the train_symbol memebr variable\n     * \n     * @returns The symbol of the trail that is currently in the block\n     */},{key:\"get_symbol\",value:function get_symbol(){return this.train_symbol;}// ---- END get_symbol() ----\n/**\n     * reset_block()\n     * @summary Resets the Block status to Empty\n     * \n     * @description This is used to reset the block, when the CTC controller refreshes the train and route locations\n     */},{key:\"reset_block\",value:function reset_block(){// Check if the Block Is Routed\nif(this.block_status===Route){this.block_status=Empty;}}// ---- END reset_block() ----\n/**\n     * set_symbol()\n     * @summary Setter for the train_symbol member variable\n     * \n     * @param n_symbol, The new symbols to set the member variable too\n     */},{key:\"set_symbol\",value:function set_symbol(n_symbol){this.train_symbol=n_symbol;}// ---- END set_symbol() ----\n/**\n     * set_block_status()\n     * @summary Sets the block current status based off of what tag is passed in\n     * \n     * @param p_status, A String which is the Kinda of status of what to set the block too\n     */},{key:\"set_block_status\",value:function set_block_status(p_status){if(p_status==='Empty'){this.block_status=Empty;}else if(p_status==='Route'){this.block_status=Route;}else if(p_status==='Occupied'){this.block_status=Occupied;}else{console.log(\"ERROR!! - CTC_Block \"+this.block_name+\" [set_block_status()]\");}}}]);return CTC_Block;}();// This is required when using ReactJS\nexport default CTC_Block;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/CTC/ctc_block.js"],"names":["Empty","Route","Occupied","CTC_Block","p_name","p_size","p_status","block_name","block_size","block_status","train_symbol","n_symbol","console","log"],"mappings":"0QAAA;;;;;;;IASA;AACA,GAAMA,CAAAA,KAAK,CAAG,SAAd,CACA,GAAMC,CAAAA,KAAK,CAAG,SAAd,CACA,GAAMC,CAAAA,QAAQ,CAAG,SAAjB,CAEA;;;;;;;;;MAUMC,CAAAA,S,yBACF;;;;;;;;;OAUA,mBAAYC,MAAZ,CAAoBC,MAApB,CAA4BC,QAA5B,CAAsC,iCAClC,KAAKC,UAAL,CAAkBH,MAAlB,CACA,KAAKI,UAAL,CAAkBH,MAAlB,CACA,KAAKI,YAAL,CAAoBH,QAApB,CACA,KAAKI,YAAL,CAAoB,IAApB,CACH,CACD;AAEA;;;;;wFAMmB,CACf,MAAO,MAAKD,YAAZ,CACH,CACD;AAEA;;;;;kDAMW,CACP,MAAO,MAAKD,UAAZ,CACH,CACD;AAEA;;;;;sDAMa,CACT,MAAO,MAAKE,YAAZ,CACH,CACD;AAEA;;;;;wDAMc,CACV;AACA,GAAI,KAAKD,YAAL,GAAsBR,KAA1B,CAAiC,CAC7B,KAAKQ,YAAL,CAAoBT,KAApB,CACH,CACJ,CACD;AAEA;;;;;qDAMWW,Q,CAAU,CACjB,KAAKD,YAAL,CAAoBC,QAApB,CACH,CACD;AAEA;;;;;iEAMiBL,Q,CAAU,CACvB,GAAIA,QAAQ,GAAK,OAAjB,CAA0B,CACtB,KAAKG,YAAL,CAAoBT,KAApB,CACH,CAFD,IAGK,IAAIM,QAAQ,GAAK,OAAjB,CAA0B,CAC3B,KAAKG,YAAL,CAAoBR,KAApB,CACH,CAFI,IAGA,IAAIK,QAAQ,GAAK,UAAjB,CAA6B,CAC9B,KAAKG,YAAL,CAAoBP,QAApB,CACH,CAFI,IAGA,CACDU,OAAO,CAACC,GAAR,CAAY,uBAAyB,KAAKN,UAA9B,CAA2C,uBAAvD,EACH,CACJ,C,yBAGL;AACA,cAAeJ,CAAAA,SAAf","sourcesContent":["/**\n * @file ctc_block.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary Class that is a \"block\" or track, that makes up the railroad\n *\n * @description This class is a section of track, between two interlockings, this classes make up the railroad\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Route = '#75fa4c';\nconst Occupied = '#eb3323';\n\n/**\n * Class that is a \"block\" or track, that makes up part of the railroad. This class is a section of track, \n * between two interlockings, this classes make up the railroad. The block class variables that are basically \n * characteristics of a real piece of track\n * \n * @member block_name -> The name of the piece of track, usually the two location it bridges\n * @member block_size -> The size of the track, (i.e. how long it takes for a train to travel it)\n * @member block_status -> Wheter the block is Empty, Routed (A train is coming), or Occupied (A train is there)\n * @member train_symbol -> The symbol or the train that occupys that block\n */\nclass CTC_Block {\n    /**\n     * constructor(),\n     * @summary The Constructor of the CTC_Block Class\n     * \n     * @description Sets all the memeber variables to their initial values, when the application starts\n     * \n     * @param p_name, The Name of the Block\n     * @param p_size, The Size of the Block\n     * @param p_status, Current Status. Only Used for debugging when build the applications\n     */\n    constructor(p_name, p_size, p_status) {\n        this.block_name = p_name;\n        this.block_size = p_size;\n        this.block_status = p_status;\n        this.train_symbol = null;\n    }\n    // ---- END constructor() ----\n\n    /**\n     * get_block_status()\n     * @summary Getter for the block_status member variable\n     * \n     * @returns The current status of the block\n     */\n    get_block_status() {\n        return this.block_status;\n    }\n    // ---- END get_block_status() ----\n \n    /**\n     * get_size()\n     * @summary Getter for the block_size member variable\n     * \n     * @return The size of the block\n     */\n    get_size() {\n        return this.block_size;\n    }\n    // ---- END get_size() ----\n\n    /**\n     * get_symbol()\n     * @summary Getter for the train_symbol memebr variable\n     * \n     * @returns The symbol of the trail that is currently in the block\n     */\n    get_symbol() {\n        return this.train_symbol;\n    }\n    // ---- END get_symbol() ----\n\n    /**\n     * reset_block()\n     * @summary Resets the Block status to Empty\n     * \n     * @description This is used to reset the block, when the CTC controller refreshes the train and route locations\n     */\n    reset_block() {\n        // Check if the Block Is Routed\n        if (this.block_status === Route) {\n            this.block_status = Empty;\n        }\n    }\n    // ---- END reset_block() ----\n\n    /**\n     * set_symbol()\n     * @summary Setter for the train_symbol member variable\n     * \n     * @param n_symbol, The new symbols to set the member variable too\n     */\n    set_symbol(n_symbol) {\n        this.train_symbol = n_symbol;\n    }\n    // ---- END set_symbol() ----\n\n    /**\n     * set_block_status()\n     * @summary Sets the block current status based off of what tag is passed in\n     * \n     * @param p_status, A String which is the Kinda of status of what to set the block too\n     */\n    set_block_status(p_status) {\n        if (p_status === 'Empty') {\n            this.block_status = Empty;\n        }\n        else if (p_status === 'Route') {\n            this.block_status = Route;\n        }\n        else if (p_status === 'Occupied') {\n            this.block_status = Occupied;\n        }\n        else {\n            console.log(\"ERROR!! - CTC_Block \" + this.block_name + \" [set_block_status()]\");\n        }\n    }\n}\n\n// This is required when using ReactJS\nexport default CTC_Block;"]},"metadata":{},"sourceType":"module"}