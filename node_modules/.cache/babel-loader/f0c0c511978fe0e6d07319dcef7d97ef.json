{"ast":null,"code":"import _classCallCheck from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/joey/Documents/Codes/CMPS_450/Senior_Project/node_modules/@babel/runtime/helpers/esm/createClass\";/**\n * @file ctc_westSecaucus.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the West Secacus Interlocking\n */ // Color Constants For Drawing Routes\nvar Empty='#999999';var Lined='#75fa4c';var Occupied='#eb3323';/**\n * Class is the Backend for the West Secacus Interlocking This class is what controlls the West Secacus Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * \n * @member sig_2w -> Bool if Signal #2w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member time_occupied = The time the track was occupied, used to know when to clear the route\n * @member int_occupied = Bool if the track is occupied or not\n */var CTC_WestSecaucus=/*#__PURE__*/function(){/**\n     * constructor()\n     * @summary The constructor for the CTC_WestSecaucus class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */function CTC_WestSecaucus(){_classCallCheck(this,CTC_WestSecaucus);// Bools for the switches\nthis.sw_1=false;this.sw_3=false;// Bools for the signals\nthis.sig_2w=false;this.sig_2e=false;this.sig_4w=false;this.sig_4e=false;// Track routes\nthis.route_w_trk_1=null;this.route_w_trk_2=null;this.route_e_trk_1=null;this.route_e_trk_2=null;// Used for routing and occupying the tracks \nthis.int_occupied=false;this.time_occupied=null;}// ---- END constructor() ----\n/**\n     * click_sig()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param sigNum, the id of the signal clicked\n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */_createClass(CTC_WestSecaucus,[{key:\"click_sig\",value:function click_sig(sigNum,next_block_1,next_block_2){if(sigNum===\"2W\"){if(this.sw_3){return;}// Route W_1_1\nelse if(!this.sw_1&&!this.sw_3){if(this.sig_2w){this.route_w_trk_1=null;this.sig_2w=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_w_trk_1=\"W_1_1__|__1_mill_westSecaucus\";this.sig_2w=true;}}// Route W_1_2\nelse if(this.sw_1&&!this.sw_3){if(this.sig_2w){this.route_w_trk_1=null;this.sig_2w=false;}else{if(next_block_2===Occupied||next_block_2===Lined){return;}this.route_w_trk_1=\"W_1_2__|__2_mill_westSecaucus\";this.sig_2w=true;}}}else if(sigNum===\"4W\"){if(!this.sw_3){return;}// Route W_2_1\nif(!this.sw_1&&this.sw_3){if(this.sig_4w){this.route_w_trk_2=null;this.sig_4w=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_w_trk_2=\"W_2_1__|__1_mill_westSecaucus\";this.sig_4w=true;}}// Route W_2_2\nelse if(this.sw_1&&this.sw_3){if(this.sig_4w){this.route_w_trk_2=null;this.sig_4w=false;}else{if(next_block_2===Occupied||next_block_2===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_w_trk_2=\"W_2_2__|__2_mill_westSecaucus\";this.sig_4w=true;}}}else if(sigNum===\"2E\"){if(this.sw_1){return;}// Route E_1_1\nelse if(!this.sw_1&&!this.sw_3){if(this.sig_2e){this.route_e_trk_1=null;this.sig_2e=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_1=\"E_1_1__|__2_westSecaucus_laurel\";this.sig_2e=true;}}// Route E_1_2\nelse if(!this.sw_1&&this.sw_3){if(this.sig_2e){this.route_e_trk_1=null;this.sig_2e=false;}else{if(next_block_2===Occupied||next_block_2===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_1=\"E_1_2__|__4_westSecaucus_laurel\";this.sig_2e=true;}}}else if(sigNum===\"4E\"){if(!this.sw_1){return;}// Route E_2_1\nelse if(this.sw_1&&!this.sw_3){if(this.sig_4e){this.route_e_trk_2=null;this.sig_4e=false;}else{if(next_block_1===Occupied||next_block_1===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_2=\"E_2_1__|__2_westSecaucus_laurel\";this.sig_4e=true;}}// Route E_2_2\nelse if(this.sw_1&&this.sw_3){if(this.sig_4e){this.route_e_trk_2=null;this.sig_4e=false;}else{if(next_block_2===Occupied||next_block_2===Lined){alert(\"Cannot Line Route Because Conflict With Next Block\");return;}this.route_e_trk_2=\"E_2_2__|__4_westSecaucus_laurel\";this.sig_4e=true;}}}}// ---- END click_sig() ----\n/**\n     * set_occupied()\n     * @summary Sets the track as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */},{key:\"set_occupied\",value:function set_occupied(n_state){if(n_state===true){this.int_occupied=n_state;this.time_occupied=new Date().getTime()/1000;}else{console.log(\"ERROR\");}}// ---- END set_occupied() ----\n/**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */},{key:\"can_clear\",value:function can_clear(){// Get the current time\nvar current_time=new Date().getTime()/1000;if(current_time-this.time_occupied>4&&current_time-this.time_occupied<100000){this.sig_2w=false;this.sig_2e=false;this.sig_4e=false;this.route_w_trk_1=null;this.route_e_trk_1=null;this.route_e_trk_2=null;this.int_occupied=false;this.time_occupied=null;}}// ---- END can_clear() ----\n/**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */},{key:\"get_routes\",value:function get_routes(){var routes=[this.route_w_trk_1,this.route_w_trk_2,this.route_e_trk_1,this.route_e_trk_2];return routes;}// ---- END get_routes() ----\n/**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */},{key:\"get_train_route\",value:function get_train_route(direction,track){if(direction===\"WEST\"){if(track===\"1\"){return this.route_w_trk_2;}else{return this.route_w_trk_1;}}else{if(track===\"1\"){return this.route_e_trk_1;}else{return this.route_e_trk_2;}}}// ---- END get_train_route() ----\n/**\n     * @summary Funtion to throw switch #1 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */},{key:\"throw_sw_1\",value:function throw_sw_1(){if(this.sw_1===false){this.sw_1=true;}else{this.sw_1=false;}}// ---- END throw_sw_1() ----\n/**\n     * @summary Funtion to throw switch #3 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */},{key:\"throw_sw_3\",value:function throw_sw_3(){if(this.sw_3===false){this.sw_3=true;}else{this.sw_3=false;}}// ---- END throw_sw_3() ----\n/**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */},{key:\"get_interlocking_status\",value:function get_interlocking_status(){var status={sw_1:this.sw_1,sw_3:this.sw_3,routes:this.get_routes(),occupied:this.int_occupied};return status;}// ---- END get_interlocking_status() ----\n}]);return CTC_WestSecaucus;}();// This is required when using ReactJS\nexport default CTC_WestSecaucus;","map":{"version":3,"sources":["/Users/joey/Documents/Codes/CMPS_450/Senior_Project/src/scripts/Interlockings/Main_Line/ctc_westSecaucus.js"],"names":["Empty","Lined","Occupied","CTC_WestSecaucus","sw_1","sw_3","sig_2w","sig_2e","sig_4w","sig_4e","route_w_trk_1","route_w_trk_2","route_e_trk_1","route_e_trk_2","int_occupied","time_occupied","sigNum","next_block_1","next_block_2","alert","n_state","Date","getTime","console","log","current_time","routes","direction","track","status","get_routes","occupied"],"mappings":"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","sourcesContent":["/**\n * @file ctc_westSecaucus.js\n * @author Joey Damico\n * @date September 25, 2019\n * @summary CTC Controller Class for the West Secacus Interlocking\n */\n\n// Color Constants For Drawing Routes\nconst Empty = '#999999';\nconst Lined = '#75fa4c';\nconst Occupied = '#eb3323';\n\n\n/**\n * Class is the Backend for the West Secacus Interlocking This class is what controlls the West Secacus Interlocking, \n * it is sort of like a backen, but is the controller, this is what makes all the train movements possible, \n * and the ReactJS Component class gets information from this class to display the correct status of the interlocking on the screen\n * \n * MEMBER VARIABLES\n * @member sw_1 -> Bool if Switch #1 is Reveresed or Not\n * @member sw_3 -> Bool if Switch #3 is Reveresed or Not\n * \n * @member sig_2w -> Bool if Signal #2w is Lined or Not\n * @member sig_2e -> Bool if Signal #2e is Lined or Not\n * @member sig_4w -> Bool if Signal #4w is Lined or Not\n * @member sig_4e -> Bool if Signal #4e is Lined or Not\n * \n * @member route_w_trk_1 = The west bound route for track #1\n * @member route_w_trk_2 = The west bound route for track #2\n * @member route_e_trk_1 = The east bound route for track #1\n * @member route_e_trk_2 = The east bound route for track #2\n * \n * @member time_occupied = The time the track was occupied, used to know when to clear the route\n * @member int_occupied = Bool if the track is occupied or not\n */\nclass CTC_WestSecaucus {\n    /**\n     * constructor()\n     * @summary The constructor for the CTC_WestSecaucus class\n     * \n     * @description This will initialize all the member variables when the program is started\n     */\n    constructor() {\n        // Bools for the switches\n        this.sw_1 = false;\n        this.sw_3 = false;\n        // Bools for the signals\n        this.sig_2w = false;\n        this.sig_2e = false;\n        this.sig_4w = false;\n        this.sig_4e = false;\n        // Track routes\n        this.route_w_trk_1 = null;\n        this.route_w_trk_2 = null;\n        this.route_e_trk_1 = null;\n        this.route_e_trk_2 = null;\n        // Used for routing and occupying the tracks \n        this.int_occupied = false;\n        this.time_occupied = null;\n    }\n    // ---- END constructor() ----\n\n    /**\n     * click_sig()\n     * @summary the function that is called when clicking the signal, creates a route\n     * \n     * @description When the function is called it will determine if a route can be created, \n     * and if so what the route is and sets it based off of the switch status\n     * \n     * @param sigNum, the id of the signal clicked\n     * @param next_block_1, The next block on Track #1\n     * @param next_block_2, The next block on Track #2\n     */\n    click_sig(sigNum, next_block_1, next_block_2) {\n        if (sigNum === \"2W\") {\n            if (this.sw_3) {\n                return\n            }\n            // Route W_1_1\n            else if (!this.sw_1 && !this.sw_3) {\n                if (this.sig_2w) {\n                    this.route_w_trk_1 = null;\n                    this.sig_2w = false;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_1 = \"W_1_1__|__1_mill_westSecaucus\"\n                    this.sig_2w = true;\n                }\n            }\n            // Route W_1_2\n            else if (this.sw_1 && !this.sw_3) {\n                if (this.sig_2w) {\n                    this.route_w_trk_1 = null;\n                    this.sig_2w = false;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        return;\n                    }\n                    this.route_w_trk_1 = \"W_1_2__|__2_mill_westSecaucus\"\n                    this.sig_2w = true;\n                }\n            }\n        }\n        else if (sigNum === \"4W\") {\n            if (!this.sw_3) {\n                return;\n            }\n            // Route W_2_1\n            if (!this.sw_1 && this.sw_3) {\n                if (this.sig_4w) {\n                    this.route_w_trk_2 = null;\n                    this.sig_4w = false;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_2 = \"W_2_1__|__1_mill_westSecaucus\"\n                    this.sig_4w = true;\n                }\n            }\n            // Route W_2_2\n            else if (this.sw_1 && this.sw_3) {\n                if (this.sig_4w) {\n                    this.route_w_trk_2 = null;\n                    this.sig_4w = false;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_w_trk_2 = \"W_2_2__|__2_mill_westSecaucus\"\n                    this.sig_4w = true;\n                }\n            }\n        }\n        else if (sigNum === \"2E\") {\n            if (this.sw_1) {\n                return;\n            }\n            // Route E_1_1\n            else if (!this.sw_1 && !this.sw_3) {\n                if (this.sig_2e) {\n                    this.route_e_trk_1 = null;\n                    this.sig_2e = false;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_1 = \"E_1_1__|__2_westSecaucus_laurel\"\n                    this.sig_2e = true;\n                }\n            }\n            // Route E_1_2\n            else if (!this.sw_1 && this.sw_3) {\n                if (this.sig_2e) {\n                    this.route_e_trk_1 = null;\n                    this.sig_2e = false;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_1 = \"E_1_2__|__4_westSecaucus_laurel\"\n                    this.sig_2e = true;\n                }\n            }\n        }\n        else if (sigNum === \"4E\") {\n            if (!this.sw_1) {\n                return;\n            }\n            // Route E_2_1\n            else if (this.sw_1 && !this.sw_3) {\n                if (this.sig_4e) {\n                    this.route_e_trk_2 = null;\n                    this.sig_4e = false;\n                }\n                else {\n                    if (next_block_1 === Occupied || next_block_1 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_2 = \"E_2_1__|__2_westSecaucus_laurel\";\n                    this.sig_4e = true;\n                }\n            }\n            // Route E_2_2\n            else if (this.sw_1 && this.sw_3) {\n                if (this.sig_4e) {\n                    this.route_e_trk_2 = null;\n                    this.sig_4e = false;\n                }\n                else {\n                    if (next_block_2 === Occupied || next_block_2 === Lined) {\n                        alert(\"Cannot Line Route Because Conflict With Next Block\");\n                        return;\n                    }\n                    this.route_e_trk_2 = \"E_2_2__|__4_westSecaucus_laurel\"\n                    this.sig_4e = true;\n                }\n            }\n        }\n    }\n    // ---- END click_sig() ----\n\n    /**\n     * set_occupied()\n     * @summary Sets the track as occupied\n     * \n     * @param n_state, The new state of the track\n     * This was used to test, and never removed passing the state as a paramemter, which is not needed anymore\n     */\n    set_occupied(n_state) {\n        if (n_state === true) {\n            this.int_occupied = n_state;\n            this.time_occupied = new Date().getTime() / 1000;\n        }\n        else {\n            console.log(\"ERROR\");\n        }\n    }\n    // ---- END set_occupied() ----\n\n    /**\n     * can_clear()\n     * @summary Checks if a track could be cleared, meaning a train is no longer in the interlocking\n     * \n     * @description Check the track if a train has been in the interlocking for more then 4 seconds, if so it\n     * clears that track\n     */\n    can_clear() {\n        // Get the current time\n        let current_time = new Date().getTime() / 1000;\n        if (current_time - this.time_occupied > 4 && current_time - this.time_occupied < 100000) {\n            this.sig_2w = false;\n            this.sig_2e = false;\n            this.sig_4e = false;\n\n            this.route_w_trk_1 = null;\n            this.route_e_trk_1 = null;\n            this.route_e_trk_2 = null;\n\n            this.int_occupied = false;\n            this.time_occupied = null;\n        }\n    }\n    // ---- END can_clear() ----\n    \n    /**\n     * get_routes()\n     * @summary Gets all the routes from the interlocking\n     * \n     * @returns An Array holding every route variable from the interlocking\n     */\n    get_routes() {\n        let routes = [\n            this.route_w_trk_1, this.route_w_trk_2, \n            this.route_e_trk_1, this.route_e_trk_2\n        ];\n        return routes;\n    }\n    // ---- END get_routes() ----\n\n    /**\n     * get_train_route()\n     * @summary Returns the route for the train at a given track\n     * \n     * @param direction, The direction the train is moving\n     * @param track, The Track number of the train \n     */\n    get_train_route(direction, track) {\n        if (direction === \"WEST\") {\n            if (track === \"1\") {\n                return this.route_w_trk_2;\n            }\n            else {\n                return this.route_w_trk_1;\n            }\n        }\n        else {\n            if (track === \"1\") {\n                return this.route_e_trk_1;\n            }\n            else {\n                return this.route_e_trk_2;\n            }\n        }\n    }\n    // ---- END get_train_route() ----\n\n    /**\n     * @summary Funtion to throw switch #1 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_1() {\n        if (this.sw_1 === false) {\n            this.sw_1 = true;\n        }\n        else {\n            this.sw_1 = false;\n        }\n    }\n    // ---- END throw_sw_1() ----\n\n    /**\n     * @summary Funtion to throw switch #3 in the interlocking\n     * \n     * The function sets the status of the switch, whether it is is the normal possition\n     * of reversed, (True = Reversed / False = Normal)\n     */\n    throw_sw_3() {\n        if (this.sw_3 === false) {\n            this.sw_3 = true;\n        }\n        else {\n            this.sw_3 = false;\n        }\n    }\n    // ---- END throw_sw_3() ----\n\n    /**\n     * get_interlocking_status()\n     * @summary returns the status of the interlocking that would be needed by the ReactJS Components\n     * \n     * @description All the information that is returned here is what is needed by the ReactJS Component \n     * for the interlocking that is need to draw the interlocking to the screen\n     * \n     * @returns Object with the status of the interlocking\n     */\n    get_interlocking_status() {\n        let status = {\n            sw_1: this.sw_1,\n            sw_3: this.sw_3,\n            routes: this.get_routes(),\n            occupied: this.int_occupied\n        }\n\n        return status;\n    }\n    // ---- END get_interlocking_status() ----\n}\n\n// This is required when using ReactJS\nexport default CTC_WestSecaucus;"]},"metadata":{},"sourceType":"module"}